{"version":3,"sources":["hooks/OnBlock.js","hooks/Poller.js","hooks/Balance.js","hooks/ContractExistsAtAddress.js","hooks/ContractLoader.js","hooks/ContractReader.js","hooks/LookupAddress.js","hooks/ResolveName.js","hooks/BurnerSigner.js","hooks/UserSigner.js","components/Address.jsx","components/Balance.jsx","constants.js","helpers/Transactor.js","components/Blockie.jsx","components/AddressInput.jsx","components/EtherInput.jsx","components/Wallet.jsx","components/Account.jsx","components/BytesStringInput.jsx","components/Contract/utils.js","components/Contract/DisplayVariable.jsx","components/Contract/FunctionForm.jsx","components/Contract/index.jsx","components/Faucet.jsx","components/GasGauge.jsx","components/Header.jsx","components/Ramp.jsx","components/Swap.jsx","components/ThemeSwitch.jsx","components/Timeline.jsx","App.jsx","hooks/ExchangePrice.js","hooks/GasPrice.js","hooks/EventListener.js","index.jsx","contracts/external_contracts.js"],"names":["useOnBlock","provider","fn","args","savedCallback","useRef","useEffect","current","listener","blockNumber","length","on","off","usePoller","delay","extraWatch","id","setInterval","clearInterval","useBalance","address","pollTime","useState","balance","setBalance","pollBalance","useCallback","a","getBalance","newBalance","useContractExistsAtAddress","contractAddress","contractIsDeployed","setContractIsDeployed","checkDeployment","utils","isAddress","getCode","bytecode","ethers","require","useContractLoader","providerOrSigner","config","contracts","setContracts","active","console","log","listAccounts","accounts","Signer","isSigner","signer","getSigner","getNetwork","providerNetwork","_chainId","chainId","contractList","externalContractList","hardhatContracts","e","externalContracts","combinedContracts","hardhatNetwork","Object","prototype","hasOwnProperty","call","hardhatNetworkName","newContracts","keys","reduce","accumulator","contractName","_address","customAddresses","includes","Contract","abi","loadContracts","useContractReader","functionName","formatter","onChange","adjustPollTime","value","setValue","tried","setTried","setTimeout","bind","updateValue","newValue","lookupAddress","reportedName","resolveName","resolvedAddress","getAddress","useLookupAddress","ensName","setEnsName","cache","window","localStorage","getItem","JSON","parse","timestamp","Date","now","name","then","setItem","stringify","useUserSigner","injectedProvider","localProvider","setSigner","burnerSigner","key","storedValue","setStoredValue","error","storedKey","_newKey","Wallet","createRandom","privateKey","_signer","connect","useBurnerSigner","useMemo","injectedSigner","_isProvider","location","pathname","indexOf","rawPK","incomingPK","hash","replace","history","pushState","currentPrivateKey","Text","Typography","Address","props","ens","ensProvider","currentTheme","useThemeSwitcher","avatar","paragraph","rows","displayAddress","substr","size","text","etherscanLink","blockExplorer","blockExplorerLink","minimized","style","verticalAlign","color","target","href","rel","seed","toLowerCase","scale","editable","copyable","fontSize","paddingLeft","Balance","dollarMode","setDollarMode","floatBalance","parseFloat","usingBalance","etherBalance","formatEther","toFixed","displayBalance","price","dollarMultiplier","padding","cursor","onClick","INFURA_ID","NETWORKS","localhost","rpcUrl","hostname","mainnet","kovan","faucet","rinkeby","ropsten","goerli","xdai","gasPrice","matic","mumbai","localArbitrum","localArbitrumL1","rinkebyArbitrum","arbitrum","localOptimismL1","localOptimism","kovanOptimism","optimism","NETWORK","n","callbacks","Transactor","etherscan","tx","callback","network","options","notify","navigator","onLine","dappId","system","networkId","transactionHandler","txInformation","possibleFunction","transaction","Notify","etherscanNetwork","etherscanTxUrl","Promise","result","parseUnits","gasLimit","hexlify","sendTransaction","emitter","onclick","open","notification","info","message","description","placement","txResult","listeningInterval","getTransactionReceipt","currentTransactionReceipt","confirmations","wait","data","reason","Blockie","AddressInput","scan","setScan","currentValue","scannerButton","marginTop","count","CameraOutlined","QrcodeOutlined","updateAddress","possibleAddress","scanner","zIndex","position","left","top","width","resolution","onError","onScan","possibleNewValue","lastIndexOf","autoComplete","autoFocus","placeholder","prefix","addonAfter","EtherInput","mode","setMode","display","setDisplay","option","title","usdValue","ethValue","Paragraph","signerAddress","setSignerAddress","newAddress","receiveButton","privateKeyButton","selectedAddress","setOpen","qr","setQr","amount","setAmount","toAddress","setToAddress","pk","setPK","providerSend","WalletOutlined","rotate","level","includeMargin","renderAs","imageSettings","excavate","KeyOutlined","wallet","extraPkDisplayAdded","extraPkDisplay","push","backgroundStyle","pastpk","pastwallet","_signingKey","reload","inputStyle","visible","float","paddingRight","onOk","onCancel","footer","type","disabled","loading","parseEther","to","SendOutlined","Account","userSigner","mainnetProvider","web3Modal","loadWeb3Modal","logoutOfWeb3Modal","modalButtons","cachedProvider","marginLeft","shape","constants","tryToDisplay","thing","toNumber","formatUnits","DisplayVariable","contractFunction","functionInfo","refreshRequired","triggerRefresh","variable","setVariable","refresh","funcResponse","span","textAlign","opacity","BigNumber","FunctionForm","form","setForm","txValue","setTxValue","returnValue","setReturnValue","inputIndex","inputs","map","input","buttons","isHexString","formUpdate","parseBytes32String","formatBytes32String","toUtf8String","toUtf8Bytes","trim","margin","event","suffix","txValueInput","floatValue","from","toHexString","payable","buttonIcon","defaultValue","bordered","height","innerIndex","baseType","stateMutability","returned","overrides","funcsUseful","noContractDisplay","className","borderRadius","fontWeight","marginRight","role","aria-label","contract","customContract","account","show","displayedContractFunctions","values","interface","functions","filter","sort","b","contractDisplay","isQueryable","Faucet","blockie","setAddress","faucetAddress","setFaucetAddress","_faucetAddress","getFaucetAddress","icon","GasGauge","parseInt","Header","subTitle","Ramp","modalUp","setModalUp","allFaucets","networks","DollarCircleOutlined","RampInstantSDK","hostAppName","hostLogoUrl","swapAmount","swapAsset","userAddress","Select","Option","Swap","ThemeSwitcher","theme","isDarkMode","setIsDarkMode","switcher","themes","status","right","bottom","checked","isChecked","dark","light","BufferList","ipfsAPI","host","port","protocol","targetNetwork","STARTING_JSON","external_url","image","attributes","trait_type","scaffoldEthProvider","providers","StaticJsonRpcProvider","mainnetInfura","localProviderUrl","localProviderUrlFromEnv","process","REACT_APP_PROVIDER","Web3Modal","cacheProvider","providerOptions","walletconnect","package","WalletConnectProvider","infuraId","clearCachedProvider","App","_network","setInjectedProvider","setPrice","DAI","Token","Fetcher","fetchPairData","WETH","pair","route","Route","midPrice","toSignificant","getPrice","useExchangePrice","speed","setGasPrice","loadGasPrice","axios","get","response","newGasPrice","catch","useGasPrice","localChainId","selectedChainId","faucetTx","yourLocalBalance","yourMainnetBalance","readContracts","writeContracts","mainnetContracts","_lastBlockNumber","myMainnetDAIBalance","transferEvents","eventName","startBlock","updates","setUpdates","resetEventsBlock","messages","pop","removeListener","useEventListener","yourBalance","Ns","setNs","collectibleUpdate","tokenIndex","N","tokenOfOwnerByIndex","tokenId","tokenURI","svg","method","url","token_uri","headers","atob","uri","owner","updateNs","networkDisplay","networkSelected","networkLocal","closable","ethereum","toString","chainName","nativeCurrency","rpcUrls","blockExplorerUrls","request","params","Web3Provider","code","setRoute","faucetHint","faucetAvailable","connection","faucetClicked","setFaucetClicked","transferToAddresses","setTransferToAddresses","selectedKeys","Item","exact","path","paddingBottom","dataSource","renderItem","item","dangerouslySetInnerHTML","__html","update","transferFrom","align","gutter","prevTheme","subgraphUri","client","ApolloClient","InMemoryCache","ReactDOM","render","themeMap","defaultTheme","document","getElementById","module","exports","1","internalType","anonymous","indexed","constant","outputs","UNI"],"mappings":"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","file":"static/js/main.c5540bb6.chunk.js","sourcesContent":["import { useEffect, useRef } from \"react\";\n\n// helper hook to call a function regularly in time intervals\nconst DEBUG = false;\n\nexport default function useOnBlock(provider, fn, args) {\n  const savedCallback = useRef();\n  // Remember the latest fn.\n  useEffect(() => {\n    savedCallback.current = fn;\n  }, [fn]);\n\n  // Turn on the listener if we have a function & a provider\n  useEffect(() => {\n    if (fn && provider) {\n      const listener = blockNumber => {\n        if (DEBUG) console.log(blockNumber, fn, args, provider.listeners());\n\n        if (args && args.length > 0) {\n          savedCallback.current(...args);\n        } else {\n          savedCallback.current();\n        }\n      };\n\n      provider.on(\"block\", listener);\n\n      return () => {\n        provider.off(\"block\", listener);\n      };\n    }\n  }, [provider]);\n}\n","import { useEffect, useRef } from \"react\";\n\n// helper hook to call a function regularly in time intervals\n\nexport default function usePoller(fn, delay, extraWatch) {\n  const savedCallback = useRef();\n  // Remember the latest fn.\n  useEffect(() => {\n    savedCallback.current = fn;\n  }, [fn]);\n  // Set up the interval.\n  // eslint-disable-next-line consistent-return\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n  // run at start too\n  useEffect(() => {\n    fn();\n  }, [extraWatch]);\n}\n","import { useCallback, useState } from \"react\";\nimport useOnBlock from \"./OnBlock\";\nimport usePoller from \"./Poller\";\n\n/*\n  ~ What it does? ~\n\n  Gets your balance in ETH from given address and provider\n\n  ~ How can I use? ~\n\n  const yourLocalBalance = useBalance(localProvider, address);\n\n  ~ Features ~\n\n  - Provide address and get balance corresponding to given address\n  - Change provider to access balance on different chains (ex. mainnetProvider)\n  - If no pollTime is passed, the balance will update on every new block\n*/\n\nconst DEBUG = false;\n\nexport default function useBalance(provider, address, pollTime = 0) {\n  const [balance, setBalance] = useState();\n\n  const pollBalance = useCallback(\n    async (provider, address) => {\n      if (provider && address) {\n        const newBalance = await provider.getBalance(address);\n        if (newBalance !== balance) {\n          setBalance(newBalance);\n        }\n      }\n    },\n    [provider, address],\n  );\n\n  // Only pass a provider to watch on a block if there is no pollTime\n  useOnBlock(pollTime === 0 && provider, () => {\n    if (provider && address && pollTime === 0) {\n      pollBalance(provider, address);\n    }\n  });\n\n  // Use a poller if a pollTime is provided\n  usePoller(\n    async () => {\n      if (provider && address && pollTime > 0) {\n        if (DEBUG) console.log(\"polling!\", address);\n        pollBalance();\n      }\n    },\n    pollTime,\n    provider && address,\n  );\n\n  return balance;\n}\n","import { utils } from \"ethers\";\nimport { useEffect, useState } from \"react\";\n\n/*\n  ~ What it does? ~\n\n  Checks whether a contract exists on the blockchain, returns true if it exists, otherwise false\n\n  ~ How can I use? ~\n\n  const contractIsDeployed = useContractExistsAtAddress(localProvider, contractAddress);\n\n  ~ Features ~\n\n  - Provide contractAddress to check if the contract is deployed\n  - Change provider to check contract address on different chains (ex. mainnetProvider)\n*/\n\nconst useContractExistsAtAddress = (provider, contractAddress) => {\n  const [contractIsDeployed, setContractIsDeployed] = useState(false);\n\n  // We can look at the blockchain and see what's stored at `contractAddress`\n  // If we find code then we know that a contract exists there.\n  // If we find nothing (0x0) then there is no contract deployed to that address\n  useEffect(() => {\n    // eslint-disable-next-line consistent-return\n    const checkDeployment = async () => {\n      if (!utils.isAddress(contractAddress)) return false;\n      const bytecode = await provider.getCode(contractAddress);\n      setContractIsDeployed(bytecode !== \"0x0\");\n    };\n    if (provider) checkDeployment();\n  }, [provider, contractAddress]);\n\n  return contractIsDeployed;\n};\n\nexport default useContractExistsAtAddress;\n","/* eslint-disable import/no-dynamic-require */\n/* eslint-disable global-require */\nimport { useEffect, useState } from \"react\";\n\nconst { ethers } = require(\"ethers\");\n\n/*\n  ~ What it does? ~\n\n  Loads your local contracts and gives options to read values from contracts\n  or write transactions into them\n\n  ~ How can I use? ~\n\n  const readContracts = useContractLoader(localProvider) // or\n  const writeContracts = useContractLoader(userProvider)\n\n  ~ Features ~\n\n  - localProvider enables reading values from contracts\n  - userProvider enables writing transactions into contracts\n  - Example of keeping track of \"purpose\" variable by loading contracts into readContracts\n    and using ContractReader.js hook:\n    const purpose = useContractReader(readContracts,\"YourContract\", \"purpose\")\n  - Example of using setPurpose function from our contract and writing transactions by Transactor.js helper:\n    tx( writeContracts.YourContract.setPurpose(newPurpose) )\n\n  config can include:\n  - chainId - to hardcode the chainId, irrespective of the providerOrSigner chainId\n  - hardhatNetworkName - to hardcode the hardhat network of interest\n  - customAddresses: { contractName: 0xCustomAddress } to hardcode the address for a given named contract\n  - hardhatContracts: object following the hardhat deploy export format (Json with chainIds as keys, which have hardhat network names as keys, which contain arrays of contracts for each)\n  - externalContracts: object with chainIds as keys, with an array of contracts for each\n*/\n\nexport default function useContractLoader(providerOrSigner, config = {}) {\n  const [contracts, setContracts] = useState();\n  useEffect(() => {\n    let active = true;\n\n    async function loadContracts() {\n      if (providerOrSigner && typeof providerOrSigner !== \"undefined\") {\n        console.log(`loading contracts`);\n        try {\n          // we need to check to see if this providerOrSigner has a signer or not\n          let signer;\n          let provider;\n          let accounts;\n\n          if (providerOrSigner && typeof providerOrSigner.listAccounts === \"function\") {\n            accounts = await providerOrSigner.listAccounts();\n          }\n\n          if (ethers.Signer.isSigner(providerOrSigner)) {\n            signer = providerOrSigner;\n            provider = signer.provider;\n          } else if (accounts && accounts.length > 0) {\n            signer = providerOrSigner.getSigner();\n            provider = providerOrSigner;\n          } else {\n            signer = providerOrSigner;\n            provider = providerOrSigner;\n          }\n\n          const providerNetwork = await provider.getNetwork();\n\n          const _chainId = config.chainId || providerNetwork.chainId;\n\n          let contractList = {};\n          let externalContractList = {};\n          try {\n            contractList = config.hardhatContracts || require(\"../contracts/hardhat_contracts.json\");\n          } catch (e) {\n            console.log(e);\n          }\n          try {\n            externalContractList = config.externalContracts || require(\"../contracts/external_contracts.js\");\n          } catch (e) {\n            console.log(e);\n          }\n\n          let combinedContracts = {};\n\n          if (contractList[_chainId]) {\n            for (const hardhatNetwork in contractList[_chainId]) {\n              if (Object.prototype.hasOwnProperty.call(contractList[_chainId], hardhatNetwork)) {\n                if (!config.hardhatNetworkName || hardhatNetwork === config.hardhatNetworkName) {\n                  combinedContracts = {\n                    ...combinedContracts,\n                    ...contractList[_chainId][hardhatNetwork].contracts,\n                  };\n                }\n              }\n            }\n          }\n\n          if (externalContractList[_chainId]) {\n            combinedContracts = { ...combinedContracts, ...externalContractList[_chainId].contracts };\n          }\n\n          const newContracts = Object.keys(combinedContracts).reduce((accumulator, contractName) => {\n            const _address =\n              config.customAddresses && Object.keys(config.customAddresses).includes(contractName)\n                ? config.customAddresses[contractName]\n                : combinedContracts[contractName].address;\n            accumulator[contractName] = new ethers.Contract(_address, combinedContracts[contractName].abi, signer);\n            return accumulator;\n          }, {});\n          if (active) setContracts(newContracts);\n        } catch (e) {\n          console.log(\"ERROR LOADING CONTRACTS!!\", e);\n        }\n      }\n    }\n    loadContracts();\n\n    return () => {\n      active = false;\n    };\n  }, [providerOrSigner, config.chainId, config.hardhatNetworkName]);\n\n  return contracts;\n}\n","import { useEffect, useState } from \"react\";\nimport useOnBlock from \"./OnBlock\";\nimport usePoller from \"./Poller\";\n\nconst DEBUG = false;\n\n/*\n  ~ What it does? ~\n\n  Enables you to read values from contracts and keep track of them in the local React states\n\n  ~ How can I use? ~\n\n  const purpose = useContractReader(readContracts,\"YourContract\", \"purpose\")\n\n  ~ Features ~\n\n  - Provide readContracts by loading contracts (see more on ContractLoader.js)\n  - Specify the name of the contract, in this case it is \"YourContract\"\n  - Specify the name of the variable in the contract, in this case we keep track of \"purpose\" variable\n  - Pass an args array if the function requires\n  - Pass pollTime - if no pollTime is specified, the function will update on every new block\n*/\n\nexport default function useContractReader(contracts, contractName, functionName, args, pollTime, formatter, onChange) {\n  let adjustPollTime = 0;\n  if (pollTime) {\n    adjustPollTime = pollTime;\n  } else if (!pollTime && typeof args === \"number\") {\n    // it's okay to pass poll time as last argument without args for the call\n    adjustPollTime = args;\n  }\n\n  const [value, setValue] = useState();\n  const [tried, setTried] = useState(false);\n\n  useEffect(() => {\n    if (typeof onChange === \"function\") {\n      setTimeout(onChange.bind(this, value), 1);\n    }\n  }, [value, onChange]);\n\n  const updateValue = async () => {\n    try {\n      let newValue;\n      if (DEBUG) console.log(\"CALLING \", contractName, functionName, \"with args\", args);\n      if (args && args.length > 0) {\n        newValue = await contracts[contractName][functionName](...args);\n        setTried(true);\n        if (DEBUG)\n          console.log(\"contractName\", contractName, \"functionName\", functionName, \"args\", args, \"RESULT:\", newValue);\n      } else {\n        newValue = await contracts[contractName][functionName]();\n      }\n      if (formatter && typeof formatter === \"function\") {\n        newValue = formatter(newValue);\n      }\n      // console.log(\"GOT VALUE\",newValue)\n      if (newValue !== value) {\n        setValue(newValue);\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  // Only pass a provider to watch on a block if we have a contract and no PollTime\n  useOnBlock(contracts && contracts[contractName] && adjustPollTime === 0 && contracts[contractName].provider, () => {\n    if (contracts && contracts[contractName] && adjustPollTime === 0) {\n      updateValue();\n    }\n  });\n\n  // Use a poller if a pollTime is provided\n  usePoller(\n    async () => {\n      if (contracts && contracts[contractName] && adjustPollTime > 0) {\n        if (DEBUG) console.log(\"polling!\", contractName, functionName);\n        updateValue();\n      }\n    },\n    adjustPollTime,\n    contracts && contracts[contractName],\n  );\n\n  if (tried === false && contracts && contracts[contractName]) {\n    updateValue();\n  }\n\n  return value;\n}\n","import { utils } from \"ethers\";\nimport { useEffect, useState } from \"react\";\n\n// resolved if(name){} to not save \"\" into cache\n\n/*\n  ~ What it does? ~\n\n  Gets ENS name from given address and provider\n\n  ~ How can I use? ~\n\n  const ensName = useLookupAddress(mainnetProvider, address);\n\n  ~ Features ~\n\n  - Provide address and get ENS name corresponding to given address\n*/\n\nconst lookupAddress = async (provider, address) => {\n  if (address && utils.isAddress(address)) {\n    // console.log(`looking up ${address}`)\n    try {\n      // Accuracy of reverse resolution is not enforced.\n      // We then manually ensure that the reported ens name resolves to address\n      const reportedName = await provider.lookupAddress(address);\n\n      const resolvedAddress = await provider.resolveName(reportedName);\n\n      if (address && utils.getAddress(address) === utils.getAddress(resolvedAddress)) {\n        return reportedName;\n      }\n      return utils.getAddress(address);\n    } catch (e) {\n      return utils.getAddress(address);\n    }\n  }\n  return 0;\n};\n\nconst useLookupAddress = (provider, address) => {\n  const [ensName, setEnsName] = useState(address);\n  // const [ensCache, setEnsCache] = useLocalStorage('ensCache_'+address); Writing directly due to sync issues\n\n  useEffect(() => {\n    let cache = window.localStorage.getItem(\"ensCache_\" + address);\n    cache = cache && JSON.parse(cache);\n\n    if (cache && cache.timestamp > Date.now()) {\n      setEnsName(cache.name);\n    } else if (provider) {\n      lookupAddress(provider, address).then(name => {\n        if (name) {\n          setEnsName(name);\n          window.localStorage.setItem(\n            \"ensCache_\" + address,\n            JSON.stringify({\n              timestamp: Date.now() + 360000,\n              name,\n            }),\n          );\n        }\n      });\n    }\n  }, [provider, address, setEnsName]);\n\n  return ensName;\n};\n\nexport default useLookupAddress;\n","import { constants } from \"ethers\";\nimport { useEffect, useState } from \"react\";\n\n/*\n  ~ What it does? ~\n\n  Gets address from given ENS name and provider\n\n  ~ How can I use? ~\n\n  const addressFromENS = useResolveName(mainnetProvider, \"austingriffith.eth\");\n\n  ~ Features ~\n\n  - Specify mainnetProvider\n  - Provide ENS name and get address corresponding to given ENS name\n*/\n\nconst useResolveName = (provider, ensName) => {\n  const [address, setAddress] = useState(constants.AddressZero);\n\n  useEffect(() => {\n    if (provider) {\n      provider.resolveName(ensName).then(resolvedAddress => setAddress(resolvedAddress));\n    }\n  }, [provider, ensName]);\n\n  return address;\n};\n\nexport default useResolveName;\n","import { useState, useEffect } from \"react\";\n\nconst { ethers } = require(\"ethers\");\n\nexport default function useBurnerSigner(provider) {\n  const key = \"metaPrivateKey\";\n  let wallet;\n  const [signer, setSigner] = useState();\n  const [storedValue, setStoredValue] = useState();\n\n  const setValue = value => {\n    try {\n      setStoredValue(value);\n      window.localStorage.setItem(key, value);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    const storedKey = window.localStorage.getItem(key);\n    if (!storedKey) {\n      console.log(\"generating a new key\");\n      const _newWallet = ethers.Wallet.createRandom();\n      const _newKey = _newWallet.privateKey;\n      setValue(_newKey);\n    } else {\n      setValue(storedKey);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (storedValue && provider) {\n      wallet = new ethers.Wallet(storedValue);\n      const _signer = wallet.connect(provider);\n      setSigner(_signer);\n    }\n  }, [storedValue, provider]);\n\n  return signer;\n}\n","import { useMemo, useState } from \"react\";\nimport useBurnerSigner from \"./BurnerSigner\";\n\n/*\n  ~ What it does? ~\n\n  Gets user provider\n\n  ~ How can I use? ~\n\n  const userProvider = useUserProvider(injectedProvider, localProvider);\n\n  ~ Features ~\n\n  - Specify the injected provider from Metamask\n  - Specify the local provider\n  - Usage examples:\n    const tx = Transactor(userSigner, gasPrice)\n*/\n\nconst useUserSigner = (injectedProvider, localProvider) => {\n  const [signer, setSigner] = useState();\n  const burnerSigner = useBurnerSigner(localProvider);\n\n  useMemo(() => {\n    if (injectedProvider) {\n      console.log(\"🦊 Using injected provider\");\n      const injectedSigner = injectedProvider._isProvider ? injectedProvider.getSigner() : injectedProvider;\n      setSigner(injectedSigner);\n    } else if (!localProvider) setSigner();\n    else {\n      if (window.location.pathname && window.location.pathname.indexOf(\"/pk\") >= 0) {\n        const incomingPK = window.location.hash.replace(\"#\", \"\");\n        let rawPK;\n        if (incomingPK.length === 64 || incomingPK.length === 66) {\n          console.log(\"🔑 Incoming Private Key...\");\n          rawPK = incomingPK;\n          window.history.pushState({}, \"\", \"/\");\n          const currentPrivateKey = window.localStorage.getItem(\"metaPrivateKey\");\n          if (currentPrivateKey && currentPrivateKey !== rawPK) {\n            window.localStorage.setItem(\"metaPrivateKey_backup\" + Date.now(), currentPrivateKey);\n          }\n          window.localStorage.setItem(\"metaPrivateKey\", rawPK);\n        }\n      }\n\n      console.log(\"🔥 Using burner signer\", burnerSigner);\n      setSigner(burnerSigner);\n    }\n  }, [injectedProvider, localProvider, burnerSigner]);\n\n  return signer;\n};\n\nexport default useUserSigner;\n","import { Skeleton, Typography } from \"antd\";\nimport React from \"react\";\nimport Blockies from \"react-blockies\";\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\nimport { useLookupAddress } from \"../hooks\";\n\n// changed value={address} to address={address}\n\n/*\n  ~ What it does? ~\n\n  Displays an address with a blockie image and option to copy address\n\n  ~ How can I use? ~\n\n  <Address\n    address={address}\n    ensProvider={mainnetProvider}\n    blockExplorer={blockExplorer}\n    fontSize={fontSize}\n  />\n\n  ~ Features ~\n\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\")\n  - Provide blockExplorer={blockExplorer}, click on address and get the link\n              (ex. by default \"https://etherscan.io/\" or for xdai \"https://blockscout.com/poa/xdai/\")\n  - Provide fontSize={fontSize} to change the size of address text\n*/\n\nconst { Text } = Typography;\n\nconst blockExplorerLink = (address, blockExplorer) =>\n  `${blockExplorer || \"https://etherscan.io/\"}${\"address/\"}${address}`;\n\nexport default function Address(props) {\n  const address = props.value || props.address;\n\n  const ens = useLookupAddress(props.ensProvider, address);\n\n  const { currentTheme } = useThemeSwitcher();\n\n  if (!address) {\n    return (\n      <span>\n        <Skeleton avatar paragraph={{ rows: 1 }} />\n      </span>\n    );\n  }\n\n  let displayAddress = address.substr(0, 6);\n\n  if (ens && ens.indexOf(\"0x\") < 0) {\n    displayAddress = ens;\n  } else if (props.size === \"short\") {\n    displayAddress += \"...\" + address.substr(-4);\n  } else if (props.size === \"long\") {\n    displayAddress = address;\n  }\n\n  const etherscanLink = blockExplorerLink(address, props.blockExplorer);\n  if (props.minimized) {\n    return (\n      <span style={{ verticalAlign: \"middle\" }}>\n        <a\n          style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\n          target=\"_blank\"\n          href={etherscanLink}\n          rel=\"noopener noreferrer\"\n        >\n          <Blockies seed={address.toLowerCase()} size={8} scale={2} />\n        </a>\n      </span>\n    );\n  }\n\n  let text;\n  if (props.onChange) {\n    text = (\n      <Text editable={{ onChange: props.onChange }} copyable={{ text: address }}>\n        <a\n          style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\n          target=\"_blank\"\n          href={etherscanLink}\n          rel=\"noopener noreferrer\"\n        >\n          {displayAddress}\n        </a>\n      </Text>\n    );\n  } else {\n    text = (\n      <Text copyable={{ text: address }}>\n        <a\n          style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\n          target=\"_blank\"\n          href={etherscanLink}\n          rel=\"noopener noreferrer\"\n        >\n          {displayAddress}\n        </a>\n      </Text>\n    );\n  }\n\n  return (\n    <span>\n      <span style={{ verticalAlign: \"middle\" }}>\n        <Blockies seed={address.toLowerCase()} size={8} scale={props.fontSize ? props.fontSize / 7 : 4} />\n      </span>\n      <span style={{ verticalAlign: \"middle\", paddingLeft: 5, fontSize: props.fontSize ? props.fontSize : 28 }}>\n        {text}\n      </span>\n    </span>\n  );\n}\n","import React, { useState } from \"react\";\nimport { useBalance } from \"../hooks\";\n\nconst { utils } = require(\"ethers\");\n\n/*\n  ~ What it does? ~\n\n  Displays a balance of given address in ether & dollar\n\n  ~ How can I use? ~\n\n  <Balance\n    address={address}\n    provider={mainnetProvider}\n    price={price}\n  />\n\n  ~ If you already have the balance as a bignumber ~\n  <Balance\n    balance={balance}\n    price={price}\n  />\n\n  ~ Features ~\n\n  - Provide address={address} and get balance corresponding to given address\n  - Provide provider={mainnetProvider} to access balance on mainnet or any other network (ex. localProvider)\n  - Provide price={price} of ether and get your balance converted to dollars\n*/\n\nexport default function Balance(props) {\n  const [dollarMode, setDollarMode] = useState(true);\n\n  // const [listening, setListening] = useState(false);\n\n  const balance = useBalance(props.provider, props.address);\n\n  let floatBalance = parseFloat(\"0.00\");\n\n  let usingBalance = balance;\n\n  if (typeof props.balance !== \"undefined\") {\n    usingBalance = props.balance;\n  }\n  if (typeof props.value !== \"undefined\") {\n    usingBalance = props.value;\n  }\n\n  if (usingBalance) {\n    const etherBalance = utils.formatEther(usingBalance);\n    parseFloat(etherBalance).toFixed(2);\n    floatBalance = parseFloat(etherBalance);\n  }\n\n  let displayBalance = floatBalance.toFixed(4);\n\n  const price = props.price || props.dollarMultiplier;\n\n  if (price && dollarMode) {\n    displayBalance = \"$\" + (floatBalance * price).toFixed(2);\n  }\n\n  return (\n    <span\n      style={{\n        verticalAlign: \"middle\",\n        fontSize: props.size ? props.size : 24,\n        padding: 8,\n        cursor: \"pointer\",\n      }}\n      onClick={() => {\n        setDollarMode(!dollarMode);\n      }}\n    >\n      {displayBalance}\n    </span>\n  );\n}\n","// MY INFURA_ID, SWAP IN YOURS FROM https://infura.io/dashboard/ethereum\nexport const INFURA_ID = \"460f40a260564ac4a4f4b3fffb032dad\";\n\n// MY ETHERSCAN_ID, SWAP IN YOURS FROM https://etherscan.io/myapikey\nexport const ETHERSCAN_KEY = \"PSW8C433Q667DVEX5BCRMGNAH9FSGFZ7Q8\";\n\n// BLOCKNATIVE ID FOR Notify.js:\nexport const BLOCKNATIVE_DAPPID = \"0b58206a-f3c0-4701-a62f-73c7243e8c77\";\n\nexport const NETWORKS = {\n  localhost: {\n    name: \"localhost\",\n    color: \"#666666\",\n    chainId: 31337,\n    blockExplorer: \"\",\n    rpcUrl: \"http://\" + window.location.hostname + \":8545\",\n  },\n  mainnet: {\n    name: \"mainnet\",\n    color: \"#ff8b9e\",\n    chainId: 1,\n    rpcUrl: `https://mainnet.infura.io/v3/${INFURA_ID}`,\n    blockExplorer: \"https://etherscan.io/\",\n  },\n  kovan: {\n    name: \"kovan\",\n    color: \"#7003DD\",\n    chainId: 42,\n    rpcUrl: `https://kovan.infura.io/v3/${INFURA_ID}`,\n    blockExplorer: \"https://kovan.etherscan.io/\",\n    faucet: \"https://gitter.im/kovan-testnet/faucet\", // https://faucet.kovan.network/\n  },\n  rinkeby: {\n    name: \"rinkeby\",\n    color: \"#e0d068\",\n    chainId: 4,\n    rpcUrl: `https://rinkeby.infura.io/v3/${INFURA_ID}`,\n    faucet: \"https://faucet.rinkeby.io/\",\n    blockExplorer: \"https://rinkeby.etherscan.io/\",\n  },\n  ropsten: {\n    name: \"ropsten\",\n    color: \"#F60D09\",\n    chainId: 3,\n    faucet: \"https://faucet.ropsten.be/\",\n    blockExplorer: \"https://ropsten.etherscan.io/\",\n    rpcUrl: `https://ropsten.infura.io/v3/${INFURA_ID}`,\n  },\n  goerli: {\n    name: \"goerli\",\n    color: \"#0975F6\",\n    chainId: 5,\n    faucet: \"https://goerli-faucet.slock.it/\",\n    blockExplorer: \"https://goerli.etherscan.io/\",\n    rpcUrl: `https://goerli.infura.io/v3/${INFURA_ID}`,\n  },\n  xdai: {\n    name: \"xdai\",\n    color: \"#48a9a6\",\n    chainId: 100,\n    price: 1,\n    gasPrice: 1000000000,\n    rpcUrl: \"https://dai.poa.network\",\n    faucet: \"https://xdai-faucet.top/\",\n    blockExplorer: \"https://blockscout.com/poa/xdai/\",\n  },\n  matic: {\n    name: \"matic\",\n    color: \"#2bbdf7\",\n    chainId: 137,\n    price: 1,\n    gasPrice: 1000000000,\n    rpcUrl: \"https://rpc-mainnet.maticvigil.com\",\n    faucet: \"https://faucet.matic.network/\",\n    blockExplorer: \"https://explorer-mainnet.maticvigil.com//\",\n  },\n  mumbai: {\n    name: \"mumbai\",\n    color: \"#92D9FA\",\n    chainId: 80001,\n    price: 1,\n    gasPrice: 1000000000,\n    rpcUrl: \"https://rpc-mumbai.maticvigil.com\",\n    faucet: \"https://faucet.matic.network/\",\n    blockExplorer: \"https://mumbai-explorer.matic.today/\",\n  },\n  localArbitrum: {\n    name: \"localArbitrum\",\n    color: \"#50a0ea\",\n    chainId: 153869338190755,\n    blockExplorer: \"\",\n    rpcUrl: `http://localhost:8547`,\n  },\n  localArbitrumL1: {\n    name: \"localArbitrumL1\",\n    color: \"#50a0ea\",\n    chainId: 44010,\n    blockExplorer: \"\",\n    rpcUrl: `http://localhost:7545`,\n  },\n  rinkebyArbitrum: {\n    name: \"Arbitrum Testnet\",\n    color: \"#50a0ea\",\n    chainId: 421611,\n    blockExplorer: \"https://rinkeby-explorer.arbitrum.io/#/\",\n    rpcUrl: `https://rinkeby.arbitrum.io/rpc`,\n  },\n  arbitrum: {\n    name: \"Arbitrum\",\n    color: \"#50a0ea\",\n    chainId: 42161,\n    blockExplorer: \"https://explorer.arbitrum.io/#/\",\n    rpcUrl: `https://arb1.arbitrum.io/rpc`,\n    gasPrice: 0,\n  },\n  localOptimismL1: {\n    name: \"localOptimismL1\",\n    color: \"#f01a37\",\n    chainId: 31337,\n    blockExplorer: \"\",\n    rpcUrl: \"http://\" + window.location.hostname + \":9545\",\n  },\n  localOptimism: {\n    name: \"localOptimism\",\n    color: \"#f01a37\",\n    chainId: 420,\n    blockExplorer: \"\",\n    rpcUrl: \"http://\" + window.location.hostname + \":8545\",\n    gasPrice: 0,\n  },\n  kovanOptimism: {\n    name: \"kovanOptimism\",\n    color: \"#f01a37\",\n    chainId: 69,\n    blockExplorer: \"https://kovan-optimistic.etherscan.io/\",\n    rpcUrl: `https://kovan.optimism.io`,\n    gasPrice: 0,\n  },\n  optimism: {\n    name: \"optimism\",\n    color: \"#f01a37\",\n    chainId: 10,\n    blockExplorer: \"https://optimistic.etherscan.io/\",\n    rpcUrl: `https://mainnet.optimism.io`,\n  },\n};\n\nexport const NETWORK = chainId => {\n  for (const n in NETWORKS) {\n    if (NETWORKS[n].chainId === chainId) {\n      return NETWORKS[n];\n    }\n  }\n};\n","import { notification } from \"antd\";\nimport Notify from \"bnc-notify\";\nimport { BLOCKNATIVE_DAPPID } from \"../constants\";\n\nconst { ethers } = require(\"ethers\");\n\n// this should probably just be renamed to \"notifier\"\n// it is basically just a wrapper around BlockNative's wonderful Notify.js\n// https://docs.blocknative.com/notify\nconst callbacks = {};\n\nconst DEBUG = true;\n\nexport default function Transactor(providerOrSigner, gasPrice, etherscan) {\n  if (typeof providerOrSigner !== \"undefined\") {\n    // eslint-disable-next-line consistent-return\n    return async (tx, callback) => {\n      let signer;\n      let network;\n      let provider;\n      if (ethers.Signer.isSigner(providerOrSigner) === true) {\n        provider = providerOrSigner.provider;\n        signer = providerOrSigner;\n        network = providerOrSigner.provider && (await providerOrSigner.provider.getNetwork());\n      } else if (providerOrSigner._isProvider) {\n        provider = providerOrSigner;\n        signer = providerOrSigner.getSigner();\n        network = await providerOrSigner.getNetwork();\n      }\n\n      console.log(\"network\", network);\n      \n      var options = null;\n      var notify = null;\n      if(navigator.onLine){\n        options = {\n          dappId: BLOCKNATIVE_DAPPID, // GET YOUR OWN KEY AT https://account.blocknative.com\n          system: \"ethereum\",\n          networkId: network.chainId,\n          // darkMode: Boolean, // (default: false)\n          transactionHandler: txInformation => {\n            if (DEBUG) console.log(\"HANDLE TX\", txInformation);\n            const possibleFunction = callbacks[txInformation.transaction.hash];\n            if (typeof possibleFunction === \"function\") {\n              possibleFunction(txInformation.transaction);\n            }\n          },\n        };  \n\n        notify = Notify(options);\n      }\n       \n\n      let etherscanNetwork = \"\";\n      if (network.name && network.chainId > 1) {\n        etherscanNetwork = network.name + \".\";\n      }\n\n      let etherscanTxUrl = \"https://\" + etherscanNetwork + \"etherscan.io/tx/\";\n      if (network.chainId === 100) {\n        etherscanTxUrl = \"https://blockscout.com/poa/xdai/tx/\";\n      }\n\n      try {\n        let result;\n        if (tx instanceof Promise) {\n          if (DEBUG) console.log(\"AWAITING TX\", tx);\n          result = await tx;\n        } else {\n          if (!tx.gasPrice) {\n            tx.gasPrice = gasPrice || ethers.utils.parseUnits(\"4.1\", \"gwei\");\n          }\n          if (!tx.gasLimit) {\n            tx.gasLimit = ethers.utils.hexlify(120000);\n          }\n          if (DEBUG) console.log(\"RUNNING TX\", tx);\n          result = await signer.sendTransaction(tx);\n        }\n        if (DEBUG) console.log(\"RESULT:\", result);\n        // console.log(\"Notify\", notify);\n\n        if (callback) {\n          callbacks[result.hash] = callback;\n        }\n\n        // if it is a valid Notify.js network, use that, if not, just send a default notification\n        if (notify && [1, 3, 4, 5, 42, 100].indexOf(network.chainId) >= 0) {\n          const { emitter } = notify.hash(result.hash);\n          emitter.on(\"all\", transaction => {\n            return {\n              onclick: () => window.open((etherscan || etherscanTxUrl) + transaction.hash),\n            };\n          });\n        } else {\n          notification.info({\n            message: \"Local Transaction Sent\",\n            description: result.hash,\n            placement: \"bottomRight\",\n          });\n          // on most networks BlockNative will update a transaction handler,\n          // but locally we will set an interval to listen...\n          if (callback) {\n            const txResult = await tx;\n            const listeningInterval = setInterval(async () => {\n              console.log(\"CHECK IN ON THE TX\", txResult, provider);\n              const currentTransactionReceipt = await provider.getTransactionReceipt(txResult.hash);\n              if (currentTransactionReceipt && currentTransactionReceipt.confirmations) {\n                callback({ ...txResult, ...currentTransactionReceipt });\n                clearInterval(listeningInterval);\n              }\n            }, 500);\n          }\n        }\n\n        if (typeof result.wait === \"function\") {\n          await result.wait();\n        }\n\n        return result;\n      } catch (e) {\n        console.log(e);\n        console.log(\"Transaction Error:\", e.message);\n        notification.error({\n          message: \"Transaction Error\",\n          description: e.data ? e.data.message : e.reason ? e.reason : e.message,\n        });\n        if (callback && typeof callback === \"function\") {\n          callback(e);\n        }\n      }\n    };\n  }\n}\n","import React from \"react\";\nimport Blockies from \"react-blockies\";\n\n// provides a blockie image for the address using \"react-blockies\" library\n\nexport default function Blockie(props) {\n  if (!props.address || typeof props.address.toLowerCase !== \"function\") {\n    return <span />;\n  }\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return <Blockies seed={props.address.toLowerCase()} {...props} />;\n}\n","import { CameraOutlined, QrcodeOutlined } from \"@ant-design/icons\";\nimport { Badge, Input } from \"antd\";\nimport { useLookupAddress } from \"eth-hooks\";\nimport React, { useCallback, useState } from \"react\";\nimport QrReader from \"react-qr-reader\";\nimport Blockie from \"./Blockie\";\n\n// probably we need to change value={toAddress} to address={toAddress}\n\n/*\n  ~ What it does? ~\n\n  Displays an address input with QR scan option\n\n  ~ How can I use? ~\n\n  <AddressInput\n    autoFocus\n    ensProvider={mainnetProvider}\n    placeholder=\"Enter address\"\n    value={toAddress}\n    onChange={setToAddress}\n  />\n\n  ~ Features ~\n\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n  - Provide placeholder=\"Enter address\" value for the input\n  - Value of the address input is stored in value={toAddress}\n  - Control input change by onChange={setToAddress}\n                          or onChange={address => { setToAddress(address);}}\n*/\n\nexport default function AddressInput(props) {\n  const [value, setValue] = useState(props.value);\n  const [scan, setScan] = useState(false);\n\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n  const ens = useLookupAddress(props.ensProvider, currentValue);\n\n  const scannerButton = (\n    <div\n      style={{ marginTop: 4, cursor: \"pointer\" }}\n      onClick={() => {\n        setScan(!scan);\n      }}\n    >\n      <Badge count={<CameraOutlined style={{ fontSize: 9 }} />}>\n        <QrcodeOutlined style={{ fontSize: 18 }} />\n      </Badge>{\" \"}\n      Scan\n    </div>\n  );\n\n  const { ensProvider, onChange } = props;\n  const updateAddress = useCallback(\n    async newValue => {\n      if (typeof newValue !== \"undefined\") {\n        let address = newValue;\n        if (address.indexOf(\".eth\") > 0 || address.indexOf(\".xyz\") > 0) {\n          try {\n            const possibleAddress = await ensProvider.resolveName(address);\n            if (possibleAddress) {\n              address = possibleAddress;\n            }\n            // eslint-disable-next-line no-empty\n          } catch (e) {}\n        }\n        setValue(address);\n        if (typeof onChange === \"function\") {\n          onChange(address);\n        }\n      }\n    },\n    [ensProvider, onChange],\n  );\n\n  const scanner = scan ? (\n    <div\n      style={{\n        zIndex: 256,\n        position: \"absolute\",\n        left: 0,\n        top: 0,\n        width: \"100%\",\n      }}\n      onClick={() => {\n        setScan(false);\n      }}\n    >\n      <QrReader\n        delay={250}\n        resolution={1200}\n        onError={e => {\n          console.log(\"SCAN ERROR\", e);\n          setScan(false);\n        }}\n        onScan={newValue => {\n          if (newValue) {\n            console.log(\"SCAN VALUE\", newValue);\n            let possibleNewValue = newValue;\n            if (possibleNewValue.indexOf(\"/\") >= 0) {\n              possibleNewValue = possibleNewValue.substr(possibleNewValue.lastIndexOf(\"0x\"));\n              console.log(\"CLEANED VALUE\", possibleNewValue);\n            }\n            setScan(false);\n            updateAddress(possibleNewValue);\n          }\n        }}\n        style={{ width: \"100%\" }}\n      />\n    </div>\n  ) : (\n    \"\"\n  );\n\n  return (\n    <div>\n      {scanner}\n      <Input\n        id=\"0xAddress\" // name it something other than address for auto fill doxxing\n        name=\"0xAddress\" // name it something other than address for auto fill doxxing\n        autoComplete=\"off\"\n        autoFocus={props.autoFocus}\n        placeholder={props.placeholder ? props.placeholder : \"address\"}\n        prefix={<Blockie address={currentValue} size={8} scale={3} />}\n        value={ens || currentValue}\n        addonAfter={scannerButton}\n        onChange={e => {\n          updateAddress(e.target.value);\n        }}\n      />\n    </div>\n  );\n}\n","import { Input } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\n\n// small change in useEffect, display currentValue if it's provided by user\n\n/*\n  ~ What it does? ~\n\n  Displays input field for ETH/USD amount, with an option to convert between ETH and USD\n\n  ~ How can I use? ~\n\n  <EtherInput\n    autofocus\n    price={price}\n    value=100\n    placeholder=\"Enter amount\"\n    onChange={value => {\n      setAmount(value);\n    }}\n  />\n\n  ~ Features ~\n\n  - Provide price={price} of ether and easily convert between USD and ETH\n  - Provide value={value} to specify initial amount of ether\n  - Provide placeholder=\"Enter amount\" value for the input\n  - Control input change by onChange={value => { setAmount(value);}}\n*/\n\nexport default function EtherInput(props) {\n  const [mode, setMode] = useState(props.price ? \"USD\" : \"ETH\");\n  const [display, setDisplay] = useState();\n  const [value, setValue] = useState();\n\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n\n  const option = title => {\n    if (!props.price) return \"\";\n    return (\n      <div\n        style={{ cursor: \"pointer\" }}\n        onClick={() => {\n          if (mode === \"USD\") {\n            setMode(\"ETH\");\n            setDisplay(currentValue);\n          } else {\n            setMode(\"USD\");\n            if (currentValue) {\n              const usdValue = \"\" + (parseFloat(currentValue) * props.price).toFixed(2);\n              setDisplay(usdValue);\n            } else {\n              setDisplay(currentValue);\n            }\n          }\n        }}\n      >\n        {title}\n      </div>\n    );\n  };\n\n  let prefix;\n  let addonAfter;\n  if (mode === \"USD\") {\n    prefix = \"$\";\n    addonAfter = option(\"USD 🔀\");\n  } else {\n    prefix = \"Ξ\";\n    addonAfter = option(\"ETH 🔀\");\n  }\n\n  useEffect(() => {\n    if (!currentValue) {\n      setDisplay(\"\");\n    }\n  }, [currentValue]);\n\n  return (\n    <Input\n      placeholder={props.placeholder ? props.placeholder : \"amount in \" + mode}\n      autoFocus={props.autoFocus}\n      prefix={prefix}\n      value={display}\n      addonAfter={addonAfter}\n      onChange={async e => {\n        const newValue = e.target.value;\n        if (mode === \"USD\") {\n          const possibleNewValue = parseFloat(newValue);\n          if (possibleNewValue) {\n            const ethValue = possibleNewValue / props.price;\n            setValue(ethValue);\n            if (typeof props.onChange === \"function\") {\n              props.onChange(ethValue);\n            }\n            setDisplay(newValue);\n          } else {\n            setDisplay(newValue);\n          }\n        } else {\n          setValue(newValue);\n          if (typeof props.onChange === \"function\") {\n            props.onChange(newValue);\n          }\n          setDisplay(newValue);\n        }\n      }}\n    />\n  );\n}\n","import { KeyOutlined, QrcodeOutlined, SendOutlined, WalletOutlined } from \"@ant-design/icons\";\nimport { Button, Modal, Spin, Tooltip, Typography } from \"antd\";\nimport { ethers } from \"ethers\";\nimport QR from \"qrcode.react\";\nimport React, { useState, useEffect } from \"react\";\nimport { Transactor } from \"../helpers\";\nimport Address from \"./Address\";\nimport AddressInput from \"./AddressInput\";\nimport Balance from \"./Balance\";\nimport EtherInput from \"./EtherInput\";\n\nconst { Text, Paragraph } = Typography;\n\n/*\n  ~ What it does? ~\n\n  Displays a wallet where you can specify address and send USD/ETH, with options to\n  scan address, to convert between USD and ETH, to see and generate private keys,\n  to send, receive and extract the burner wallet\n\n  ~ How can I use? ~\n\n  <Wallet\n    provider={userProvider}\n    address={address}\n    ensProvider={mainnetProvider}\n    price={price}\n    color='red'\n  />\n\n  ~ Features ~\n\n  - Provide provider={userProvider} to display a wallet\n  - Provide address={address} if you want to specify address, otherwise\n                                                    your default address will be used\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n  - Provide price={price} of ether and easily convert between USD and ETH\n  - Provide color to specify the color of wallet icon\n*/\n\nexport default function Wallet(props) {\n  const [signerAddress, setSignerAddress] = useState();\n  useEffect(() => {\n    async function getAddress() {\n      if (props.signer) {\n        const newAddress = await props.signer.getAddress();\n        setSignerAddress(newAddress);\n      }\n    }\n    getAddress();\n  }, [props.signer]);\n\n  const selectedAddress = props.address || signerAddress;\n\n  const [open, setOpen] = useState();\n  const [qr, setQr] = useState();\n  const [amount, setAmount] = useState();\n  const [toAddress, setToAddress] = useState();\n  const [pk, setPK] = useState();\n\n  const providerSend = props.signer ? (\n    <Tooltip title=\"Wallet\">\n      <WalletOutlined\n        onClick={() => {\n          setOpen(!open);\n        }}\n        rotate={-90}\n        style={{\n          padding: 7,\n          color: props.color ? props.color : \"\",\n          cursor: \"pointer\",\n          fontSize: 28,\n          verticalAlign: \"middle\",\n        }}\n      />\n    </Tooltip>\n  ) : (\n    \"\"\n  );\n\n  let display;\n  let receiveButton;\n  let privateKeyButton;\n  if (qr) {\n    display = (\n      <div>\n        <div>\n          <Text copyable>{selectedAddress}</Text>\n        </div>\n        <QR\n          value={selectedAddress}\n          size=\"450\"\n          level=\"H\"\n          includeMargin\n          renderAs=\"svg\"\n          imageSettings={{ excavate: false }}\n        />\n      </div>\n    );\n    receiveButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setQr(\"\");\n        }}\n      >\n        <QrcodeOutlined /> Hide\n      </Button>\n    );\n    privateKeyButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setPK(selectedAddress);\n          setQr(\"\");\n        }}\n      >\n        <KeyOutlined /> Private Key\n      </Button>\n    );\n  } else if (pk) {\n    const pk = localStorage.getItem(\"metaPrivateKey\");\n    const wallet = new ethers.Wallet(pk);\n\n    if (wallet.address !== selectedAddress) {\n      display = (\n        <div>\n          <b>*injected account*, private key unknown</b>\n        </div>\n      );\n    } else {\n      const extraPkDisplayAdded = {};\n      const extraPkDisplay = [];\n      extraPkDisplayAdded[wallet.address] = true;\n      extraPkDisplay.push(\n        <div style={{ fontSize: 16, padding: 2, backgroundStyle: \"#89e789\" }}>\n          <a href={\"/pk#\" + pk}>\n            <Address minimized address={wallet.address} ensProvider={props.ensProvider} /> {wallet.address.substr(0, 6)}\n          </a>\n        </div>,\n      );\n      for (const key in localStorage) {\n        if (key.indexOf(\"metaPrivateKey_backup\") >= 0) {\n          console.log(key);\n          const pastpk = localStorage.getItem(key);\n          const pastwallet = new ethers.Wallet(pastpk);\n          if (!extraPkDisplayAdded[pastwallet.address] /* && selectedAddress!=pastwallet.address */) {\n            extraPkDisplayAdded[pastwallet.address] = true;\n            extraPkDisplay.push(\n              <div style={{ fontSize: 16 }}>\n                <a href={\"/pk#\" + pastpk}>\n                  <Address minimized address={pastwallet.address} ensProvider={props.ensProvider} />{\" \"}\n                  {pastwallet.address.substr(0, 6)}\n                </a>\n              </div>,\n            );\n          }\n        }\n      }\n\n      display = (\n        <div>\n          <b>Private Key:</b>\n\n          <div>\n            <Text copyable>{pk}</Text>\n          </div>\n\n          <hr />\n\n          <i>\n            Point your camera phone at qr code to open in\n            <a target=\"_blank\" href={\"https://xdai.io/\" + pk} rel=\"noopener noreferrer\">\n              burner wallet\n            </a>\n            :\n          </i>\n          <QR\n            value={\"https://xdai.io/\" + pk}\n            size=\"450\"\n            level=\"H\"\n            includeMargin\n            renderAs=\"svg\"\n            imageSettings={{ excavate: false }}\n          />\n\n          <Paragraph style={{ fontSize: \"16\" }} copyable>\n            {\"https://xdai.io/\" + pk}\n          </Paragraph>\n\n          {extraPkDisplay ? (\n            <div>\n              <h3>Known Private Keys:</h3>\n              {extraPkDisplay}\n              <Button\n                onClick={() => {\n                  const currentPrivateKey = window.localStorage.getItem(\"metaPrivateKey\");\n                  if (currentPrivateKey) {\n                    window.localStorage.setItem(\"metaPrivateKey_backup\" + Date.now(), currentPrivateKey);\n                  }\n                  const randomWallet = ethers.Wallet.createRandom();\n                  const privateKey = randomWallet._signingKey().privateKey;\n                  window.localStorage.setItem(\"metaPrivateKey\", privateKey);\n                  window.location.reload();\n                }}\n              >\n                Generate\n              </Button>\n            </div>\n          ) : (\n            \"\"\n          )}\n        </div>\n      );\n    }\n\n    receiveButton = (\n      <Button\n        key=\"receive\"\n        onClick={() => {\n          setQr(selectedAddress);\n          setPK(\"\");\n        }}\n      >\n        <QrcodeOutlined /> Receive\n      </Button>\n    );\n    privateKeyButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setPK(\"\");\n          setQr(\"\");\n        }}\n      >\n        <KeyOutlined /> Hide\n      </Button>\n    );\n  } else {\n    const inputStyle = {\n      padding: 10,\n    };\n\n    display = (\n      <div>\n        <div style={inputStyle}>\n          <AddressInput\n            autoFocus\n            ensProvider={props.ensProvider}\n            placeholder=\"to address\"\n            address={toAddress}\n            onChange={setToAddress}\n          />\n        </div>\n        <div style={inputStyle}>\n          <EtherInput\n            price={props.price}\n            value={amount}\n            onChange={value => {\n              setAmount(value);\n            }}\n          />\n        </div>\n      </div>\n    );\n    receiveButton = (\n      <Button\n        key=\"receive\"\n        onClick={() => {\n          setQr(selectedAddress);\n          setPK(\"\");\n        }}\n      >\n        <QrcodeOutlined /> Receive\n      </Button>\n    );\n    privateKeyButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setPK(selectedAddress);\n          setQr(\"\");\n        }}\n      >\n        <KeyOutlined /> Private Key\n      </Button>\n    );\n  }\n\n  return (\n    <span>\n      {providerSend}\n      <Modal\n        visible={open}\n        title={\n          <div>\n            {selectedAddress ? <Address address={selectedAddress} ensProvider={props.ensProvider} /> : <Spin />}\n            <div style={{ float: \"right\", paddingRight: 25 }}>\n              <Balance address={selectedAddress} provider={props.provider} dollarMultiplier={props.price} />\n            </div>\n          </div>\n        }\n        onOk={() => {\n          setQr();\n          setPK();\n          setOpen(!open);\n        }}\n        onCancel={() => {\n          setQr();\n          setPK();\n          setOpen(!open);\n        }}\n        footer={[\n          privateKeyButton,\n          receiveButton,\n          <Button\n            key=\"submit\"\n            type=\"primary\"\n            disabled={!amount || !toAddress || qr}\n            loading={false}\n            onClick={() => {\n              const tx = Transactor(props.signer);\n\n              let value;\n              try {\n                value = ethers.utils.parseEther(\"\" + amount);\n              } catch (e) {\n                // failed to parseEther, try something else\n                value = ethers.utils.parseEther(\"\" + parseFloat(amount).toFixed(8));\n              }\n\n              tx({\n                to: toAddress,\n                value,\n              });\n              setOpen(!open);\n              setQr();\n            }}\n          >\n            <SendOutlined /> Send\n          </Button>,\n        ]}\n      >\n        {display}\n      </Modal>\n    </span>\n  );\n}\n","import { Button } from \"antd\";\nimport React from \"react\";\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\nimport Address from \"./Address\";\nimport Balance from \"./Balance\";\nimport Wallet from \"./Wallet\";\n\n/*\n  ~ What it does? ~\n\n  Displays an Address, Balance, and Wallet as one Account component,\n  also allows users to log in to existing accounts and log out\n\n  ~ How can I use? ~\n\n  <Account\n    address={address}\n    localProvider={localProvider}\n    userProvider={userProvider}\n    mainnetProvider={mainnetProvider}\n    price={price}\n    web3Modal={web3Modal}\n    loadWeb3Modal={loadWeb3Modal}\n    logoutOfWeb3Modal={logoutOfWeb3Modal}\n    blockExplorer={blockExplorer}\n  />\n\n  ~ Features ~\n\n  - Provide address={address} and get balance corresponding to the given address\n  - Provide localProvider={localProvider} to access balance on local network\n  - Provide userProvider={userProvider} to display a wallet\n  - Provide mainnetProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\")\n  - Provide price={price} of ether and get your balance converted to dollars\n  - Provide web3Modal={web3Modal}, loadWeb3Modal={loadWeb3Modal}, logoutOfWeb3Modal={logoutOfWeb3Modal}\n              to be able to log in/log out to/from existing accounts\n  - Provide blockExplorer={blockExplorer}, click on address and get the link\n              (ex. by default \"https://etherscan.io/\" or for xdai \"https://blockscout.com/poa/xdai/\")\n*/\n\nexport default function Account({\n  address,\n  userSigner,\n  localProvider,\n  mainnetProvider,\n  price,\n  minimized,\n  web3Modal,\n  loadWeb3Modal,\n  logoutOfWeb3Modal,\n  blockExplorer,\n}) {\n  const modalButtons = [];\n  if (web3Modal) {\n    if (web3Modal.cachedProvider) {\n      modalButtons.push(\n        <Button\n          key=\"logoutbutton\"\n          style={{ verticalAlign: \"top\", marginLeft: 8, marginTop: 4 }}\n          shape=\"round\"\n          size=\"large\"\n          onClick={logoutOfWeb3Modal}\n        >\n          logout\n        </Button>,\n      );\n    } else {\n      modalButtons.push(\n        <Button\n          key=\"loginbutton\"\n          style={{ verticalAlign: \"top\", marginLeft: 8, marginTop: 4 }}\n          shape=\"round\"\n          size=\"large\"\n          /* type={minimized ? \"default\" : \"primary\"}     too many people just defaulting to MM and having a bad time */\n          onClick={loadWeb3Modal}\n        >\n          connect\n        </Button>,\n      );\n    }\n  }\n\n  const { currentTheme } = useThemeSwitcher();\n\n  const display = minimized ? (\n    \"\"\n  ) : (\n    <span>\n      {address ? (\n        <Address address={address} ensProvider={mainnetProvider} blockExplorer={blockExplorer} />\n      ) : (\n        \"Connecting...\"\n      )}\n      <Balance address={address} provider={localProvider} price={price} />\n      <Wallet\n        address={address}\n        provider={localProvider}\n        signer={userSigner}\n        ensProvider={mainnetProvider}\n        price={price}\n        color={currentTheme === \"light\" ? \"#1890ff\" : \"#2caad9\"}\n      />\n    </span>\n  );\n\n  return (\n    <div>\n      {display}\n      {modalButtons}\n    </div>\n  );\n}\n","import { Input } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\n\nconst { utils, constants } = require(\"ethers\");\n\n/*\n  ~ What it does? ~\n\n  Displays input field with options to convert between STRING and BYTES32\n\n  ~ How can I use? ~\n\n  <BytesStringInput\n    autofocus\n    value={\"scaffold-eth\"}\n    placeholder=\"Enter value...\"\n    onChange={value => {\n      setValue(value);\n    }}\n  />\n\n  ~ Features ~\n\n  - Provide value={value} to specify initial string\n  - Provide placeholder=\"Enter value...\" value for the input\n  - Control input change by onChange={value => { setValue(value);}}\n\n*/\n\nexport default function BytesStringInput(props) {\n  const [mode, setMode] = useState(\"STRING\");\n  const [display, setDisplay] = useState();\n  const [value, setValue] = useState(constants.HashZero);\n\n  // current value is the value in bytes32\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n\n  const option = title => {\n    return (\n      <div\n        style={{ cursor: \"pointer\" }}\n        onClick={() => {\n          if (mode === \"STRING\") {\n            setMode(\"BYTES32\");\n            if (!utils.isHexString(currentValue)) {\n              /* in case user enters invalid bytes32 number,\n                   it considers it as string and converts to bytes32 */\n              const changedValue = utils.formatBytes32String(currentValue);\n              setDisplay(changedValue);\n            } else {\n              setDisplay(currentValue);\n            }\n          } else {\n            setMode(\"STRING\");\n            if (currentValue && utils.isHexString(currentValue)) {\n              setDisplay(utils.parseBytes32String(currentValue));\n            } else {\n              setDisplay(currentValue);\n            }\n          }\n        }}\n      >\n        {title}\n      </div>\n    );\n  };\n\n  let addonAfter;\n  if (mode === \"STRING\") {\n    addonAfter = option(\"STRING 🔀\");\n  } else {\n    addonAfter = option(\"BYTES32 🔀\");\n  }\n\n  useEffect(() => {\n    if (!currentValue) {\n      setDisplay(\"\");\n    }\n  }, [currentValue]);\n\n  return (\n    <Input\n      placeholder={props.placeholder ? props.placeholder : \"Enter value in \" + mode}\n      autoFocus={props.autoFocus}\n      value={display}\n      addonAfter={addonAfter}\n      onChange={async e => {\n        const newValue = e.target.value;\n        if (mode === \"STRING\") {\n          // const ethValue = parseFloat(newValue) / props.price;\n          // setValue(ethValue);\n          if (typeof props.onChange === \"function\") {\n            props.onChange(utils.formatBytes32String(newValue));\n          }\n          setValue(utils.formatBytes32String(newValue));\n          setDisplay(newValue);\n        } else {\n          if (typeof props.onChange === \"function\") {\n            props.onChange(newValue);\n          }\n          setValue(newValue);\n          setDisplay(newValue);\n        }\n      }}\n    />\n  );\n}\n","import React from \"react\";\nimport { Address } from \"..\";\nconst { utils } = require(\"ethers\");\n\nconst tryToDisplay = thing => {\n  if (thing && thing.toNumber) {\n    try {\n      return thing.toNumber();\n    } catch (e) {\n      return \"Ξ\" + utils.formatUnits(thing, \"ether\");\n    }\n  }\n  if (thing && thing.indexOf && thing.indexOf(\"0x\") === 0 && thing.length === 42) {\n    return <Address address={thing} fontSize={22} />;\n  }\n  return JSON.stringify(thing);\n};\n\nexport default tryToDisplay;\n","/* eslint-disable jsx-a11y/accessible-emoji */\n/* eslint-disable jsx-a11y/anchor-is-valid */\nimport { Col, Divider, Row } from \"antd\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport tryToDisplay from \"./utils\";\n\nconst DisplayVariable = ({ contractFunction, functionInfo, refreshRequired, triggerRefresh }) => {\n  const [variable, setVariable] = useState(\"\");\n\n  const refresh = useCallback(async () => {\n    try {\n      const funcResponse = await contractFunction();\n      setVariable(funcResponse);\n      triggerRefresh(false);\n    } catch (e) {\n      console.log(e);\n    }\n  }, [setVariable, contractFunction, triggerRefresh]);\n\n  useEffect(() => {\n    refresh();\n  }, [refresh, refreshRequired, contractFunction]);\n\n  return (\n    <div>\n      <Row>\n        <Col\n          span={8}\n          style={{\n            textAlign: \"right\",\n            opacity: 0.333,\n            paddingRight: 6,\n            fontSize: 24,\n          }}\n        >\n          {functionInfo.name}\n        </Col>\n        <Col span={14}>\n          <h2>{tryToDisplay(variable)}</h2>\n        </Col>\n        <Col span={2}>\n          <h2>\n            <a href=\"#\" onClick={refresh}>\n              🔄\n            </a>\n          </h2>\n        </Col>\n      </Row>\n      <Divider />\n    </div>\n  );\n};\n\nexport default DisplayVariable;\n","/* eslint-disable jsx-a11y/click-events-have-key-events */\n/* eslint-disable jsx-a11y/no-static-element-interactions */\n/* eslint-disable jsx-a11y/accessible-emoji */\nimport { Button, Col, Divider, Input, Row, Tooltip } from \"antd\";\nimport React, { useState } from \"react\";\nimport Blockies from \"react-blockies\";\nimport { Transactor } from \"../../helpers\";\nimport tryToDisplay from \"./utils\";\n\nconst { utils, BigNumber } = require(\"ethers\");\n\nexport default function FunctionForm({ contractFunction, functionInfo, provider, gasPrice, triggerRefresh }) {\n  const [form, setForm] = useState({});\n  const [txValue, setTxValue] = useState();\n  const [returnValue, setReturnValue] = useState();\n\n  const tx = Transactor(provider, gasPrice);\n\n  let inputIndex = 0;\n  const inputs = functionInfo.inputs.map(input => {\n    const key = functionInfo.name + \"_\" + input.name + \"_\" + input.type + \"_\" + inputIndex++;\n\n    let buttons = \"\";\n    if (input.type === \"bytes32\") {\n      buttons = (\n        <Tooltip placement=\"right\" title=\"to bytes32\">\n          <div\n            type=\"dashed\"\n            style={{ cursor: \"pointer\" }}\n            onClick={async () => {\n              if (utils.isHexString(form[key])) {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.parseBytes32String(form[key]);\n                setForm(formUpdate);\n              } else {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.formatBytes32String(form[key]);\n                setForm(formUpdate);\n              }\n            }}\n          >\n            #️⃣\n          </div>\n        </Tooltip>\n      );\n    } else if (input.type === \"bytes\") {\n      buttons = (\n        <Tooltip placement=\"right\" title=\"to hex\">\n          <div\n            type=\"dashed\"\n            style={{ cursor: \"pointer\" }}\n            onClick={async () => {\n              if (utils.isHexString(form[key])) {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.toUtf8String(form[key]);\n                setForm(formUpdate);\n              } else {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.hexlify(utils.toUtf8Bytes(form[key]));\n                setForm(formUpdate);\n              }\n            }}\n          >\n            #️⃣\n          </div>\n        </Tooltip>\n      );\n    } else if (input.type === \"uint256\") {\n      buttons = (\n        <Tooltip placement=\"right\" title=\"* 10 ** 18\">\n          <div\n            type=\"dashed\"\n            style={{ cursor: \"pointer\" }}\n            onClick={async () => {\n              const formUpdate = { ...form };\n              formUpdate[key] = utils.parseEther(form[key]);\n              setForm(formUpdate);\n            }}\n          >\n            ✴️\n          </div>\n        </Tooltip>\n      );\n    } else if (input.type === \"address\") {\n      const possibleAddress = form[key] && form[key].toLowerCase && form[key].toLowerCase().trim();\n      if (possibleAddress && possibleAddress.length === 42) {\n        buttons = (\n          <Tooltip placement=\"right\" title=\"blockie\">\n            <Blockies seed={possibleAddress} scale={3} />\n          </Tooltip>\n        );\n      }\n    }\n\n    return (\n      <div style={{ margin: 2 }} key={key}>\n        <Input\n          size=\"large\"\n          placeholder={input.name ? input.type + \" \" + input.name : input.type}\n          autoComplete=\"off\"\n          value={form[key]}\n          name={key}\n          onChange={event => {\n            const formUpdate = { ...form };\n            formUpdate[event.target.name] = event.target.value;\n            setForm(formUpdate);\n          }}\n          suffix={buttons}\n        />\n      </div>\n    );\n  });\n\n  const txValueInput = (\n    <div style={{ margin: 2 }} key=\"txValueInput\">\n      <Input\n        placeholder=\"transaction value\"\n        onChange={e => setTxValue(e.target.value)}\n        value={txValue}\n        addonAfter={\n          <div>\n            <Row>\n              <Col span={16}>\n                <Tooltip placement=\"right\" title=\" * 10^18 \">\n                  <div\n                    type=\"dashed\"\n                    style={{ cursor: \"pointer\" }}\n                    onClick={async () => {\n                      const floatValue = parseFloat(txValue);\n                      if (floatValue) setTxValue(\"\" + floatValue * 10 ** 18);\n                    }}\n                  >\n                    ✳️\n                  </div>\n                </Tooltip>\n              </Col>\n              <Col span={16}>\n                <Tooltip placement=\"right\" title=\"number to hex\">\n                  <div\n                    type=\"dashed\"\n                    style={{ cursor: \"pointer\" }}\n                    onClick={async () => {\n                      setTxValue(BigNumber.from(txValue).toHexString());\n                    }}\n                  >\n                    #️⃣\n                  </div>\n                </Tooltip>\n              </Col>\n            </Row>\n          </div>\n        }\n      />\n    </div>\n  );\n\n  if (functionInfo.payable) {\n    inputs.push(txValueInput);\n  }\n\n  const buttonIcon =\n    functionInfo.type === \"call\" ? (\n      <Button style={{ marginLeft: -32 }}>Read📡</Button>\n    ) : (\n      <Button style={{ marginLeft: -32 }}>Send💸</Button>\n    );\n  inputs.push(\n    <div style={{ cursor: \"pointer\", margin: 2 }} key=\"goButton\">\n      <Input\n        onChange={e => setReturnValue(e.target.value)}\n        defaultValue=\"\"\n        bordered={false}\n        disabled\n        value={returnValue}\n        suffix={\n          <div\n            style={{ width: 50, height: 30, margin: 0 }}\n            type=\"default\"\n            onClick={async () => {\n              let innerIndex = 0;\n              const args = functionInfo.inputs.map(input => {\n                const key = functionInfo.name + \"_\" + input.name + \"_\" + input.type + \"_\" + innerIndex++;\n                let value = form[key];\n                if (input.baseType === \"array\") {\n                  value = JSON.parse(value);\n                } else if (input.type === \"bool\") {\n                  if (value === \"true\" || value === \"1\" || value === \"0x1\" || value === \"0x01\" || value === \"0x0001\") {\n                    value = 1;\n                  } else {\n                    value = 0;\n                  }\n                }\n                return value;\n              });\n\n              let result;\n              if (functionInfo.stateMutability === \"view\" || functionInfo.stateMutability === \"pure\") {\n                const returned = await contractFunction(...args);\n                result = tryToDisplay(returned);\n              } else {\n                const overrides = {};\n                if (txValue) {\n                  overrides.value = txValue; // ethers.utils.parseEther()\n                }\n                if (gasPrice) {\n                  overrides.gasPrice = gasPrice;\n                }\n                // Uncomment this if you want to skip the gas estimation for each transaction\n                // overrides.gasLimit = hexlify(1200000);\n\n                // console.log(\"Running with extras\",extras)\n                const returned = await tx(contractFunction(...args, overrides));\n                result = tryToDisplay(returned);\n              }\n\n              console.log(\"SETTING RESULT:\", result);\n              setReturnValue(result);\n              triggerRefresh(true);\n            }}\n          >\n            {buttonIcon}\n          </div>\n        }\n      />\n    </div>,\n  );\n\n  return (\n    <div>\n      <Row>\n        <Col\n          span={8}\n          style={{\n            textAlign: \"right\",\n            opacity: 0.333,\n            paddingRight: 6,\n            fontSize: 24,\n          }}\n        >\n          {functionInfo.name}\n        </Col>\n        <Col span={16}>{inputs}</Col>\n      </Row>\n      <Divider />\n    </div>\n  );\n}\n","import { Card } from \"antd\";\nimport React, { useMemo, useState } from \"react\";\nimport { useContractExistsAtAddress, useContractLoader } from \"../../hooks\";\nimport Account from \"../Account\";\nimport DisplayVariable from \"./DisplayVariable\";\nimport FunctionForm from \"./FunctionForm\";\n\nconst funcsUseful = [\"claim\", \"ownerOf\", \"balanceOf\"];\nconst noContractDisplay = (\n  <div>\n    Loading...{\" \"}\n    <div style={{ padding: 32 }}>\n      You need to run{\" \"}\n      <span\n        className=\"highlight\"\n        style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n      >\n        yarn run chain\n      </span>{\" \"}\n      and{\" \"}\n      <span\n        className=\"highlight\"\n        style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n      >\n        yarn run deploy\n      </span>{\" \"}\n      to see your contract here.\n    </div>\n    <div style={{ padding: 32 }}>\n      <span style={{ marginRight: 4 }} role=\"img\" aria-label=\"warning\">\n        ☢️\n      </span>\n      Warning: You might need to run\n      <span\n        className=\"highlight\"\n        style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n      >\n        yarn run deploy\n      </span>{\" \"}\n      <i>again</i> after the frontend comes up!\n    </div>\n  </div>\n);\n\nconst isQueryable = fn => (fn.stateMutability === \"view\" || fn.stateMutability === \"pure\") && fn.inputs.length === 0;\n\nexport default function Contract({\n  customContract,\n  account,\n  gasPrice,\n  signer,\n  provider,\n  name,\n  show,\n  price,\n  blockExplorer,\n  chainId,\n}) {\n  const contracts = useContractLoader(provider, { chainId });\n  let contract;\n  if (!customContract) {\n    contract = contracts ? contracts[name] : \"\";\n  } else {\n    contract = customContract;\n  }\n\n  const address = contract ? contract.address : \"\";\n  const contractIsDeployed = useContractExistsAtAddress(provider, address);\n\n  const displayedContractFunctions = useMemo(\n    () =>\n      contract\n        ? Object.values(contract.interface.functions).filter(\n            fn => fn.type === \"function\" && !(show && show.indexOf(fn.name) < 0),\n          )\n        : [],\n    [contract, show],\n  ).sort((a, b) => funcsUseful.indexOf(a.name) - funcsUseful.indexOf(b.name));\n  // IMPORTANT PLACE: SORT\n  const [refreshRequired, triggerRefresh] = useState(false);\n  // console.log(displayedContractFunctions);\n  const contractDisplay = displayedContractFunctions.map(fn => {\n    // IMPORTANT PLACE\n    if (funcsUseful.includes(fn.name)) {\n      if (isQueryable(fn)) {\n        // If there are no inputs, just display return value\n        return (\n          <DisplayVariable\n            key={fn.name}\n            contractFunction={contract[fn.name]}\n            functionInfo={fn}\n            refreshRequired={refreshRequired}\n            triggerRefresh={triggerRefresh}\n          />\n        );\n      }\n      // If there are inputs, display a form to allow users to provide these\n      return (\n        <FunctionForm\n          key={\"FF\" + fn.name}\n          contractFunction={\n            fn.stateMutability === \"view\" || fn.stateMutability === \"pure\"\n              ? contract[fn.name]\n              : contract.connect(signer)[fn.name]\n          }\n          functionInfo={fn}\n          provider={provider}\n          gasPrice={gasPrice}\n          triggerRefresh={triggerRefresh}\n        />\n      );\n    }\n  });\n\n  return (\n    <div style={{ margin: \"auto\", width: \"70vw\" }}>\n      <Card\n        title={\n          <div>\n            {name}\n            <div style={{ float: \"right\" }}>\n              <Account\n                address={address}\n                localProvider={provider}\n                injectedProvider={provider}\n                mainnetProvider={provider}\n                price={price}\n                blockExplorer={blockExplorer}\n              />\n              {account}\n            </div>\n          </div>\n        }\n        size=\"large\"\n        style={{ marginTop: 25, width: \"100%\" }}\n        loading={contractDisplay && contractDisplay.length <= 0}\n      >\n        {contractIsDeployed ? contractDisplay : noContractDisplay}\n      </Card>\n    </div>\n  );\n}\n","import { SendOutlined } from \"@ant-design/icons\";\nimport { Button, Input, Tooltip } from \"antd\";\nimport { useLookupAddress } from \"eth-hooks\";\nimport React, { useCallback, useState, useEffect } from \"react\";\nimport Blockies from \"react-blockies\";\nimport { Transactor } from \"../helpers\";\nimport Wallet from \"./Wallet\";\n\nconst { utils } = require(\"ethers\");\n\n// improved a bit by converting address to ens if it exists\n// added option to directly input ens name\n// added placeholder option\n\n/*\n  ~ What it does? ~\n\n  Displays a local faucet to send ETH to given address, also wallet is provided\n\n  ~ How can I use? ~\n\n  <Faucet\n    price={price}\n    localProvider={localProvider}\n    ensProvider={mainnetProvider}\n    placeholder={\"Send local faucet\"}\n  />\n\n  ~ Features ~\n\n  - Provide price={price} of ether and convert between USD and ETH in a wallet\n  - Provide localProvider={localProvider} to be able to send ETH to given address\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n              works both in input field & wallet\n  - Provide placeholder=\"Send local faucet\" value for the input\n*/\n\nexport default function Faucet(props) {\n  const [address, setAddress] = useState();\n  const [faucetAddress, setFaucetAddress] = useState();\n\n  useEffect(() => {\n    const getFaucetAddress = async () => {\n      if (props.localProvider) {\n        const _faucetAddress = await props.localProvider.listAccounts();\n        setFaucetAddress(_faucetAddress[0]);\n        console.log(_faucetAddress);\n      }\n    };\n    getFaucetAddress();\n  }, [props.localProvider]);\n\n  let blockie;\n  if (address && typeof address.toLowerCase === \"function\") {\n    blockie = <Blockies seed={address.toLowerCase()} size={8} scale={4} />;\n  } else {\n    blockie = <div />;\n  }\n\n  const ens = useLookupAddress(props.ensProvider, address);\n\n  const updateAddress = useCallback(\n    async newValue => {\n      if (typeof newValue !== \"undefined\") {\n        let address = newValue;\n        if (address.indexOf(\".eth\") > 0 || address.indexOf(\".xyz\") > 0) {\n          try {\n            const possibleAddress = await props.ensProvider.resolveName(address);\n            if (possibleAddress) {\n              address = possibleAddress;\n            }\n            // eslint-disable-next-line no-empty\n          } catch (e) {}\n        }\n        setAddress(address);\n      }\n    },\n    [props.ensProvider, props.onChange],\n  );\n\n  const tx = Transactor(props.localProvider);\n\n  return (\n    <span>\n      <Input\n        size=\"large\"\n        placeholder={props.placeholder ? props.placeholder : \"local faucet\"}\n        prefix={blockie}\n        // value={address}\n        value={ens || address}\n        onChange={e => {\n          // setAddress(e.target.value);\n          updateAddress(e.target.value);\n        }}\n        suffix={\n          <Tooltip title=\"Faucet: Send local ether to an address.\">\n            <Button\n              onClick={() => {\n                tx({\n                  to: address,\n                  value: utils.parseEther(\"0.01\"),\n                });\n                setAddress(\"\");\n              }}\n              shape=\"circle\"\n              icon={<SendOutlined />}\n            />\n            <Wallet\n              color=\"#888888\"\n              provider={props.localProvider}\n              ensProvider={props.ensProvider}\n              price={props.price}\n              address={faucetAddress}\n            />\n          </Tooltip>\n        }\n      />\n    </span>\n  );\n}\n","import { Button } from \"antd\";\nimport React from \"react\";\n\n// added display of 0 instead of NaN if gas price is not provided\n\n/*\n  ~ What it does? ~\n\n  Displays gas gauge\n\n  ~ How can I use? ~\n\n  <GasGauge\n    gasPrice={gasPrice}\n  />\n\n  ~ Features ~\n\n  - Provide gasPrice={gasPrice} and get current gas gauge\n*/\n\nexport default function GasGauge(props) {\n  return (\n    <Button\n      onClick={() => {\n        window.open(\"https://ethgasstation.info/\");\n      }}\n      size=\"large\"\n      shape=\"round\"\n    >\n      <span style={{ marginRight: 8 }}>\n        <span role=\"img\" aria-label=\"fuelpump\">\n          ⛽️\n        </span>\n      </span>\n      {typeof props.gasPrice === \"undefined\" ? 0 : parseInt(props.gasPrice, 10) / 10 ** 9}g\n    </Button>\n  );\n}\n","import { PageHeader } from \"antd\";\nimport React from \"react\";\n\n// displays a page header\n\nexport default function Header() {\n  return (\n    <a href=\"https://github.com/leeduckgo/bewater-nft-wallet\" target=\"_blank\" rel=\"noopener noreferrer\">\n      <PageHeader\n        title=\"BeWater\"\n        subTitle=\"🖼 NFT Wallet0x01\"\n        style={{ cursor: \"pointer\" }}\n      />\n    </a>\n  );\n}\n","import { DollarCircleOutlined } from \"@ant-design/icons\";\nimport { RampInstantSDK } from \"@ramp-network/ramp-instant-sdk\";\nimport { Button, Divider, Modal } from \"antd\";\nimport React, { useState } from \"react\";\n\n// added display of 0 if price={price} is not provided\n\n/*\n  ~ What it does? ~\n\n  Displays current ETH price and gives options to buy ETH through Wyre/Ramp/Coinbase\n                            or get through Rinkeby/Ropsten/Kovan/Goerli\n\n  ~ How can I use? ~\n\n  <Ramp\n    price={price}\n    address={address}\n  />\n\n  ~ Features ~\n\n  - Ramp opens directly in the application, component uses RampInstantSDK\n  - Provide price={price} and current ETH price will be displayed\n  - Provide address={address} and your address will be pasted into Wyre/Ramp instantly\n*/\n\nexport default function Ramp(props) {\n  const [modalUp, setModalUp] = useState(\"down\");\n\n  const type = \"default\";\n\n  const allFaucets = [];\n  for (const n in props.networks) {\n    if (props.networks[n].chainId !== 31337 && props.networks[n].chainId !== 1) {\n      allFaucets.push(\n        <p key={props.networks[n].chainId}>\n          <Button\n            style={{ color: props.networks[n].color }}\n            type={type}\n            size=\"large\"\n            shape=\"round\"\n            onClick={() => {\n              window.open(props.networks[n].faucet);\n            }}\n          >\n            {props.networks[n].name}\n          </Button>\n        </p>,\n      );\n    }\n  }\n\n  return (\n    <div>\n      <Button\n        size=\"large\"\n        shape=\"round\"\n        onClick={() => {\n          setModalUp(\"up\");\n        }}\n      >\n        <DollarCircleOutlined style={{ color: \"#52c41a\" }} />{\" \"}\n        {typeof props.price === \"undefined\" ? 0 : props.price.toFixed(2)}\n      </Button>\n      <Modal\n        title=\"Buy ETH\"\n        visible={modalUp === \"up\"}\n        onCancel={() => {\n          setModalUp(\"down\");\n        }}\n        footer={[\n          <Button\n            key=\"back\"\n            onClick={() => {\n              setModalUp(\"down\");\n            }}\n          >\n            cancel\n          </Button>,\n        ]}\n      >\n        <p>\n          <Button\n            type={type}\n            size=\"large\"\n            shape=\"round\"\n            onClick={() => {\n              window.open(\"https://pay.sendwyre.com/purchase?destCurrency=ETH&sourceAmount=25&dest=\" + props.address);\n            }}\n          >\n            <span style={{ paddingRight: 15 }} role=\"img\">\n              <span role=\"img\" aria-label=\"flag-us\">\n                🇺🇸\n              </span>\n            </span>\n            Wyre\n          </Button>\n        </p>\n        <p>\n          {\" \"}\n          <Button\n            type={type}\n            size=\"large\"\n            shape=\"round\"\n            onClick={() => {\n              new RampInstantSDK({\n                hostAppName: \"scaffold-eth\",\n                hostLogoUrl: \"https://scaffoldeth.io/scaffold-eth.png\",\n                swapAmount: \"100000000000000000\", // 0.1 ETH in wei  ?\n                swapAsset: \"ETH\",\n                userAddress: props.address,\n              })\n                .on(\"*\", event => console.log(event))\n                .show();\n            }}\n          >\n            <span style={{ paddingRight: 15 }} role=\"img\">\n              <span role=\"img\" aria-label=\"flag-gb\">\n                🇬🇧\n              </span>\n            </span>\n            Ramp\n          </Button>\n        </p>\n\n        <p>\n          <Button\n            type={type}\n            size=\"large\"\n            shape=\"round\"\n            onClick={() => {\n              window.open(\"https://www.coinbase.com/buy-ethereum\");\n            }}\n          >\n            <span style={{ paddingRight: 15 }} role=\"img\" aria-label=\"bank\">\n              🏦\n            </span>\n            Coinbase\n          </Button>\n        </p>\n\n        <Divider />\n\n        <h2>Testnet ETH</h2>\n\n        {allFaucets}\n      </Modal>\n    </div>\n  );\n}\n","import { RetweetOutlined, SettingOutlined } from \"@ant-design/icons\";\nimport { ChainId, Fetcher, Percent, Token, TokenAmount, Trade, WETH } from \"@uniswap/sdk\";\nimport { abi as IUniswapV2Router02ABI } from \"@uniswap/v2-periphery/build/IUniswapV2Router02.json\";\nimport {\n  Button,\n  Card,\n  Descriptions,\n  Divider,\n  Drawer,\n  InputNumber,\n  Modal,\n  notification,\n  Row,\n  Select,\n  Space,\n  Tooltip,\n  Typography,\n} from \"antd\";\nimport { useBlockNumber, usePoller } from \"eth-hooks\";\nimport { ethers } from \"ethers\";\nimport React, { useEffect, useState } from \"react\";\nimport { useDebounce } from \"../hooks\";\n\nconst { Option } = Select;\nconst { Text } = Typography;\n\nexport const ROUTER_ADDRESS = \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\";\n\nexport const ZERO_ADDRESS = \"0x0000000000000000000000000000000000000000\";\n\nconst erc20Abi = [\n  \"function balanceOf(address owner) view returns (uint256)\",\n  \"function approve(address _spender, uint256 _value) public returns (bool success)\",\n  \"function allowance(address _owner, address _spender) public view returns (uint256 remaining)\",\n];\n\nconst makeCall = async (callName, contract, args, metadata = {}) => {\n  if (contract[callName]) {\n    let result;\n    if (args) {\n      result = await contract[callName](...args, metadata);\n    } else {\n      result = await contract[callName]();\n    }\n    return result;\n  }\n  console.log(\"no call of that name!\");\n};\n\nconst defaultToken = \"ETH\";\nconst defaultTokenOut = \"DAI\";\nconst defaultSlippage = \"0.5\";\nconst defaultTimeLimit = 60 * 10;\n\nconst tokenListToObject = array =>\n  array.reduce((obj, item) => {\n    obj[item.symbol] = new Token(item.chainId, item.address, item.decimals, item.symbol, item.name);\n    return obj;\n  }, {});\n\nfunction Swap({ selectedProvider, tokenListURI }) {\n  const [tokenIn, setTokenIn] = useState(defaultToken);\n  const [tokenOut, setTokenOut] = useState(defaultTokenOut);\n  const [exact, setExact] = useState();\n  const [amountIn, setAmountIn] = useState();\n  const [amountInMax, setAmountInMax] = useState();\n  const [amountOut, setAmountOut] = useState();\n  const [amountOutMin, setAmountOutMin] = useState();\n  const [trades, setTrades] = useState();\n  const [routerAllowance, setRouterAllowance] = useState();\n  const [balanceIn, setBalanceIn] = useState();\n  const [balanceOut, setBalanceOut] = useState();\n  const [slippageTolerance, setSlippageTolerance] = useState(\n    new Percent(Math.round(defaultSlippage * 100).toString(), \"10000\"),\n  );\n  const [timeLimit, setTimeLimit] = useState(defaultTimeLimit);\n  const [swapping, setSwapping] = useState(false);\n  const [approving, setApproving] = useState(false);\n  const [settingsVisible, setSettingsVisible] = useState(false);\n  const [swapModalVisible, setSwapModalVisible] = useState(false);\n\n  const [tokenList, setTokenList] = useState([]);\n\n  const [tokens, setTokens] = useState();\n\n  const [invertPrice, setInvertPrice] = useState(false);\n\n  const blockNumber = useBlockNumber(selectedProvider, 3000);\n\n  const signer = selectedProvider.getSigner();\n  const routerContract = new ethers.Contract(ROUTER_ADDRESS, IUniswapV2Router02ABI, signer);\n\n  const _tokenListUri = tokenListURI || \"https://gateway.ipfs.io/ipns/tokens.uniswap.org\";\n\n  const debouncedAmountIn = useDebounce(amountIn, 500);\n  const debouncedAmountOut = useDebounce(amountOut, 500);\n\n  const activeChainId = process.env.REACT_APP_NETWORK === \"kovan\" ? ChainId.KOVAN : ChainId.MAINNET;\n\n  useEffect(() => {\n    const getTokenList = async () => {\n      console.log(_tokenListUri);\n      try {\n        const tokenList = await fetch(_tokenListUri);\n        const tokenListJson = await tokenList.json();\n        const filteredTokens = tokenListJson.tokens.filter(function (t) {\n          return t.chainId === activeChainId;\n        });\n        const ethToken = WETH[activeChainId];\n        ethToken.name = \"Ethereum\";\n        ethToken.symbol = \"ETH\";\n        ethToken.logoURI =\n          \"https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2/logo.png\";\n        const _tokenList = [ethToken, ...filteredTokens];\n        setTokenList(_tokenList);\n        const _tokens = tokenListToObject(_tokenList);\n        setTokens(_tokens);\n      } catch (e) {\n        console.log(e);\n      }\n    };\n    getTokenList();\n  }, [tokenListURI]);\n\n  const getTrades = async () => {\n    if (tokenIn && tokenOut && (amountIn || amountOut)) {\n      const pairs = arr => arr.map((v, i) => arr.slice(i + 1).map(w => [v, w])).flat();\n\n      const baseTokens = tokenList\n        .filter(function (t) {\n          return [\"DAI\", \"USDC\", \"USDT\", \"COMP\", \"ETH\", \"MKR\", \"LINK\", tokenIn, tokenOut].includes(t.symbol);\n        })\n        .map(el => {\n          return new Token(el.chainId, el.address, el.decimals, el.symbol, el.name);\n        });\n\n      const listOfPairwiseTokens = pairs(baseTokens);\n\n      const getPairs = async list => {\n        const listOfPromises = list.map(item => Fetcher.fetchPairData(item[0], item[1], selectedProvider));\n        return Promise.all(listOfPromises.map(p => p.catch(() => undefined)));\n      };\n\n      const listOfPairs = await getPairs(listOfPairwiseTokens);\n\n      let bestTrade;\n\n      if (exact === \"in\") {\n        setAmountInMax();\n        bestTrade = Trade.bestTradeExactIn(\n          listOfPairs.filter(item => item),\n          new TokenAmount(tokens[tokenIn], ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals)),\n          tokens[tokenOut],\n          { maxNumResults: 3, maxHops: 1 },\n        );\n        if (bestTrade[0]) {\n          setAmountOut(bestTrade[0].outputAmount.toSignificant(6));\n        } else {\n          setAmountOut();\n        }\n      } else if (exact === \"out\") {\n        setAmountOutMin();\n        bestTrade = Trade.bestTradeExactOut(\n          listOfPairs.filter(item => item),\n          tokens[tokenIn],\n          new TokenAmount(tokens[tokenOut], ethers.utils.parseUnits(amountOut.toString(), tokens[tokenOut].decimals)),\n          { maxNumResults: 3, maxHops: 1 },\n        );\n        if (bestTrade[0]) {\n          setAmountIn(bestTrade[0].inputAmount.toSignificant(6));\n        } else {\n          setAmountIn();\n        }\n      }\n\n      setTrades(bestTrade);\n\n      console.log(bestTrade);\n    }\n  };\n\n  useEffect(() => {\n    getTrades();\n  }, [tokenIn, tokenOut, debouncedAmountIn, debouncedAmountOut, slippageTolerance, selectedProvider]);\n\n  useEffect(() => {\n    if (trades && trades[0]) {\n      if (exact === \"in\") {\n        setAmountOutMin(trades[0].minimumAmountOut(slippageTolerance));\n      } else if (exact === \"out\") {\n        setAmountInMax(trades[0].maximumAmountIn(slippageTolerance));\n      }\n    }\n  }, [slippageTolerance, amountIn, amountOut, trades]);\n\n  const getBalance = async (_token, _account, _contract) => {\n    let newBalance;\n    if (_token === \"ETH\") {\n      newBalance = await selectedProvider.getBalance(_account);\n    } else {\n      newBalance = await makeCall(\"balanceOf\", _contract, [_account]);\n    }\n    return newBalance;\n  };\n\n  const getAccountInfo = async () => {\n    if (tokens) {\n      const accountList = await selectedProvider.listAccounts();\n\n      if (tokenIn) {\n        const tempContractIn = new ethers.Contract(tokens[tokenIn].address, erc20Abi, selectedProvider);\n        const newBalanceIn = await getBalance(tokenIn, accountList[0], tempContractIn);\n        setBalanceIn(newBalanceIn);\n\n        let allowance;\n\n        if (tokenIn === \"ETH\") {\n          setRouterAllowance();\n        } else {\n          allowance = await makeCall(\"allowance\", tempContractIn, [accountList[0], ROUTER_ADDRESS]);\n          setRouterAllowance(allowance);\n        }\n      }\n\n      if (tokenOut) {\n        const tempContractOut = new ethers.Contract(tokens[tokenOut].address, erc20Abi, selectedProvider);\n        const newBalanceOut = await getBalance(tokenOut, accountList[0], tempContractOut);\n        setBalanceOut(newBalanceOut);\n      }\n    }\n  };\n\n  usePoller(getAccountInfo, 6000);\n\n  const route = trades\n    ? trades.length > 0\n      ? trades[0].route.path.map(function (item) {\n          return item.symbol;\n        })\n      : []\n    : [];\n\n  const updateRouterAllowance = async newAllowance => {\n    setApproving(true);\n    try {\n      const tempContract = new ethers.Contract(tokens[tokenIn].address, erc20Abi, signer);\n      const result = await makeCall(\"approve\", tempContract, [ROUTER_ADDRESS, newAllowance]);\n      console.log(result);\n      setApproving(false);\n      return true;\n    } catch (e) {\n      notification.open({\n        message: \"Approval unsuccessful\",\n        description: `Error: ${e.message}`,\n      });\n    }\n  };\n\n  const approveRouter = async () => {\n    const approvalAmount =\n      exact === \"in\"\n        ? ethers.utils.hexlify(ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals))\n        : amountInMax.raw.toString();\n    console.log(approvalAmount);\n    const approval = updateRouterAllowance(approvalAmount);\n    if (approval) {\n      notification.open({\n        message: \"Token transfer approved\",\n        description: `You can now swap up to ${amountIn} ${tokenIn}`,\n      });\n    }\n  };\n\n  const removeRouterAllowance = async () => {\n    const approvalAmount = ethers.utils.hexlify(0);\n    console.log(approvalAmount);\n    const removal = updateRouterAllowance(approvalAmount);\n    if (removal) {\n      notification.open({\n        message: \"Token approval removed\",\n        description: `The router is no longer approved for ${tokenIn}`,\n      });\n    }\n  };\n\n  const executeSwap = async () => {\n    setSwapping(true);\n    try {\n      let args;\n      const metadata = {};\n\n      let call;\n      const deadline = Math.floor(Date.now() / 1000) + timeLimit;\n      const path = trades[0].route.path.map(function (item) {\n        return item.address;\n      });\n      console.log(path);\n      const accountList = await selectedProvider.listAccounts();\n      const address = accountList[0];\n\n      if (exact === \"in\") {\n        const _amountIn = ethers.utils.hexlify(ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals));\n        const _amountOutMin = ethers.utils.hexlify(ethers.BigNumber.from(amountOutMin.raw.toString()));\n        if (tokenIn === \"ETH\") {\n          call = \"swapExactETHForTokens\";\n          args = [_amountOutMin, path, address, deadline];\n          metadata.value = _amountIn;\n        } else {\n          call = tokenOut === \"ETH\" ? \"swapExactTokensForETH\" : \"swapExactTokensForTokens\";\n          args = [_amountIn, _amountOutMin, path, address, deadline];\n        }\n      } else if (exact === \"out\") {\n        const _amountOut = ethers.utils.hexlify(\n          ethers.utils.parseUnits(amountOut.toString(), tokens[tokenOut].decimals),\n        );\n        const _amountInMax = ethers.utils.hexlify(ethers.BigNumber.from(amountInMax.raw.toString()));\n        if (tokenIn === \"ETH\") {\n          call = \"swapETHForExactTokens\";\n          args = [_amountOut, path, address, deadline];\n          metadata.value = _amountInMax;\n        } else {\n          call = tokenOut === \"ETH\" ? \"swapTokensForExactETH\" : \"swapTokensForExactTokens\";\n          args = [_amountOut, _amountInMax, path, address, deadline];\n        }\n      }\n      console.log(call, args, metadata);\n      const result = await makeCall(call, routerContract, args, metadata);\n      console.log(result);\n      notification.open({\n        message: \"Swap complete 🦄\",\n        description: (\n          <>\n            <Text>{`Swapped ${tokenIn} for ${tokenOut}, transaction: `}</Text>\n            <Text copyable>{result.hash}</Text>\n          </>\n        ),\n      });\n      setSwapping(false);\n    } catch (e) {\n      console.log(e);\n      setSwapping(false);\n      notification.open({\n        message: \"Swap unsuccessful\",\n        description: `Error: ${e.message}`,\n      });\n    }\n  };\n\n  const showSwapModal = () => {\n    setSwapModalVisible(true);\n  };\n\n  const handleSwapModalOk = () => {\n    setSwapModalVisible(false);\n    executeSwap();\n  };\n\n  const handleSwapModalCancel = () => {\n    setSwapModalVisible(false);\n  };\n\n  const insufficientBalance = balanceIn\n    ? parseFloat(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals)) < amountIn\n    : null;\n  const inputIsToken = tokenIn !== \"ETH\";\n  const insufficientAllowance = !inputIsToken\n    ? false\n    : routerAllowance\n    ? parseFloat(ethers.utils.formatUnits(routerAllowance, tokens[tokenIn].decimals)) < amountIn\n    : null;\n  const formattedBalanceIn = balanceIn\n    ? parseFloat(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals)).toPrecision(6)\n    : null;\n  const formattedBalanceOut = balanceOut\n    ? parseFloat(ethers.utils.formatUnits(balanceOut, tokens[tokenOut].decimals)).toPrecision(6)\n    : null;\n\n  const metaIn =\n    tokens && tokenList && tokenIn\n      ? tokenList.filter(function (t) {\n          return t.address === tokens[tokenIn].address;\n        })[0]\n      : null;\n  const metaOut =\n    tokens && tokenList && tokenOut\n      ? tokenList.filter(function (t) {\n          return t.address === tokens[tokenOut].address;\n        })[0]\n      : null;\n\n  const cleanIpfsURI = uri => {\n    try {\n      return uri.replace(\"ipfs://\", \"https://ipfs.io/ipfs/\");\n    } catch (e) {\n      console.log(e, uri);\n      return uri;\n    }\n  };\n\n  const logoIn = metaIn ? cleanIpfsURI(metaIn.logoURI) : null;\n  const logoOut = metaOut ? cleanIpfsURI(metaOut.logoURI) : null;\n\n  const rawPrice = trades && trades[0] ? trades[0].executionPrice : null;\n  const price = rawPrice ? rawPrice.toSignificant(7) : null;\n  const priceDescription = rawPrice\n    ? invertPrice\n      ? `${rawPrice.invert().toSignificant(7)} ${tokenIn} per ${tokenOut}`\n      : `${price} ${tokenOut} per ${tokenIn}`\n    : null;\n\n  const priceWidget = (\n    <Space>\n      <Text type=\"secondary\">{priceDescription}</Text>\n      <Button\n        type=\"text\"\n        onClick={() => {\n          setInvertPrice(!invertPrice);\n        }}\n      >\n        <RetweetOutlined />\n      </Button>\n    </Space>\n  );\n\n  const swapModal = (\n    <Modal title=\"Confirm swap\" visible={swapModalVisible} onOk={handleSwapModalOk} onCancel={handleSwapModalCancel}>\n      <Row>\n        <Space>\n          <img src={logoIn} alt={tokenIn} width=\"30\" />\n          {amountIn}\n          {tokenIn}\n        </Space>\n      </Row>\n      <Row justify=\"center\" align=\"middle\" style={{ width: 30 }}>\n        <span>↓</span>\n      </Row>\n      <Row>\n        <Space>\n          <img src={logoOut} alt={tokenOut} width=\"30\" />\n          {amountOut}\n          {tokenOut}\n        </Space>\n      </Row>\n      <Divider />\n      <Row>{priceWidget}</Row>\n      <Row>\n        {trades && ((amountOutMin && exact === \"in\") || (amountInMax && exact === \"out\"))\n          ? exact === \"in\"\n            ? `Output is estimated. You will receive at least ${amountOutMin.toSignificant(\n                6,\n              )} ${tokenOut} or the transaction will revert.`\n            : `Input is estimated. You will sell at most ${amountInMax.toSignificant(\n                6,\n              )} ${tokenIn} or the transaction will revert.`\n          : null}\n      </Row>\n    </Modal>\n  );\n\n  return (\n    <Card\n      title={\n        <Space>\n          <img src=\"https://ipfs.io/ipfs/QmXttGpZrECX5qCyXbBQiqgQNytVGeZW5Anewvh2jc4psg\" width=\"40\" alt=\"uniswapLogo\" />\n          <Typography>Uniswapper</Typography>\n        </Space>\n      }\n      extra={\n        <Button\n          type=\"text\"\n          onClick={() => {\n            setSettingsVisible(true);\n          }}\n        >\n          <SettingOutlined />\n        </Button>\n      }\n    >\n      <Space direction=\"vertical\">\n        <Row justify=\"center\" align=\"middle\">\n          <Card\n            size=\"small\"\n            type=\"inner\"\n            title={`From${exact === \"out\" && tokenIn && tokenOut ? \" (estimate)\" : \"\"}`}\n            extra={\n              <>\n                <img src={logoIn} alt={tokenIn} width=\"30\" />\n                <Button\n                  type=\"link\"\n                  onClick={() => {\n                    setAmountOut();\n                    setAmountIn(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals));\n                    setAmountOutMin();\n                    setAmountInMax();\n                    setExact(\"in\");\n                  }}\n                >\n                  {formattedBalanceIn}\n                </Button>\n              </>\n            }\n            style={{ width: 400, textAlign: \"left\" }}\n          >\n            <InputNumber\n              style={{ width: \"160px\" }}\n              min={0}\n              size=\"large\"\n              value={amountIn}\n              onChange={e => {\n                setAmountOut();\n                setTrades();\n                setAmountIn(e);\n                setExact(\"in\");\n              }}\n            />\n            <Select\n              showSearch\n              value={tokenIn}\n              style={{ width: \"120px\" }}\n              size=\"large\"\n              bordered={false}\n              defaultValue={defaultToken}\n              onChange={value => {\n                console.log(value);\n                if (value === tokenOut) {\n                  console.log(\"switch!\", tokenIn);\n                  setTokenOut(tokenIn);\n                  setAmountOut(amountIn);\n                  setBalanceOut(balanceIn);\n                }\n                setTokenIn(value);\n                setTrades();\n                setAmountIn();\n                setExact(\"out\");\n                setBalanceIn();\n              }}\n              filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n              optionFilterProp=\"children\"\n            >\n              {tokenList.map(token => (\n                <Option key={token.symbol} value={token.symbol}>\n                  {token.symbol}\n                </Option>\n              ))}\n            </Select>\n          </Card>\n        </Row>\n        <Row justify=\"center\" align=\"middle\">\n          <Tooltip title={route.join(\"->\")}>\n            <span>↓</span>\n          </Tooltip>\n        </Row>\n        <Row justify=\"center\" align=\"middle\">\n          <Card\n            size=\"small\"\n            type=\"inner\"\n            title={`To${exact === \"in\" && tokenIn && tokenOut ? \" (estimate)\" : \"\"}`}\n            extra={\n              <>\n                <img src={logoOut} width=\"30\" alt={tokenOut} />\n                <Button type=\"text\">{formattedBalanceOut}</Button>\n              </>\n            }\n            style={{ width: 400, textAlign: \"left\" }}\n          >\n            <InputNumber\n              style={{ width: \"160px\" }}\n              size=\"large\"\n              min={0}\n              value={amountOut}\n              onChange={e => {\n                setAmountOut(e);\n                setAmountIn();\n                setTrades();\n                setExact(\"out\");\n              }}\n            />\n            <Select\n              showSearch\n              value={tokenOut}\n              style={{ width: \"120px\" }}\n              size=\"large\"\n              bordered={false}\n              onChange={value => {\n                console.log(value, tokenIn, tokenOut);\n                if (value === tokenIn) {\n                  console.log(\"switch!\", tokenOut);\n                  setTokenIn(tokenOut);\n                  setAmountIn(amountOut);\n                  setBalanceIn(balanceOut);\n                }\n                setTokenOut(value);\n                setExact(\"in\");\n                setAmountOut();\n                setTrades();\n                setBalanceOut();\n              }}\n              filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n              optionFilterProp=\"children\"\n            >\n              {tokenList.map(token => (\n                <Option key={token.symbol} value={token.symbol}>\n                  {token.symbol}\n                </Option>\n              ))}\n            </Select>\n          </Card>\n        </Row>\n        <Row justify=\"center\" align=\"middle\">\n          {priceDescription ? priceWidget : null}\n        </Row>\n        <Row justify=\"center\" align=\"middle\">\n          <Space>\n            {inputIsToken ? (\n              <Button size=\"large\" loading={approving} disabled={!insufficientAllowance} onClick={approveRouter}>\n                {!insufficientAllowance && amountIn && amountOut ? \"Approved\" : \"Approve\"}\n              </Button>\n            ) : null}\n            <Button\n              size=\"large\"\n              loading={swapping}\n              disabled={insufficientAllowance || insufficientBalance || !amountIn || !amountOut}\n              onClick={showSwapModal}\n            >\n              {insufficientBalance ? \"Insufficient balance\" : \"Swap!\"}\n            </Button>\n            {swapModal}\n          </Space>\n        </Row>\n      </Space>\n      <Drawer\n        visible={settingsVisible}\n        onClose={() => {\n          setSettingsVisible(false);\n        }}\n        width={500}\n      >\n        <Descriptions title=\"Details\" column={1} style={{ textAlign: \"left\" }}>\n          <Descriptions.Item label=\"blockNumber\">{blockNumber}</Descriptions.Item>\n          <Descriptions.Item label=\"routerAllowance\">\n            <Space>\n              {routerAllowance ? ethers.utils.formatUnits(routerAllowance, tokens[tokenIn].decimals) : null}\n              {routerAllowance > 0 ? <Button onClick={removeRouterAllowance}>Remove Allowance</Button> : null}\n            </Space>\n          </Descriptions.Item>\n          <Descriptions.Item label=\"route\">{route.join(\"->\")}</Descriptions.Item>\n          <Descriptions.Item label=\"exact\">{exact}</Descriptions.Item>\n          <Descriptions.Item label=\"bestPrice\">\n            {trades ? (trades.length > 0 ? trades[0].executionPrice.toSignificant(6) : null) : null}\n          </Descriptions.Item>\n          <Descriptions.Item label=\"nextMidPrice\">\n            {trades ? (trades.length > 0 ? trades[0].nextMidPrice.toSignificant(6) : null) : null}\n          </Descriptions.Item>\n          <Descriptions.Item label=\"priceImpact\">\n            {trades ? (trades.length > 0 ? trades[0].priceImpact.toSignificant(6) : null) : null}\n          </Descriptions.Item>\n          <Descriptions.Item label=\"slippageTolerance\">\n            <InputNumber\n              defaultValue={defaultSlippage}\n              min={0}\n              max={100}\n              precision={2}\n              formatter={value => `${value}%`}\n              parser={value => value.replace(\"%\", \"\")}\n              onChange={value => {\n                console.log(value);\n\n                const slippagePercent = new Percent(Math.round(value * 100).toString(), \"10000\");\n                setSlippageTolerance(slippagePercent);\n              }}\n            />\n          </Descriptions.Item>\n          <Descriptions.Item label=\"amountInMax\">{amountInMax ? amountInMax.toExact() : null}</Descriptions.Item>\n          <Descriptions.Item label=\"amountOutMin\">{amountOutMin ? amountOutMin.toExact() : null}</Descriptions.Item>\n          <Descriptions.Item label=\"timeLimitInSeconds\">\n            <InputNumber\n              min={0}\n              max={3600}\n              defaultValue={defaultTimeLimit}\n              onChange={value => {\n                console.log(value);\n                setTimeLimit(value);\n              }}\n            />\n          </Descriptions.Item>\n        </Descriptions>\n      </Drawer>\n    </Card>\n  );\n}\n\nexport default Swap;\n","import { Switch } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\n\nexport default function ThemeSwitcher() {\n  const theme = window.localStorage.getItem(\"theme\");\n  const [isDarkMode, setIsDarkMode] = useState(!(!theme || theme === \"light\"));\n  const { switcher, currentTheme, status, themes } = useThemeSwitcher();\n\n  useEffect(() => {\n    window.localStorage.setItem(\"theme\", currentTheme);\n  }, [currentTheme]);\n\n  const toggleTheme = isChecked => {\n    setIsDarkMode(isChecked);\n    switcher({ theme: isChecked ? themes.dark : themes.light });\n  };\n\n  // Avoid theme change flicker\n  // if (status === \"loading\") {\n  //   return null;\n  // }\n\n  return (\n    <div className=\"main fade-in\" style={{ position: \"fixed\", right: 8, bottom: 8 }}>\n      <span style={{ padding: 8 }}>{currentTheme === \"light\" ? \"☀️\" : \"🌜\"}</span>\n      <Switch checked={isDarkMode} onChange={toggleTheme} />\n    </div>\n  );\n}\n","import { DownloadOutlined, EditOutlined, SendOutlined } from \"@ant-design/icons\";\nimport { Timeline, Typography } from \"antd\";\nimport React from \"react\";\nimport Blockies from \"react-blockies\";\n\nconst { Text } = Typography;\n\n// displays a timeline for scaffold-eth usage\n\nexport default function TimelineDisplay(props) {\n  return (\n    <Timeline mode=\"right\">\n      <Timeline.Item dot=\"💾\">\n        <Text delete>\n          Clone and Install from the{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/austintgriffith/scaffold-eth\">\n            github repo\n          </a>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"⚛️\">\n        <Text delete>\n          Start your frontend app with: <Text strong>yarn start</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"⛓\">\n        <Text delete={props.chainIsUp}>\n          Start your local blockchain with: <Text strong>yarn run chain</Text> (and refresh)\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"📝\">\n        <Text delete={props.hasOwner}>\n          Compile and deploy your smart contract: <Text strong>yarn run deploy</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"🤡\">\n        <Text delete={props.isNotSmoort}>\n          Fix error in <Text code>SmartContractWallet.sol</Text> then: <Text strong>yarn run deploy</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot={<SendOutlined style={{ fontSize: \"16px\" }} />} color={props.hasEther ? \"green\" : \"blue\"}>\n        <Text delete={props.hasEther}>\n          Send test ether to your{\" \"}\n          <Blockies seed={(props.address ? props.address : \"\").toLowerCase()} size={8} scale={2} /> address using\n          (bottom left) faucet\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item\n        dot={<DownloadOutlined style={{ fontSize: \"16px\" }} />}\n        color={props.contractHasEther ? \"green\" : \"blue\"}\n      >\n        <Text delete={props.contractHasEther}>\n          Deposit some funds into your{\" \"}\n          <Blockies seed={(props.contractAddress ? props.contractAddress : \"\").toLowerCase()} size={8} scale={2} />{\" \"}\n          smart contract wallet\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item\n        dot={<EditOutlined style={{ fontSize: \"16px\" }} />}\n        color={props.amOwnerOfContract ? \"green\" : \"blue\"}\n      >\n        <Text delete={props.amOwnerOfContract}>\n          Set <b>owner</b> of your{\" \"}\n          <Blockies seed={(props.contractAddress ? props.contractAddress : \"\").toLowerCase()} size={8} scale={2} />{\" \"}\n          smart contract wallet to your{\" \"}\n          <Blockies seed={(props.address ? props.address : \"\").toLowerCase()} size={8} scale={2} /> address\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"☢️\">\n        <Text>\n          Yikes, anyone can take ownership of <Text code>SmartContractWallet.sol</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"🔬\">\n        <Text>\n          Test your contract with <Text code>buidler/test/myTest.js</Text> then:\n          <Text strong>yarn run test</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"🚀\">\n        <Text>\n          Build something awesome with 🏗 <a href=\"https://github.com/austintgriffith/scaffold-eth\">scaffold-eth</a> and{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://twitter.com/austingriffith\">\n            @ me\n          </a>\n          !\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"📖\">\n        <Text>\n          Read more about{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://ethereum.org/developers\">\n            Ethereum\n          </a>\n          ,{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://solidity.readthedocs.io/en/develop/contracts.html\">\n            Solidity\n          </a>\n          , and{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://buidler.dev/tutorial\">\n            Buidler\n          </a>\n        </Text>\n      </Timeline.Item>\n    </Timeline>\n  );\n}\n","import WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport { Alert, Button, Card, Col, Input, List, Menu, Row } from \"antd\";\nimport \"antd/dist/antd.css\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport ReactJson from \"react-json-view\";\nimport { BrowserRouter, Link, Route, Switch } from \"react-router-dom\";\nimport Web3Modal from \"web3modal\";\nimport \"./App.css\";\nimport { Account, Address, AddressInput, Contract, Faucet, GasGauge, Header, Ramp, ThemeSwitch } from \"./components\";\nimport {INFURA_ID, NETWORK, NETWORKS } from \"./constants\";\nimport { Transactor } from \"./helpers\";\nimport {\n  useBalance,\n  useContractLoader,\n  useContractReader,\n  useEventListener,\n  useExchangePrice,\n  useGasPrice,\n  useOnBlock,\n  useUserSigner,\n} from \"./hooks\";\n\nimport { parseNFT } from \"./backend_hooks\";\n\nimport axios from \"axios\"; \n\nconst { BufferList } = require(\"bl\");\n// https://www.npmjs.com/package/ipfs-http-client\nconst ipfsAPI = require(\"ipfs-http-client\");\nconst ipfs = ipfsAPI({ host: \"ipfs.infura.io\", port: \"5001\", protocol: \"https\" });\n\nconst { ethers } = require(\"ethers\");\n\n/*\n    Welcome to 🏗 scaffold-eth !\n\n    Code:\n    https://github.com/austintgriffith/scaffold-eth\n\n    Support:\n    https://t.me/joinchat/KByvmRe5wkR-8F_zz6AjpA\n    or DM @austingriffith on twitter or telegram\n\n    You should get your own Infura.io ID and put it in `constants.js`\n    (this is your connection to the main Ethereum network for ENS etc.)\n\n\n    🌏 EXTERNAL CONTRACTS:\n    You can also bring in contract artifacts in `constants.js`\n    (and then use the `useExternalContractLoader()` hook!)\n*/\n\n/// 📡 What chain are your contracts deployed to?\nconst targetNetwork = NETWORKS.ropsten; // <------- select your target frontend network (localhost, rinkeby, xdai, mainnet)\n\n// 😬 Sorry for all the console logging\nconst DEBUG = true;\nconst NETWORKCHECK = true;\n\n// EXAMPLE STARTING JSON:\nconst STARTING_JSON = {\n  description: \"It's actually a bison?\",\n  external_url: \"https://austingriffith.com/portfolio/paintings/\", // <-- this can link to a page for the specific file too\n  image: \"https://austingriffith.com/images/paintings/buffalo.jpg\",\n  name: \"Buffalo\",\n  attributes: [\n    {\n      trait_type: \"BackgroundColor\",\n      value: \"green\",\n    },\n    {\n      trait_type: \"Eyes\",\n      value: \"googly\",\n    },\n  ],\n};\n\n// helper function to \"Get\" from IPFS\n// you usually go content.toString() after this...\nconst getFromIPFS = async hashToGet => {\n  for await (const file of ipfs.get(hashToGet)) {\n    console.log(file.path);\n    if (!file.content) continue;\n    const content = new BufferList();\n    for await (const chunk of file.content) {\n      content.append(chunk);\n    }\n    console.log(content);\n    return content;\n  }\n};\n\n// 🛰 providers\nif (DEBUG) console.log(\"📡 Connecting to Mainnet Ethereum\");\n// const mainnetProvider = getDefaultProvider(\"mainnet\", { infura: INFURA_ID, etherscan: ETHERSCAN_KEY, quorum: 1 });\n// const mainnetProvider = new InfuraProvider(\"mainnet\",INFURA_ID);\n//\n// attempt to connect to our own scaffold eth rpc and if that fails fall back to infura...\n// Using StaticJsonRpcProvider as the chainId won't change see https://github.com/ethers-io/ethers.js/issues/901\nconst scaffoldEthProvider = navigator.onLine ? new ethers.providers.StaticJsonRpcProvider(\"https://rpc.scaffoldeth.io:48544\") : null;\nconst mainnetInfura = navigator.onLine ? new ethers.providers.StaticJsonRpcProvider(\"https://mainnet.infura.io/v3/\" + INFURA_ID) : null;\n// ( ⚠️ Getting \"failed to meet quorum\" errors? Check your INFURA_I\n\n// 🏠 Your local provider is usually pointed at your local blockchain\nconst localProviderUrl = targetNetwork.rpcUrl;\n// as you deploy to other networks you can set REACT_APP_PROVIDER=https://dai.poa.network in packages/react-app/.env\nconst localProviderUrlFromEnv = process.env.REACT_APP_PROVIDER ? process.env.REACT_APP_PROVIDER : localProviderUrl;\nif (DEBUG) console.log(\"🏠 Connecting to provider:\", localProviderUrlFromEnv);\nconst localProvider = new ethers.providers.StaticJsonRpcProvider(localProviderUrlFromEnv);\n\n// IMPORTANT PLACE\nconst backend = \"https://taishang.leeduckgo.com/taishang/api/v1/parse?handler_id=1&type=n\";\n\n// 🔭 block explorer URL\nconst blockExplorer = targetNetwork.blockExplorer;\n\n/*\n  Web3 modal helps us \"connect\" external wallets:\n*/\nconst web3Modal = new Web3Modal({\n  // network: \"mainnet\", // optional\n  cacheProvider: true, // optional\n  providerOptions: {\n    walletconnect: {\n      package: WalletConnectProvider, // required\n      options: {\n        infuraId: INFURA_ID,\n      },\n    },\n  },\n});\n\nconst logoutOfWeb3Modal = async () => {\n  await web3Modal.clearCachedProvider();\n  setTimeout(() => {\n    window.location.reload();\n  }, 1);\n};\n\nfunction App(props) {\n  const mainnetProvider = scaffoldEthProvider && scaffoldEthProvider._network ? scaffoldEthProvider : mainnetInfura;\n\n  const [injectedProvider, setInjectedProvider] = useState();\n  const [address, setAddress] = useState();\n  /* 💵 This hook will get the price of ETH from 🦄 Uniswap: */\n  const price = useExchangePrice(targetNetwork, mainnetProvider);\n\n  /* 🔥 This hook will get the price of Gas from ⛽️ EtherGasStation */\n  const gasPrice = useGasPrice(targetNetwork, \"fast\");\n  // Use your injected provider from 🦊 Metamask or if you don't have it then instantly generate a 🔥 burner wallet.\n  const userSigner = useUserSigner(injectedProvider, localProvider);\n\n  useEffect(() => {\n    async function getAddress() {\n      if (userSigner) {\n        const newAddress = await userSigner.getAddress();\n        setAddress(newAddress);\n      }\n    }\n    getAddress();\n  }, [userSigner]);\n\n  // You can warn the user if you would like them to be on a specific network\n  const localChainId = localProvider && localProvider._network && localProvider._network.chainId;\n  const selectedChainId =\n    userSigner && userSigner.provider && userSigner.provider._network && userSigner.provider._network.chainId;\n\n  // For more hooks, check out 🔗eth-hooks at: https://www.npmjs.com/package/eth-hooks\n\n  // The transactor wraps transactions and provides notificiations\n  const tx = Transactor(userSigner, gasPrice);\n\n  // Faucet Tx can be used to send funds from the faucet\n  const faucetTx = Transactor(localProvider, gasPrice);\n\n  // 🏗 scaffold-eth is full of handy hooks like this one to get your balance:\n  const yourLocalBalance = useBalance(localProvider, address);\n\n  // Just plug in different 🛰 providers to get your balance on different chains:\n  const yourMainnetBalance = useBalance(mainnetProvider, address);\n\n  // Load in your local 📝 contract and read a value from it:\n  const readContracts = useContractLoader(localProvider);\n\n  // If you want to make 🔐 write transactions to your contracts, use the userSigner:\n  const writeContracts = useContractLoader(userSigner, { chainId: localChainId });\n\n  // EXTERNAL CONTRACT EXAMPLE:\n  //\n  // If you want to bring in the mainnet DAI contract it would look like:\n  const mainnetContracts = useContractLoader(mainnetProvider);\n\n  // If you want to call a function on a new block\n  useOnBlock(mainnetProvider, () => {\n    console.log(`⛓ A new mainnet block is here: ${mainnetProvider._lastBlockNumber}`);\n  });\n\n  // Then read your DAI balance like:\n  const myMainnetDAIBalance = useContractReader(mainnetContracts, \"DAI\", \"balanceOf\", [\n    \"0x34aA3F359A9D614239015126635CE7732c18fDF3\",\n  ]);\n\n  // keep track of a variable from the contract in the local React state:\n  const balance = useContractReader(readContracts, \"N\", \"balanceOf\", [address]);\n  console.log(\"🤗 read_contracts:\", readContracts);\n\n  // 📟 Listen for broadcast events\n  const transferEvents = useEventListener(readContracts, \"N\", \"Transfer\", localProvider, 1);\n  console.log(\"📟 Transfer events:\", transferEvents);\n\n  //\n  // 🧠 This effect will update Ns by polling when your balance changes\n  //\n  const yourBalance = balance && balance.toNumber && balance.toNumber();\n  const [Ns, setNs] = useState();\n\n  useEffect(() => {\n    const updateNs = async () => {\n      const collectibleUpdate = [];\n      for (let tokenIndex = 0; tokenIndex < balance; tokenIndex++) {\n        try {\n          console.log(\"GEtting token index\", tokenIndex);\n          const tokenId = await readContracts.N.tokenOfOwnerByIndex(address, tokenIndex);\n          console.log(\"tokenId\", tokenId);\n          const tokenURI = await readContracts.N.tokenURI(tokenId);\n          console.log(\"tokenURI\", tokenURI);\n          // TODO: Optimize\n          let svg;\n          // const svg = get_svg(tokenURI);\n          // const svg = decodeTokenURI(tokenURI);\n          // const ipfsHash = tokenURI.replace(\"https://ipfs.io/ipfs/\", \"\");\n          // console.log(\"ipfsHash\", ipfsHash);\n          axios({\n            method: 'post',\n            url: backend,\n            data: {\n              token_uri: tokenURI,\n            },\n            headers: {\n                'Content-Type': 'application/json'\n            }\n          })\n          .then(response => {\n            svg = window.atob(response.data.result.image);\n            \n            console.log(svg);\n            try {\n              // const jsonManifest = JSON.parse(jsonManifestBuffer.toString());\n              // console.log(\"jsonManifest\", jsonManifest);\n              collectibleUpdate.push({ id: tokenId, uri: tokenURI, svg: svg, owner: address});\n            } catch (e) {\n              console.log(e);\n            }\n          })\n          .catch(error => {\n            console.log(error);\n          });\n        \n          // const jsonManifestBuffer = await getFromIPFS(ipfsHash);\n\n\n        } catch (e) {\n          console.log(e);\n        }\n      }\n      setNs(collectibleUpdate);\n    };\n    updateNs();\n  }, [address, yourBalance]);\n\n  // function get_svg(tokenURI) {\n  //   let decodedData = window.atob(tokenURI.slice(29));\n  //   return parseNFT(decodedData, \"https://taishang.leeduckgo.com/taishang/api/v1/parse?handler_id=1&type=n\");\n  //   // return decodedData;\n  // }\n  // function decodeTokenURI(tokenURI) {\n    \n  //   let decodedData = window.atob(tokenURI.slice(29));\n  //   let decodedDataFinally = window.atob(JSON.parse(decodedData).image.slice(26));\n  //   console.log(\"decoded data Finally\", decodedDataFinally);\n  //   return decodedDataFinally;\n  // }\n  /*\n  const addressFromENS = useResolveName(mainnetProvider, \"austingriffith.eth\");\n  console.log(\"🏷 Resolved austingriffith.eth as:\",addressFromENS)\n  */\n\n  //\n  // 🧫 DEBUG 👨🏻‍🔬\n  //\n  useEffect(() => {\n    if (\n      DEBUG &&\n      mainnetProvider &&\n      address &&\n      selectedChainId &&\n      yourLocalBalance &&\n      yourMainnetBalance &&\n      readContracts &&\n      writeContracts &&\n      mainnetContracts\n    ) {\n      console.log(\"_____________________________________ 🏗 scaffold-eth _____________________________________\");\n      console.log(\"🌎 mainnetProvider\", mainnetProvider);\n      console.log(\"🏠 localChainId\", localChainId);\n      console.log(\"👩‍💼 selected address:\", address);\n      console.log(\"🕵🏻‍♂️ selectedChainId:\", selectedChainId);\n      console.log(\"💵 yourLocalBalance\", yourLocalBalance ? ethers.utils.formatEther(yourLocalBalance) : \"...\");\n      console.log(\"💵 yourMainnetBalance\", yourMainnetBalance ? ethers.utils.formatEther(yourMainnetBalance) : \"...\");\n      console.log(\"📝 readContracts\", readContracts);\n      console.log(\"🌍 DAI contract on mainnet:\", mainnetContracts);\n      console.log(\"💵 yourMainnetDAIBalance\", myMainnetDAIBalance);\n      console.log(\"🔐 writeContracts\", writeContracts);\n    }\n  }, [\n    mainnetProvider,\n    address,\n    selectedChainId,\n    yourLocalBalance,\n    yourMainnetBalance,\n    readContracts,\n    writeContracts,\n    mainnetContracts,\n  ]);\n\n  let networkDisplay = \"\";\n  if (NETWORKCHECK && localChainId && selectedChainId && localChainId !== selectedChainId) {\n    const networkSelected = NETWORK(selectedChainId);\n    const networkLocal = NETWORK(localChainId);\n    if (selectedChainId === 1337 && localChainId === 31337) {\n      networkDisplay = (\n        <div style={{ zIndex: 2, position: \"absolute\", right: 0, top: 60, padding: 16 }}>\n          <Alert\n            message=\"⚠️ Wrong Network ID\"\n            description={\n              <div>\n                You have <b>chain id 1337</b> for localhost and you need to change it to <b>31337</b> to work with\n                HardHat.\n                <div>(MetaMask -&gt; Settings -&gt; Networks -&gt; Chain ID -&gt; 31337)</div>\n              </div>\n            }\n            type=\"error\"\n            closable={false}\n          />\n        </div>\n      );\n    } else {\n      networkDisplay = (\n        <div style={{ zIndex: 2, position: \"absolute\", right: 0, top: 60, padding: 16 }}>\n          <Alert\n            message=\"⚠️ Wrong Network\"\n            description={\n              <div>\n                You have <b>{networkSelected && networkSelected.name}</b> selected and you need to be on{\" \"}\n                <Button\n                  onClick={async () => {\n                    const ethereum = window.ethereum;\n                    const data = [\n                      {\n                        chainId: \"0x\" + targetNetwork.chainId.toString(16),\n                        chainName: targetNetwork.name,\n                        nativeCurrency: targetNetwork.nativeCurrency,\n                        rpcUrls: [targetNetwork.rpcUrl],\n                        blockExplorerUrls: [targetNetwork.blockExplorer],\n                      },\n                    ];\n                    console.log(\"data\", data);\n                    const tx = await ethereum.request({ method: \"wallet_addEthereumChain\", params: data }).catch();\n                    if (tx) {\n                      console.log(tx);\n                    }\n                  }}\n                >\n                  <b>{networkLocal && networkLocal.name}</b>\n                </Button>.\n              </div>\n            }\n            type=\"error\"\n            closable={false}\n          />\n        </div>\n      );\n    }\n  } else {\n    networkDisplay = (\n      <div style={{ zIndex: -1, position: \"absolute\", right: 154, top: 28, padding: 16, color: targetNetwork.color }}>\n        {targetNetwork.name}\n      </div>\n    );\n  }\n\n  const loadWeb3Modal = useCallback(async () => {\n    const provider = await web3Modal.connect();\n    setInjectedProvider(new ethers.providers.Web3Provider(provider));\n\n    provider.on(\"chainChanged\", chainId => {\n      console.log(`chain changed to ${chainId}! updating providers`);\n      setInjectedProvider(new ethers.providers.Web3Provider(provider));\n    });\n\n    provider.on(\"accountsChanged\", () => {\n      console.log(`account changed!`);\n      setInjectedProvider(new ethers.providers.Web3Provider(provider));\n    });\n\n    // Subscribe to session disconnection\n    provider.on(\"disconnect\", (code, reason) => {\n      console.log(code, reason);\n      logoutOfWeb3Modal();\n    });\n  }, [setInjectedProvider]);\n\n  useEffect(() => {\n    if (web3Modal.cachedProvider) {\n      loadWeb3Modal();\n    }\n  }, [loadWeb3Modal]);\n\n  const [route, setRoute] = useState();\n  useEffect(() => {\n    setRoute(window.location.pathname);\n  }, [setRoute]);\n\n  let faucetHint = \"\";\n  const faucetAvailable = localProvider && localProvider.connection && targetNetwork.name.indexOf(\"local\") !== -1;\n\n  const [faucetClicked, setFaucetClicked] = useState(false);\n  if (\n    !faucetClicked &&\n    localProvider &&\n    localProvider._network &&\n    localProvider._network.chainId == 31337 &&\n    yourLocalBalance &&\n    ethers.utils.formatEther(yourLocalBalance) <= 0\n  ) {\n    faucetHint = (\n      <div style={{ padding: 16 }}>\n        <Button\n          type=\"primary\"\n          onClick={() => {\n            faucetTx({\n              to: address,\n              value: ethers.utils.parseEther(\"0.01\"),\n            });\n            setFaucetClicked(true);\n          }}\n        >\n          💰 Grab funds from the faucet ⛽️\n        </Button>\n      </div>\n    );\n  }\n\n  const [yourJSON, setYourJSON] = useState(STARTING_JSON);\n  const [sending, setSending] = useState();\n  const [ipfsHash, setIpfsHash] = useState();\n  const [ipfsDownHash, setIpfsDownHash] = useState();\n\n  const [downloading, setDownloading] = useState();\n  const [ipfsContent, setIpfsContent] = useState();\n\n  const [transferToAddresses, setTransferToAddresses] = useState({});\n\n  return (\n    <div className=\"App\">\n      {/* ✏️ Edit the header and change the title to your project name */}\n      <Header />\n      {networkDisplay}\n      <BrowserRouter>\n        <Menu style={{ textAlign: \"center\" }} selectedKeys={[route]} mode=\"horizontal\">\n          <Menu.Item key=\"/\">\n            <Link\n              onClick={() => {\n                setRoute(\"/\");\n              }}\n              to=\"/\"\n            >\n              Ns\n            </Link>\n          </Menu.Item>\n          <Menu.Item key=\"/contract-interactor\">\n            <Link\n              onClick={() => {\n                setRoute(\"/contract-interactor\");\n              }}\n              to=\"/contract-interactor\"\n            >\n              Contract Interactor\n            </Link>\n          </Menu.Item>\n          <Menu.Item key=\"/transfers\">\n            <Link\n              onClick={() => {\n                setRoute(\"/transfers\");\n              }}\n              to=\"/transfers\"\n            >\n              Transfers\n            </Link>\n          </Menu.Item>\n\n          {/* <Menu.Item key=\"/ipfsup\">\n            <Link\n              onClick={() => {\n                setRoute(\"/ipfsup\");\n              }}\n              to=\"/ipfsup\"\n            >\n              IPFS Upload\n            </Link>\n          </Menu.Item>\n          <Menu.Item key=\"/ipfsdown\">\n            <Link\n              onClick={() => {\n                setRoute(\"/ipfsdown\");\n              }}\n              to=\"/ipfsdown\"\n            >\n              IPFS Download\n            </Link>\n          </Menu.Item>\n          <Menu.Item key=\"/debugcontracts\">\n            <Link\n              onClick={() => {\n                setRoute(\"/debugcontracts\");\n              }}\n              to=\"/debugcontracts\"\n            >\n              Debug Contracts\n            </Link>\n          </Menu.Item> */}\n        </Menu>\n\n        <Switch>\n          <Route exact path=\"/\">\n            {/*\n                🎛 this scaffolding is full of commonly used components\n                this <Contract/> component will automatically parse your ABI\n                and give you a form to interact with it locally\n            */}\n            <div style={{ width: 640, margin: \"auto\", marginTop: 32, paddingBottom: 32 }}>\n              <List\n                bordered\n                dataSource={Ns}\n                renderItem={item => {\n                  const id = item.id.toNumber();\n                  return (\n                    <List.Item key={id + \"_\" + item.uri + \"_\" + item.owner}>\n                      <Card\n                        title={\n                          <div>\n                            <span style={{ fontSize: 16, marginRight: 8 }}>#{id}</span> {item.name}\n                          </div>\n                        }\n                      >\n                        <div style={{width: '300px', height: '300px'}}>\n                          <div dangerouslySetInnerHTML={{__html: item.svg }} />\n                          {/* {item.svg} */}\n                          {/* <img src={item.image} style={{ maxWidth: 150 }} /> */}\n                        </div>\n                        <div>{item.description}</div>\n                      </Card>\n\n                      <div>\n                        owner:{\" \"}\n                        <Address\n                          address={item.owner}\n                          ensProvider={mainnetProvider}\n                          blockExplorer={blockExplorer}\n                          fontSize={16}\n                        />\n                        <AddressInput\n                          ensProvider={mainnetProvider}\n                          placeholder=\"transfer to address\"\n                          value={transferToAddresses[id]}\n                          onChange={newValue => {\n                            const update = {};\n                            update[id] = newValue;\n                            setTransferToAddresses({ ...transferToAddresses, ...update });\n                          }}\n                        />\n                        <Button\n                          onClick={() => {\n                            console.log(\"writeContracts\", writeContracts);\n                            tx(writeContracts.N.transferFrom(address, transferToAddresses[id], id));\n                          }}\n                        >\n                          Transfer\n                        </Button>\n                      </div>\n                    </List.Item>\n                  );\n                }}\n              />\n            </div>\n          </Route>\n\n          {/* IMPORTANT PLACE */}\n          <Route exact path=\"/contract-interactor\">\n            {/*\n                🎛 this scaffolding is full of commonly used components\n                this <Contract/> component will automatically parse your ABI\n                and give you a form to interact with it locally\n            */}\n\n            <Contract\n              name=\"N\"\n              signer={userSigner}\n              provider={localProvider}\n              address={address}\n              blockExplorer={blockExplorer}\n            />\n          </Route>\n\n          <Route path=\"/transfers\">\n            <div style={{ width: 600, margin: \"auto\", marginTop: 32, paddingBottom: 32 }}>\n              <List\n                bordered\n                dataSource={transferEvents}\n                renderItem={item => {\n                  return (\n                    <List.Item key={item[0] + \"_\" + item[1] + \"_\" + item.blockNumber + \"_\" + item[2].toNumber()}>\n                      <span style={{ fontSize: 16, marginRight: 8 }}>#{item[2].toNumber()}</span>\n                      <Address address={item[0]} ensProvider={mainnetProvider} fontSize={16} /> =&gt;\n                      <Address address={item[1]} ensProvider={mainnetProvider} fontSize={16} />\n                    </List.Item>\n                  );\n                }}\n              />\n            </div>\n          </Route>\n\n          {/* <Route path=\"/ipfsup\">\n            <div style={{ paddingTop: 32, width: 740, margin: \"auto\", textAlign: \"left\" }}>\n              <ReactJson\n                style={{ padding: 8 }}\n                src={yourJSON}\n                theme=\"pop\"\n                enableClipboard={false}\n                onEdit={(edit, a) => {\n                  setYourJSON(edit.updated_src);\n                }}\n                onAdd={(add, a) => {\n                  setYourJSON(add.updated_src);\n                }}\n                onDelete={(del, a) => {\n                  setYourJSON(del.updated_src);\n                }}\n              />\n            </div>\n\n            <Button\n              style={{ margin: 8 }}\n              loading={sending}\n              size=\"large\"\n              shape=\"round\"\n              type=\"primary\"\n              onClick={async () => {\n                console.log(\"UPLOADING...\", yourJSON);\n                setSending(true);\n                setIpfsHash();\n                const result = await ipfs.add(JSON.stringify(yourJSON)); // addToIPFS(JSON.stringify(yourJSON))\n                if (result && result.path) {\n                  setIpfsHash(result.path);\n                }\n                setSending(false);\n                console.log(\"RESULT:\", result);\n              }}\n            >\n              Upload to IPFS\n            </Button>\n\n            <div style={{ padding: 16, paddingBottom: 150 }}>{ipfsHash}</div>\n          </Route>\n          <Route path=\"/ipfsdown\">\n            <div style={{ paddingTop: 32, width: 740, margin: \"auto\" }}>\n              <Input\n                value={ipfsDownHash}\n                placeHolder=\"IPFS hash (like QmadqNw8zkdrrwdtPFK1pLi8PPxmkQ4pDJXY8ozHtz6tZq)\"\n                onChange={e => {\n                  setIpfsDownHash(e.target.value);\n                }}\n              />\n            </div>\n            <Button\n              style={{ margin: 8 }}\n              loading={sending}\n              size=\"large\"\n              shape=\"round\"\n              type=\"primary\"\n              onClick={async () => {\n                console.log(\"DOWNLOADING...\", ipfsDownHash);\n                setDownloading(true);\n                setIpfsContent();\n                const result = await getFromIPFS(ipfsDownHash); // addToIPFS(JSON.stringify(yourJSON))\n                if (result && result.toString) {\n                  setIpfsContent(result.toString());\n                }\n                setDownloading(false);\n              }}\n            >\n              Download from IPFS\n            </Button>\n\n            <pre style={{ padding: 16, width: 500, margin: \"auto\", paddingBottom: 150 }}>{ipfsContent}</pre>\n          </Route>\n          <Route path=\"/debugcontracts\">\n            <Contract\n              name=\"BeWater N\"\n              signer={userSigner}\n              provider={localProvider}\n              address={address}\n              blockExplorer={blockExplorer}\n            />\n          </Route> */}\n        </Switch>\n      </BrowserRouter>\n\n      <ThemeSwitch />\n\n      {/* 👨‍💼 Your account is in the top right with a wallet at connect options */}\n      <div style={{ position: \"fixed\", textAlign: \"right\", right: 0, top: 0, padding: 10 }}>\n        <Account\n          address={address}\n          localProvider={localProvider}\n          userSigner={userSigner}\n          mainnetProvider={mainnetProvider}\n          price={price}\n          web3Modal={web3Modal}\n          loadWeb3Modal={loadWeb3Modal}\n          logoutOfWeb3Modal={logoutOfWeb3Modal}\n          blockExplorer={blockExplorer}\n        />\n        {faucetHint}\n      </div>\n\n      {/* 🗺 Extra UI like gas price, eth price, faucet, and support: */}\n      <div style={{ position: \"fixed\", textAlign: \"left\", left: 0, bottom: 20, padding: 10 }}>\n        <Row align=\"middle\" gutter={[4, 4]}>\n          <Col span={8}>\n            <Ramp price={price} address={address} networks={NETWORKS} />\n          </Col>\n\n          <Col span={8} style={{ textAlign: \"center\", opacity: 0.8 }}>\n            <GasGauge gasPrice={gasPrice} />\n          </Col>\n          <Col span={8} style={{ textAlign: \"center\", opacity: 1 }}>\n            <Button\n              onClick={() => {\n                window.open(\"https://t.me/joinchat/KByvmRe5wkR-8F_zz6AjpA\");\n              }}\n              size=\"large\"\n              shape=\"round\"\n            >\n              <span style={{ marginRight: 8 }} role=\"img\" aria-label=\"support\">\n                💬\n              </span>\n              Support\n            </Button>\n          </Col>\n        </Row>\n\n        <Row align=\"middle\" gutter={[4, 4]}>\n          <Col span={24}>\n            {\n              /*  if the local provider has a signer, let's show the faucet:  */\n              faucetAvailable ? (\n                <Faucet localProvider={localProvider} price={price} ensProvider={mainnetProvider} />\n              ) : (\n                \"\"\n              )\n            }\n          </Col>\n        </Row>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { Fetcher, Route, Token, WETH } from \"@uniswap/sdk\";\nimport { usePoller } from \"eth-hooks\";\nimport { useState } from \"react\";\n\nexport default function useExchangePrice(targetNetwork, mainnetProvider, pollTime) {\n  const [price, setPrice] = useState(0);\n\n  const pollPrice = () => {\n    async function getPrice() {\n      if(!mainnetProvider)\n        return 0;\n      if (targetNetwork.price) {\n        setPrice(targetNetwork.price);\n      } else {\n        const DAI = new Token(\n          mainnetProvider.network ? mainnetProvider.network.chainId : 1,\n          \"0x6B175474E89094C44Da98b954EedeAC495271d0F\",\n          18,\n        );\n        const pair = await Fetcher.fetchPairData(DAI, WETH[DAI.chainId], mainnetProvider);\n        const route = new Route([pair], WETH[DAI.chainId]);\n        setPrice(parseFloat(route.midPrice.toSignificant(6)));\n      }\n    }\n    getPrice();\n  };\n  usePoller(pollPrice, pollTime || 9777);\n\n  return price;\n}\n","import axios from \"axios\";\nimport { usePoller } from \"eth-hooks\";\nimport { useState } from \"react\";\n\nexport default function useGasPrice(targetNetwork, speed) {\n  const [gasPrice, setGasPrice] = useState();\n  const loadGasPrice = async () => {\n    if (targetNetwork.hasOwnProperty(\"gasPrice\")) {\n      setGasPrice(targetNetwork.gasPrice);\n    } else {\n      if(navigator.onLine){\n        axios\n          .get(\"https://ethgasstation.info/json/ethgasAPI.json\")\n          .then(response => {\n            const newGasPrice = response.data[speed || \"fast\"] * 100000000;\n            if (newGasPrice !== gasPrice) {\n              setGasPrice(newGasPrice);\n            }\n          })\n          .catch(error => console.log(error));\n      }\n    }\n  };\n\n  usePoller(loadGasPrice, 39999);\n  return gasPrice;\n}\n","import { useEffect, useState } from \"react\";\n\n/*\n  ~ What it does? ~\n\n  Enables you to keep track of events\n\n  ~ How can I use? ~\n\n  const setPurposeEvents = useEventListener(readContracts, \"YourContract\", \"SetPurpose\", localProvider, 1);\n\n  ~ Features ~\n\n  - Provide readContracts by loading contracts (see more on ContractLoader.js)\n  - Specify the name of the contract, in this case it is \"YourContract\"\n  - Specify the name of the event in the contract, in this case we keep track of \"SetPurpose\" event\n  - Specify the provider\n*/\n\nexport default function useEventListener(contracts, contractName, eventName, provider, startBlock, args) {\n  const [updates, setUpdates] = useState([]);\n\n  useEffect(() => {\n    if (typeof provider !== \"undefined\" && typeof startBlock !== \"undefined\") {\n      // if you want to read _all_ events from your contracts, set this to the block number it is deployed\n      provider.resetEventsBlock(startBlock);\n    }\n    if (contracts && contractName && contracts[contractName]) {\n      try {\n        contracts[contractName].on(eventName, (...args) => {\n          const blockNumber = args[args.length - 1].blockNumber;\n          setUpdates(messages => [{ blockNumber, ...args.pop().args }, ...messages]);\n        });\n        return () => {\n          contracts[contractName].removeListener(eventName);\n        };\n      } catch (e) {\n        console.log(e);\n      }\n    }\n  }, [provider, startBlock, contracts, contractName, eventName]);\n\n  return updates;\n}\n","import { ApolloClient, ApolloProvider, InMemoryCache } from \"@apollo/client\";\nimport React from \"react\";\nimport { ThemeSwitcherProvider } from \"react-css-theme-switcher\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nconst themes = {\n  dark: `${process.env.PUBLIC_URL}/dark-theme.css`,\n  light: `${process.env.PUBLIC_URL}/light-theme.css`,\n};\n\nconst prevTheme = window.localStorage.getItem(\"theme\");\n\nconst subgraphUri = \"http://localhost:8000/subgraphs/name/scaffold-eth/your-contract\";\n\nconst client = new ApolloClient({\n  uri: subgraphUri,\n  cache: new InMemoryCache(),\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <ThemeSwitcherProvider themeMap={themes} defaultTheme={prevTheme || \"light\"}>\n      <App subgraphUri={subgraphUri} />\n    </ThemeSwitcherProvider>\n  </ApolloProvider>,\n  document.getElementById(\"root\"),\n);\n","const ERC20ABI = [\n  {\n    constant: true,\n    inputs: [],\n    name: \"name\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_spender\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_from\",\n        type: \"address\",\n      },\n      {\n        name: \"_to\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transferFrom\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"decimals\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint8\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: \"_owner\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        name: \"balance\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"symbol\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_to\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transfer\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: \"_owner\",\n        type: \"address\",\n      },\n      {\n        name: \"_spender\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowance\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    payable: true,\n    stateMutability: \"payable\",\n    type: \"fallback\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Approval\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n];\nconst DAIABI = [\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"chainId_\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"src\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"guy\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Approval\",\n    type: \"event\",\n  },\n  {\n    anonymous: true,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"bytes4\",\n        name: \"sig\",\n        type: \"bytes4\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"arg1\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"arg2\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: false,\n        internalType: \"bytes\",\n        name: \"data\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"LogNote\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"src\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"dst\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"DOMAIN_SEPARATOR\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"PERMIT_TYPEHASH\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowance\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"burn\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"decimals\",\n    outputs: [\n      {\n        internalType: \"uint8\",\n        name: \"\",\n        type: \"uint8\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"guy\",\n        type: \"address\",\n      },\n    ],\n    name: \"deny\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"mint\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"src\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"dst\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"move\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"name\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"nonces\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"holder\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"nonce\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"expiry\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bool\",\n        name: \"allowed\",\n        type: \"bool\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"v\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"r\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"s\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"permit\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"pull\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"push\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"guy\",\n        type: \"address\",\n      },\n    ],\n    name: \"rely\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"symbol\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"dst\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transfer\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"src\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"dst\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transferFrom\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"version\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"wards\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\n// Mainnet DAI, Optimism and Arbitrium Rollup Contracts with local addresses\nmodule.exports = {\n  1: {\n    contracts: {\n      DAI: {\n        address: \"0x6B175474E89094C44Da98b954EedeAC495271d0F\",\n        abi: DAIABI,\n      },\n      UNI: {\n        address: \"0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984\",\n        abi: ERC20ABI,\n      },\n    },\n  },\n};\n"],"sourceRoot":""}