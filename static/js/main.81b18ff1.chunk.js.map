{"version":3,"sources":["hooks/OnBlock.js","hooks/Poller.js","hooks/Balance.js","hooks/ContractExistsAtAddress.js","hooks/ContractLoader.js","hooks/LookupAddress.js","hooks/ResolveName.js","hooks/BurnerSigner.js","hooks/UserSigner.js","components/Address.jsx","components/Balance.jsx","constants.js","helpers/Transactor.js","components/Blockie.jsx","components/AddressInput.jsx","components/EtherInput.jsx","components/Wallet.jsx","components/Account.jsx","components/BytesStringInput.jsx","components/Contract/utils.js","components/Contract/DisplayVariable.jsx","components/Contract/FunctionForm.jsx","components/Contract/index.jsx","components/Faucet.jsx","components/Header.jsx","components/Swap.jsx","components/ThemeSwitch.jsx","components/Timeline.jsx","components/L2Bridge.jsx","App.jsx","hooks/ExchangePrice.js","hooks/GasPrice.js","hooks/ContractReader.js","hooks/EventListener.js","index.jsx","contracts/external_contracts.js"],"names":["useOnBlock","provider","fn","args","savedCallback","useRef","useEffect","current","listener","blockNumber","length","on","off","usePoller","delay","extraWatch","id","setInterval","clearInterval","useBalance","address","pollTime","useState","balance","setBalance","pollBalance","useCallback","a","getBalance","newBalance","useContractExistsAtAddress","contractAddress","contractIsDeployed","setContractIsDeployed","checkDeployment","utils","isAddress","getCode","bytecode","ethers","require","useContractLoader","providerOrSigner","config","contracts","setContracts","active","console","log","listAccounts","accounts","Signer","isSigner","signer","getSigner","getNetwork","providerNetwork","_chainId","chainId","contractList","externalContractList","hardhatContracts","e","externalContracts","combinedContracts","hardhatNetwork","Object","prototype","hasOwnProperty","call","hardhatNetworkName","newContracts","keys","reduce","accumulator","contractName","_address","customAddresses","includes","Contract","abi","loadContracts","lookupAddress","reportedName","resolveName","resolvedAddress","getAddress","useLookupAddress","ensName","setEnsName","cache","window","localStorage","getItem","JSON","parse","timestamp","Date","now","name","then","setItem","stringify","parseProviderOrSigner","undefined","JsonRpcProvider","Web3Provider","useUserProviderAndSigner","injectedProviderOrSigner","localProvider","setSigner","setProvider","setProviderNetwork","burnerSigner","key","storedValue","setStoredValue","setValue","value","error","storedKey","_newKey","Wallet","createRandom","privateKey","_signer","connect","useBurnerSigner","useMemo","result","location","pathname","incomingPK","hash","replace","rawPK","history","pushState","currentPrivateKey","syncBurnerKeyFromStorage","r","Text","Typography","Address","props","ens","ensProvider","currentTheme","useThemeSwitcher","avatar","paragraph","rows","displayAddress","substr","indexOf","size","text","etherscanLink","blockExplorer","blockExplorerLink","minimized","style","verticalAlign","color","target","href","rel","seed","toLowerCase","scale","onChange","editable","copyable","fontSize","paddingLeft","Balance","dollarMode","setDollarMode","floatBalance","parseFloat","usingBalance","etherBalance","formatEther","toFixed","displayBalance","price","dollarMultiplier","padding","cursor","onClick","INFURA_ID","NETWORKS","localhost","rpcUrl","hostname","mainnet","kovan","faucet","rinkeby","ropsten","goerli","xdai","gasPrice","matic","mumbai","localArbitrum","localArbitrumL1","rinkebyArbitrum","arbitrum","localOptimismL1","localOptimism","kovanOptimism","optimism","NETWORK","n","callbacks","Transactor","etherscan","tx","callback","network","_isProvider","options","notify","navigator","onLine","dappId","system","networkId","transactionHandler","txInformation","possibleFunction","transaction","Notify","etherscanNetwork","etherscanTxUrl","Promise","parseUnits","gasLimit","hexlify","sendTransaction","emitter","onclick","open","notification","info","message","description","placement","txResult","listeningInterval","getTransactionReceipt","currentTransactionReceipt","confirmations","wait","data","reason","Blockie","AddressInput","scan","setScan","currentValue","scannerButton","marginTop","count","CameraOutlined","QrcodeOutlined","updateAddress","newValue","possibleAddress","scanner","zIndex","position","left","top","width","resolution","onError","onScan","possibleNewValue","lastIndexOf","autoComplete","autoFocus","placeholder","prefix","addonAfter","EtherInput","mode","setMode","display","setDisplay","option","title","usdValue","ethValue","Paragraph","signerAddress","setSignerAddress","newAddress","receiveButton","privateKeyButton","selectedAddress","setOpen","qr","setQr","amount","setAmount","toAddress","setToAddress","pk","setPK","providerSend","WalletOutlined","rotate","level","includeMargin","renderAs","imageSettings","excavate","KeyOutlined","wallet","extraPkDisplayAdded","extraPkDisplay","push","backgroundStyle","pastpk","pastwallet","_signingKey","reload","inputStyle","visible","float","paddingRight","onOk","onCancel","footer","type","disabled","loading","parseEther","to","SendOutlined","Account","userSigner","mainnetProvider","web3Modal","loadWeb3Modal","logoutOfWeb3Modal","modalButtons","cachedProvider","marginLeft","shape","constants","tryToDisplay","thing","toNumber","formatUnits","DisplayVariable","contractFunction","functionInfo","refreshRequired","triggerRefresh","variable","setVariable","refresh","funcResponse","span","textAlign","opacity","BigNumber","FunctionForm","form","setForm","txValue","setTxValue","returnValue","setReturnValue","inputIndex","inputs","map","input","buttons","isHexString","formUpdate","parseBytes32String","formatBytes32String","toUtf8String","toUtf8Bytes","trim","margin","event","suffix","txValueInput","floatValue","from","toHexString","payable","buttonIcon","defaultValue","bordered","height","innerIndex","baseType","stateMutability","returned","overrides","funcsUseful","noContractDisplay","className","borderRadius","fontWeight","marginRight","role","aria-label","contract","customContract","account","show","displayedContractFunctions","values","interface","functions","filter","sort","b","contractDisplay","isQueryable","injectedProvider","Header","subTitle","Select","Option","Swap","ThemeSwitcher","theme","isDarkMode","setIsDarkMode","switcher","themes","status","right","bottom","checked","isChecked","dark","light","targetNetwork","scaffoldEthProvider","providers","StaticJsonRpcProvider","mainnetInfura","localProviderUrl","localProviderUrlFromEnv","process","REACT_APP_PROVIDER","Web3Modal","cacheProvider","providerOptions","walletconnect","package","WalletConnectProvider","infuraId","clearCachedProvider","setTimeout","App","_network","setInjectedProvider","setAddress","setPrice","DAI","Token","Fetcher","fetchPairData","WETH","pair","route","Route","midPrice","toSignificant","getPrice","useExchangePrice","speed","setGasPrice","loadGasPrice","axios","get","response","newGasPrice","catch","useGasPrice","localChainId","selectedChainId","faucetTx","yourLocalBalance","yourMainnetBalance","readContracts","writeContracts","mainnetContracts","_lastBlockNumber","functionName","formatter","adjustPollTime","tried","setTried","bind","updateValue","useContractReader","transferEvents","eventName","startBlock","updates","setUpdates","resetEventsBlock","messages","pop","removeListener","useEventListener","yourBalance","Ns","setNs","collectibleUpdate","tokenIndex","N","tokenOfOwnerByIndex","tokenId","tokenURI","svg","method","url","token_uri","base_url","headers","atob","image","uri","owner","updateNs","networkDisplay","networkSelected","networkLocal","closable","ethereum","toString","chainName","nativeCurrency","rpcUrls","blockExplorerUrls","request","params","code","setRoute","faucetHint","faucetClicked","setFaucetClicked","transferToAddresses","setTransferToAddresses","nProgress","done","selectedKeys","Item","exact","path","paddingBottom","dataSource","renderItem","item","dangerouslySetInnerHTML","__html","download","encodeURIComponent","icon","DownloadOutlined","update","transferFrom","prevTheme","subgraphUri","client","ApolloClient","InMemoryCache","Loading","start","Component","ReactDOM","render","document","getElementById","onreadystatechange","readyState","themeMap","defaultTheme","module","exports","1","internalType","anonymous","indexed","constant","outputs","UNI"],"mappings":"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","file":"static/js/main.81b18ff1.chunk.js","sourcesContent":["import { useEffect, useRef } from \"react\";\n\n// helper hook to call a function regularly in time intervals\nconst DEBUG = false;\n\nexport default function useOnBlock(provider, fn, args) {\n  const savedCallback = useRef();\n  // Remember the latest fn.\n  useEffect(() => {\n    savedCallback.current = fn;\n  }, [fn]);\n\n  // Turn on the listener if we have a function & a provider\n  useEffect(() => {\n    if (fn && provider) {\n      const listener = blockNumber => {\n        if (DEBUG) console.log(blockNumber, fn, args, provider.listeners());\n\n        if (args && args.length > 0) {\n          savedCallback.current(...args);\n        } else {\n          savedCallback.current();\n        }\n      };\n\n      provider.on(\"block\", listener);\n\n      return () => {\n        provider.off(\"block\", listener);\n      };\n    }\n  }, [provider]);\n}\n","import { useEffect, useRef } from \"react\";\n\n// helper hook to call a function regularly in time intervals\n\nexport default function usePoller(fn, delay, extraWatch) {\n  const savedCallback = useRef();\n  // Remember the latest fn.\n  useEffect(() => {\n    savedCallback.current = fn;\n  }, [fn]);\n  // Set up the interval.\n  // eslint-disable-next-line consistent-return\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n  // run at start too\n  useEffect(() => {\n    fn();\n  }, [extraWatch]);\n}\n","import { useCallback, useState } from \"react\";\nimport useOnBlock from \"./OnBlock\";\nimport usePoller from \"./Poller\";\n\n/*\n  ~ What it does? ~\n\n  Gets your balance in ETH from given address and provider\n\n  ~ How can I use? ~\n\n  const yourLocalBalance = useBalance(localProvider, address);\n\n  ~ Features ~\n\n  - Provide address and get balance corresponding to given address\n  - Change provider to access balance on different chains (ex. mainnetProvider)\n  - If no pollTime is passed, the balance will update on every new block\n*/\n\nconst DEBUG = false;\n\nexport default function useBalance(provider, address, pollTime = 0) {\n  const [balance, setBalance] = useState();\n\n  const pollBalance = useCallback(\n    async (provider, address) => {\n      if (provider && address) {\n        const newBalance = await provider.getBalance(address);\n        if (newBalance !== balance) {\n          setBalance(newBalance);\n        }\n      }\n    },\n    [provider, address],\n  );\n\n  // Only pass a provider to watch on a block if there is no pollTime\n  useOnBlock(pollTime === 0 && provider, () => {\n    if (provider && address && pollTime === 0) {\n      pollBalance(provider, address);\n    }\n  });\n\n  // Use a poller if a pollTime is provided\n  usePoller(\n    async () => {\n      if (provider && address && pollTime > 0) {\n        if (DEBUG) console.log(\"polling!\", address);\n        pollBalance();\n      }\n    },\n    pollTime,\n    provider && address,\n  );\n\n  return balance;\n}\n","import { utils } from \"ethers\";\nimport { useEffect, useState } from \"react\";\n\n/*\n  ~ What it does? ~\n\n  Checks whether a contract exists on the blockchain, returns true if it exists, otherwise false\n\n  ~ How can I use? ~\n\n  const contractIsDeployed = useContractExistsAtAddress(localProvider, contractAddress);\n\n  ~ Features ~\n\n  - Provide contractAddress to check if the contract is deployed\n  - Change provider to check contract address on different chains (ex. mainnetProvider)\n*/\n\nconst useContractExistsAtAddress = (provider, contractAddress) => {\n  const [contractIsDeployed, setContractIsDeployed] = useState(false);\n\n  // We can look at the blockchain and see what's stored at `contractAddress`\n  // If we find code then we know that a contract exists there.\n  // If we find nothing (0x0) then there is no contract deployed to that address\n  useEffect(() => {\n    // eslint-disable-next-line consistent-return\n    const checkDeployment = async () => {\n      if (!utils.isAddress(contractAddress)) return false;\n      const bytecode = await provider.getCode(contractAddress);\n      setContractIsDeployed(bytecode !== \"0x0\");\n    };\n    if (provider) checkDeployment();\n  }, [provider, contractAddress]);\n\n  return contractIsDeployed;\n};\n\nexport default useContractExistsAtAddress;\n","/* eslint-disable import/no-dynamic-require */\n/* eslint-disable global-require */\nimport { useEffect, useState } from \"react\";\n\nconst { ethers } = require(\"ethers\");\n\n/*\n  ~ What it does? ~\n\n  Loads your local contracts and gives options to read values from contracts\n  or write transactions into them\n\n  ~ How can I use? ~\n\n  const readContracts = useContractLoader(localProvider) // or\n  const writeContracts = useContractLoader(userProvider)\n\n  ~ Features ~\n\n  - localProvider enables reading values from contracts\n  - userProvider enables writing transactions into contracts\n  - Example of keeping track of \"purpose\" variable by loading contracts into readContracts\n    and using ContractReader.js hook:\n    const purpose = useContractReader(readContracts,\"YourContract\", \"purpose\")\n  - Example of using setPurpose function from our contract and writing transactions by Transactor.js helper:\n    tx( writeContracts.YourContract.setPurpose(newPurpose) )\n\n  config can include:\n  - chainId - to hardcode the chainId, irrespective of the providerOrSigner chainId\n  - hardhatNetworkName - to hardcode the hardhat network of interest\n  - customAddresses: { contractName: 0xCustomAddress } to hardcode the address for a given named contract\n  - hardhatContracts: object following the hardhat deploy export format (Json with chainIds as keys, which have hardhat network names as keys, which contain arrays of contracts for each)\n  - externalContracts: object with chainIds as keys, with an array of contracts for each\n*/\n\nexport default function useContractLoader(providerOrSigner, config = {}) {\n  const [contracts, setContracts] = useState();\n  useEffect(() => {\n    let active = true;\n\n    async function loadContracts() {\n      if (providerOrSigner && typeof providerOrSigner !== \"undefined\") {\n        console.log(`loading contracts`);\n        try {\n          // we need to check to see if this providerOrSigner has a signer or not\n          let signer;\n          let provider;\n          let accounts;\n\n          if (providerOrSigner && typeof providerOrSigner.listAccounts === \"function\") {\n            accounts = await providerOrSigner.listAccounts();\n          }\n\n          if (ethers.Signer.isSigner(providerOrSigner)) {\n            signer = providerOrSigner;\n            provider = signer.provider;\n          } else if (accounts && accounts.length > 0) {\n            signer = providerOrSigner.getSigner();\n            provider = providerOrSigner;\n          } else {\n            signer = providerOrSigner;\n            provider = providerOrSigner;\n          }\n\n          const providerNetwork = await provider.getNetwork();\n\n          const _chainId = config.chainId || providerNetwork.chainId;\n\n          let contractList = {};\n          let externalContractList = {};\n          try {\n            contractList = config.hardhatContracts || require(\"../contracts/hardhat_contracts.json\");\n          } catch (e) {\n            console.log(e);\n          }\n          try {\n            externalContractList = config.externalContracts || require(\"../contracts/external_contracts.js\");\n          } catch (e) {\n            console.log(e);\n          }\n\n          let combinedContracts = {};\n\n          if (contractList[_chainId]) {\n            for (const hardhatNetwork in contractList[_chainId]) {\n              if (Object.prototype.hasOwnProperty.call(contractList[_chainId], hardhatNetwork)) {\n                if (!config.hardhatNetworkName || hardhatNetwork === config.hardhatNetworkName) {\n                  combinedContracts = {\n                    ...combinedContracts,\n                    ...contractList[_chainId][hardhatNetwork].contracts,\n                  };\n                }\n              }\n            }\n          }\n\n          if (externalContractList[_chainId]) {\n            combinedContracts = { ...combinedContracts, ...externalContractList[_chainId].contracts };\n          }\n\n          const newContracts = Object.keys(combinedContracts).reduce((accumulator, contractName) => {\n            const _address =\n              config.customAddresses && Object.keys(config.customAddresses).includes(contractName)\n                ? config.customAddresses[contractName]\n                : combinedContracts[contractName].address;\n            accumulator[contractName] = new ethers.Contract(_address, combinedContracts[contractName].abi, signer);\n            return accumulator;\n          }, {});\n          if (active) setContracts(newContracts);\n        } catch (e) {\n          console.log(\"ERROR LOADING CONTRACTS!!\", e);\n        }\n      }\n    }\n    loadContracts();\n\n    return () => {\n      active = false;\n    };\n  }, [providerOrSigner, config.chainId, config.hardhatNetworkName]);\n\n  return contracts;\n}\n","import { utils } from \"ethers\";\nimport { useEffect, useState } from \"react\";\n\n// resolved if(name){} to not save \"\" into cache\n\n/*\n  ~ What it does? ~\n\n  Gets ENS name from given address and provider\n\n  ~ How can I use? ~\n\n  const ensName = useLookupAddress(mainnetProvider, address);\n\n  ~ Features ~\n\n  - Provide address and get ENS name corresponding to given address\n*/\n\nconst lookupAddress = async (provider, address) => {\n  if (address && utils.isAddress(address)) {\n    // console.log(`looking up ${address}`)\n    try {\n      // Accuracy of reverse resolution is not enforced.\n      // We then manually ensure that the reported ens name resolves to address\n      const reportedName = await provider.lookupAddress(address);\n\n      const resolvedAddress = await provider.resolveName(reportedName);\n\n      if (address && utils.getAddress(address) === utils.getAddress(resolvedAddress)) {\n        return reportedName;\n      }\n      return utils.getAddress(address);\n    } catch (e) {\n      return utils.getAddress(address);\n    }\n  }\n  return 0;\n};\n\nconst useLookupAddress = (provider, address) => {\n  const [ensName, setEnsName] = useState(address);\n  // const [ensCache, setEnsCache] = useLocalStorage('ensCache_'+address); Writing directly due to sync issues\n\n  useEffect(() => {\n    let cache = window.localStorage.getItem(\"ensCache_\" + address);\n    cache = cache && JSON.parse(cache);\n\n    if (cache && cache.timestamp > Date.now()) {\n      setEnsName(cache.name);\n    } else if (provider) {\n      lookupAddress(provider, address).then(name => {\n        if (name) {\n          setEnsName(name);\n          window.localStorage.setItem(\n            \"ensCache_\" + address,\n            JSON.stringify({\n              timestamp: Date.now() + 360000,\n              name,\n            }),\n          );\n        }\n      });\n    }\n  }, [provider, address, setEnsName]);\n\n  return ensName;\n};\n\nexport default useLookupAddress;\n","import { constants } from \"ethers\";\nimport { useEffect, useState } from \"react\";\n\n/*\n  ~ What it does? ~\n\n  Gets address from given ENS name and provider\n\n  ~ How can I use? ~\n\n  const addressFromENS = useResolveName(mainnetProvider, \"austingriffith.eth\");\n\n  ~ Features ~\n\n  - Specify mainnetProvider\n  - Provide ENS name and get address corresponding to given ENS name\n*/\n\nconst useResolveName = (provider, ensName) => {\n  const [address, setAddress] = useState(constants.AddressZero);\n\n  useEffect(() => {\n    if (provider) {\n      provider.resolveName(ensName).then(resolvedAddress => setAddress(resolvedAddress));\n    }\n  }, [provider, ensName]);\n\n  return address;\n};\n\nexport default useResolveName;\n","import { useState, useEffect } from \"react\";\n\nconst { ethers } = require(\"ethers\");\n\nexport default function useBurnerSigner(provider) {\n  const key = \"metaPrivateKey\";\n  let wallet;\n  const [signer, setSigner] = useState();\n  const [storedValue, setStoredValue] = useState();\n\n  const setValue = value => {\n    try {\n      setStoredValue(value);\n      window.localStorage.setItem(key, value);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    const storedKey = window.localStorage.getItem(key);\n    if (!storedKey) {\n      console.log(\"generating a new key\");\n      const _newWallet = ethers.Wallet.createRandom();\n      const _newKey = _newWallet.privateKey;\n      setValue(_newKey);\n    } else {\n      setValue(storedKey);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (storedValue && provider) {\n      wallet = new ethers.Wallet(storedValue);\n      const _signer = wallet.connect(provider);\n      setSigner(_signer);\n    }\n  }, [storedValue, provider]);\n\n  return signer;\n}\n","import { useMemo, useState } from \"react\";\nimport useBurnerSigner from \"./BurnerSigner\";\nimport { JsonRpcProvider, Web3Provider } from \"@ethersproject/providers\";\nimport { Signer } from \"ethers\";\n/**\n * Parse TEthersProviderOrSigner to TProviderAndSigner\n * @param providerOrSigner TEthersProviderOrSigner\n * @returns TProviderAndSigner\n */\nexport const parseProviderOrSigner = async providerOrSigner => {\n  let signer = undefined;\n  let provider;\n  let providerNetwork;\n  if (providerOrSigner && (providerOrSigner instanceof JsonRpcProvider || providerOrSigner instanceof Web3Provider)) {\n    const accounts = await providerOrSigner.listAccounts();\n    if (accounts && accounts.length > 0) {\n      signer = providerOrSigner.getSigner();\n    }\n    provider = providerOrSigner;\n    providerNetwork = await providerOrSigner.getNetwork();\n  }\n  if (!signer && providerOrSigner instanceof Signer) {\n    signer = providerOrSigner;\n    provider = signer.provider;\n    providerNetwork = provider && (await provider.getNetwork());\n  }\n  return { signer, provider, providerNetwork };\n};\n\nconst syncBurnerKeyFromStorage = () => {\n  if (window.location.pathname && window.location.pathname.includes(\"/pk\")) {\n    const incomingPK = window.location.hash.replace(\"#\", \"\");\n    if (incomingPK.length === 64 || incomingPK.length === 66) {\n      console.log(\"🔑 Incoming Private Key...\");\n      const rawPK = incomingPK;\n      window.history.pushState({}, \"\", \"/\");\n      const currentPrivateKey = window.localStorage.getItem(\"metaPrivateKey\");\n      if (currentPrivateKey && currentPrivateKey !== rawPK) {\n        window.localStorage.setItem(`metaPrivateKey_backup${Date.now()}`, currentPrivateKey);\n      }\n      window.localStorage.setItem(\"metaPrivateKey\", rawPK);\n    }\n  }\n};\n/**\n *  Gets user provider/signer from injected provider or local provider\n *  Use your injected provider from 🦊 Metamask\n *  If you don't have it then instantly generate a 🔥 burner wallet from a local provider\n *\n  ~ Features ~\n  - Specify the injected provider from Metamask\n  - Specify the local provider\n  - Usage examples:\n    const tx = Transactor(userSigner, gasPrice)\n * @param injectedProviderOrSigner (TEthersProviderOrSigner) :: injected provider/signer from metamask etc..\n * @param localProvider (TEthersProvider) local provider to generate a burner wallet from\n * @returns (TProviderAndSigner)\n */\nconst useUserProviderAndSigner = (injectedProviderOrSigner, localProvider) => {\n  const [signer, setSigner] = useState();\n  const [provider, setProvider] = useState();\n  const [providerNetwork, setProviderNetwork] = useState();\n  const burnerSigner = useBurnerSigner(localProvider);\n  useMemo(() => {\n    if (injectedProviderOrSigner) {\n      console.log(\"🦊 Using injected provider\");\n      void parseProviderOrSigner(injectedProviderOrSigner).then(result => {\n        if (result != null) setSigner(result.signer);\n      });\n    } else if (!localProvider) {\n      setSigner(undefined);\n    } else {\n      syncBurnerKeyFromStorage();\n      console.log(\"🔥 Using burner signer\", burnerSigner);\n      setSigner(burnerSigner);\n    }\n  }, [injectedProviderOrSigner, localProvider, burnerSigner]);\n  useMemo(() => {\n    if (signer) {\n      const result = parseProviderOrSigner(signer);\n      void result.then(r => {\n        setProvider(r.provider);\n        setProviderNetwork(r.providerNetwork);\n      });\n    }\n  }, [signer]);\n  return { signer, provider, providerNetwork };\n};\n\nexport default useUserProviderAndSigner;\n","import { Skeleton, Typography } from \"antd\";\nimport React from \"react\";\nimport Blockies from \"react-blockies\";\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\nimport { useLookupAddress } from \"../hooks\";\n\n// changed value={address} to address={address}\n\n/*\n  ~ What it does? ~\n\n  Displays an address with a blockie image and option to copy address\n\n  ~ How can I use? ~\n\n  <Address\n    address={address}\n    ensProvider={mainnetProvider}\n    blockExplorer={blockExplorer}\n    fontSize={fontSize}\n  />\n\n  ~ Features ~\n\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\")\n  - Provide blockExplorer={blockExplorer}, click on address and get the link\n              (ex. by default \"https://etherscan.io/\" or for xdai \"https://blockscout.com/poa/xdai/\")\n  - Provide fontSize={fontSize} to change the size of address text\n*/\n\nconst { Text } = Typography;\n\nconst blockExplorerLink = (address, blockExplorer) =>\n  `${blockExplorer || \"https://etherscan.io/\"}${\"address/\"}${address}`;\n\nexport default function Address(props) {\n  const address = props.value || props.address;\n\n  const ens = useLookupAddress(props.ensProvider, address);\n\n  const { currentTheme } = useThemeSwitcher();\n\n  if (!address) {\n    return (\n      <span>\n        <Skeleton avatar paragraph={{ rows: 1 }} />\n      </span>\n    );\n  }\n\n  let displayAddress = address.substr(0, 6);\n\n  if (ens && ens.indexOf(\"0x\") < 0) {\n    displayAddress = ens;\n  } else if (props.size === \"short\") {\n    displayAddress += \"...\" + address.substr(-4);\n  } else if (props.size === \"long\") {\n    displayAddress = address;\n  }\n\n  const etherscanLink = blockExplorerLink(address, props.blockExplorer);\n  if (props.minimized) {\n    return (\n      <span style={{ verticalAlign: \"middle\" }}>\n        <a\n          style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\n          target=\"_blank\"\n          href={etherscanLink}\n          rel=\"noopener noreferrer\"\n        >\n          <Blockies seed={address.toLowerCase()} size={8} scale={2} />\n        </a>\n      </span>\n    );\n  }\n\n  let text;\n  if (props.onChange) {\n    text = (\n      <Text editable={{ onChange: props.onChange }} copyable={{ text: address }}>\n        <a\n          style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\n          target=\"_blank\"\n          href={etherscanLink}\n          rel=\"noopener noreferrer\"\n        >\n          {displayAddress}\n        </a>\n      </Text>\n    );\n  } else {\n    text = (\n      <Text copyable={{ text: address }}>\n        <a\n          style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\n          target=\"_blank\"\n          href={etherscanLink}\n          rel=\"noopener noreferrer\"\n        >\n          {displayAddress}\n        </a>\n      </Text>\n    );\n  }\n\n  return (\n    <span>\n      <span style={{ verticalAlign: \"middle\" }}>\n        <Blockies seed={address.toLowerCase()} size={8} scale={props.fontSize ? props.fontSize / 7 : 4} />\n      </span>\n      <span style={{ verticalAlign: \"middle\", paddingLeft: 5, fontSize: props.fontSize ? props.fontSize : 28 }}>\n        {text}\n      </span>\n    </span>\n  );\n}\n","import React, { useState } from \"react\";\nimport { useBalance } from \"../hooks\";\n\nconst { utils } = require(\"ethers\");\n\n/*\n  ~ What it does? ~\n\n  Displays a balance of given address in ether & dollar\n\n  ~ How can I use? ~\n\n  <Balance\n    address={address}\n    provider={mainnetProvider}\n    price={price}\n  />\n\n  ~ If you already have the balance as a bignumber ~\n  <Balance\n    balance={balance}\n    price={price}\n  />\n\n  ~ Features ~\n\n  - Provide address={address} and get balance corresponding to given address\n  - Provide provider={mainnetProvider} to access balance on mainnet or any other network (ex. localProvider)\n  - Provide price={price} of ether and get your balance converted to dollars\n*/\n\nexport default function Balance(props) {\n  const [dollarMode, setDollarMode] = useState(true);\n\n  // const [listening, setListening] = useState(false);\n\n  const balance = useBalance(props.provider, props.address);\n\n  let floatBalance = parseFloat(\"0.00\");\n\n  let usingBalance = balance;\n\n  if (typeof props.balance !== \"undefined\") {\n    usingBalance = props.balance;\n  }\n  if (typeof props.value !== \"undefined\") {\n    usingBalance = props.value;\n  }\n\n  if (usingBalance) {\n    const etherBalance = utils.formatEther(usingBalance);\n    parseFloat(etherBalance).toFixed(2);\n    floatBalance = parseFloat(etherBalance);\n  }\n\n  let displayBalance = floatBalance.toFixed(4);\n\n  const price = props.price || props.dollarMultiplier;\n\n  if (price && dollarMode) {\n    displayBalance = \"$\" + (floatBalance * price).toFixed(2);\n  }\n\n  return (\n    <span\n      style={{\n        verticalAlign: \"middle\",\n        fontSize: props.size ? props.size : 24,\n        padding: 8,\n        cursor: \"pointer\",\n      }}\n      onClick={() => {\n        setDollarMode(!dollarMode);\n      }}\n    >\n      {displayBalance}\n    </span>\n  );\n}\n","// MY INFURA_ID, SWAP IN YOURS FROM https://infura.io/dashboard/ethereum\nexport const INFURA_ID = \"460f40a260564ac4a4f4b3fffb032dad\";\n\n// MY ETHERSCAN_ID, SWAP IN YOURS FROM https://etherscan.io/myapikey\nexport const ETHERSCAN_KEY = \"PSW8C433Q667DVEX5BCRMGNAH9FSGFZ7Q8\";\n\n// BLOCKNATIVE ID FOR Notify.js:\nexport const BLOCKNATIVE_DAPPID = \"0b58206a-f3c0-4701-a62f-73c7243e8c77\";\n\nexport const NETWORKS = {\n  localhost: {\n    name: \"localhost\",\n    color: \"#666666\",\n    chainId: 31337,\n    blockExplorer: \"\",\n    rpcUrl: \"http://\" + window.location.hostname + \":8545\",\n  },\n  mainnet: {\n    name: \"mainnet\",\n    color: \"#ff8b9e\",\n    chainId: 1,\n    rpcUrl: `https://mainnet.infura.io/v3/${INFURA_ID}`,\n    blockExplorer: \"https://etherscan.io/\",\n  },\n  kovan: {\n    name: \"kovan\",\n    color: \"#7003DD\",\n    chainId: 42,\n    rpcUrl: `https://kovan.infura.io/v3/${INFURA_ID}`,\n    blockExplorer: \"https://kovan.etherscan.io/\",\n    faucet: \"https://gitter.im/kovan-testnet/faucet\", // https://faucet.kovan.network/\n  },\n  rinkeby: {\n    name: \"rinkeby\",\n    color: \"#e0d068\",\n    chainId: 4,\n    rpcUrl: `https://rinkeby.infura.io/v3/${INFURA_ID}`,\n    faucet: \"https://faucet.rinkeby.io/\",\n    blockExplorer: \"https://rinkeby.etherscan.io/\",\n  },\n  ropsten: {\n    name: \"ropsten\",\n    color: \"#F60D09\",\n    chainId: 3,\n    faucet: \"https://faucet.ropsten.be/\",\n    blockExplorer: \"https://ropsten.etherscan.io/\",\n    rpcUrl: `https://ropsten.infura.io/v3/${INFURA_ID}`,\n  },\n  goerli: {\n    name: \"goerli\",\n    color: \"#0975F6\",\n    chainId: 5,\n    faucet: \"https://goerli-faucet.slock.it/\",\n    blockExplorer: \"https://goerli.etherscan.io/\",\n    rpcUrl: `https://goerli.infura.io/v3/${INFURA_ID}`,\n  },\n  xdai: {\n    name: \"xdai\",\n    color: \"#48a9a6\",\n    chainId: 100,\n    price: 1,\n    gasPrice: 1000000000,\n    rpcUrl: \"https://dai.poa.network\",\n    faucet: \"https://xdai-faucet.top/\",\n    blockExplorer: \"https://blockscout.com/poa/xdai/\",\n  },\n  matic: {\n    name: \"matic\",\n    color: \"#2bbdf7\",\n    chainId: 137,\n    price: 1,\n    gasPrice: 1000000000,\n    rpcUrl: \"https://rpc-mainnet.maticvigil.com\",\n    faucet: \"https://faucet.matic.network/\",\n    blockExplorer: \"https://explorer-mainnet.maticvigil.com//\",\n  },\n  mumbai: {\n    name: \"mumbai\",\n    color: \"#92D9FA\",\n    chainId: 80001,\n    price: 1,\n    gasPrice: 1000000000,\n    rpcUrl: \"https://rpc-mumbai.maticvigil.com\",\n    faucet: \"https://faucet.matic.network/\",\n    blockExplorer: \"https://mumbai-explorer.matic.today/\",\n  },\n  localArbitrum: {\n    name: \"localArbitrum\",\n    color: \"#50a0ea\",\n    chainId: 153869338190755,\n    blockExplorer: \"\",\n    rpcUrl: `http://localhost:8547`,\n  },\n  localArbitrumL1: {\n    name: \"localArbitrumL1\",\n    color: \"#50a0ea\",\n    chainId: 44010,\n    blockExplorer: \"\",\n    rpcUrl: `http://localhost:7545`,\n  },\n  rinkebyArbitrum: {\n    name: \"Arbitrum Testnet\",\n    color: \"#50a0ea\",\n    chainId: 421611,\n    blockExplorer: \"https://rinkeby-explorer.arbitrum.io/#/\",\n    rpcUrl: `https://rinkeby.arbitrum.io/rpc`,\n  },\n  arbitrum: {\n    name: \"Arbitrum\",\n    color: \"#50a0ea\",\n    chainId: 42161,\n    blockExplorer: \"https://explorer.arbitrum.io/#/\",\n    rpcUrl: `https://arb1.arbitrum.io/rpc`,\n    gasPrice: 0,\n  },\n  localOptimismL1: {\n    name: \"localOptimismL1\",\n    color: \"#f01a37\",\n    chainId: 31337,\n    blockExplorer: \"\",\n    rpcUrl: \"http://\" + window.location.hostname + \":9545\",\n  },\n  localOptimism: {\n    name: \"localOptimism\",\n    color: \"#f01a37\",\n    chainId: 420,\n    blockExplorer: \"\",\n    rpcUrl: \"http://\" + window.location.hostname + \":8545\",\n    gasPrice: 0,\n  },\n  kovanOptimism: {\n    name: \"kovanOptimism\",\n    color: \"#f01a37\",\n    chainId: 69,\n    blockExplorer: \"https://kovan-optimistic.etherscan.io/\",\n    rpcUrl: `https://kovan.optimism.io`,\n    gasPrice: 0,\n  },\n  optimism: {\n    name: \"optimism\",\n    color: \"#f01a37\",\n    chainId: 10,\n    blockExplorer: \"https://optimistic.etherscan.io/\",\n    rpcUrl: `https://mainnet.optimism.io`,\n  },\n};\n\nexport const NETWORK = chainId => {\n  for (const n in NETWORKS) {\n    if (NETWORKS[n].chainId === chainId) {\n      return NETWORKS[n];\n    }\n  }\n};\n","import { notification } from \"antd\";\nimport Notify from \"bnc-notify\";\nimport { BLOCKNATIVE_DAPPID } from \"../constants\";\n\nconst { ethers } = require(\"ethers\");\n\n// this should probably just be renamed to \"notifier\"\n// it is basically just a wrapper around BlockNative's wonderful Notify.js\n// https://docs.blocknative.com/notify\nconst callbacks = {};\n\nconst DEBUG = true;\n\nexport default function Transactor(providerOrSigner, gasPrice, etherscan) {\n  if (typeof providerOrSigner !== \"undefined\") {\n    // eslint-disable-next-line consistent-return\n    return async (tx, callback) => {\n      let signer;\n      let network;\n      let provider;\n      if (ethers.Signer.isSigner(providerOrSigner) === true) {\n        provider = providerOrSigner.provider;\n        signer = providerOrSigner;\n        network = providerOrSigner.provider && (await providerOrSigner.provider.getNetwork());\n      } else if (providerOrSigner._isProvider) {\n        provider = providerOrSigner;\n        signer = providerOrSigner.getSigner();\n        network = await providerOrSigner.getNetwork();\n      }\n\n      console.log(\"network\", network);\n      \n      var options = null;\n      var notify = null;\n      if(navigator.onLine){\n        options = {\n          dappId: BLOCKNATIVE_DAPPID, // GET YOUR OWN KEY AT https://account.blocknative.com\n          system: \"ethereum\",\n          networkId: network.chainId,\n          // darkMode: Boolean, // (default: false)\n          transactionHandler: txInformation => {\n            if (DEBUG) console.log(\"HANDLE TX\", txInformation);\n            const possibleFunction = callbacks[txInformation.transaction.hash];\n            if (typeof possibleFunction === \"function\") {\n              possibleFunction(txInformation.transaction);\n            }\n          },\n        };  \n\n        notify = Notify(options);\n      }\n       \n\n      let etherscanNetwork = \"\";\n      if (network.name && network.chainId > 1) {\n        etherscanNetwork = network.name + \".\";\n      }\n\n      let etherscanTxUrl = \"https://\" + etherscanNetwork + \"etherscan.io/tx/\";\n      if (network.chainId === 100) {\n        etherscanTxUrl = \"https://blockscout.com/poa/xdai/tx/\";\n      }\n\n      try {\n        let result;\n        if (tx instanceof Promise) {\n          if (DEBUG) console.log(\"AWAITING TX\", tx);\n          result = await tx;\n        } else {\n          if (!tx.gasPrice) {\n            tx.gasPrice = gasPrice || ethers.utils.parseUnits(\"4.1\", \"gwei\");\n          }\n          if (!tx.gasLimit) {\n            tx.gasLimit = ethers.utils.hexlify(120000);\n          }\n          if (DEBUG) console.log(\"RUNNING TX\", tx);\n          result = await signer.sendTransaction(tx);\n        }\n        if (DEBUG) console.log(\"RESULT:\", result);\n        // console.log(\"Notify\", notify);\n\n        if (callback) {\n          callbacks[result.hash] = callback;\n        }\n\n        // if it is a valid Notify.js network, use that, if not, just send a default notification\n        if (notify && [1, 3, 4, 5, 42, 100].indexOf(network.chainId) >= 0) {\n          const { emitter } = notify.hash(result.hash);\n          emitter.on(\"all\", transaction => {\n            return {\n              onclick: () => window.open((etherscan || etherscanTxUrl) + transaction.hash),\n            };\n          });\n        } else {\n          notification.info({\n            message: \"Local Transaction Sent\",\n            description: result.hash,\n            placement: \"bottomRight\",\n          });\n          // on most networks BlockNative will update a transaction handler,\n          // but locally we will set an interval to listen...\n          if (callback) {\n            const txResult = await tx;\n            const listeningInterval = setInterval(async () => {\n              console.log(\"CHECK IN ON THE TX\", txResult, provider);\n              const currentTransactionReceipt = await provider.getTransactionReceipt(txResult.hash);\n              if (currentTransactionReceipt && currentTransactionReceipt.confirmations) {\n                callback({ ...txResult, ...currentTransactionReceipt });\n                clearInterval(listeningInterval);\n              }\n            }, 500);\n          }\n        }\n\n        if (typeof result.wait === \"function\") {\n          await result.wait();\n        }\n\n        return result;\n      } catch (e) {\n        console.log(e);\n        console.log(\"Transaction Error:\", e.message);\n        notification.error({\n          message: \"Transaction Error\",\n          description: e.data ? e.data.message : e.reason ? e.reason : e.message,\n        });\n        if (callback && typeof callback === \"function\") {\n          callback(e);\n        }\n      }\n    };\n  }\n}\n","import React from \"react\";\nimport Blockies from \"react-blockies\";\n\n// provides a blockie image for the address using \"react-blockies\" library\n\nexport default function Blockie(props) {\n  if (!props.address || typeof props.address.toLowerCase !== \"function\") {\n    return <span />;\n  }\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return <Blockies seed={props.address.toLowerCase()} {...props} />;\n}\n","import { CameraOutlined, QrcodeOutlined } from \"@ant-design/icons\";\nimport { Badge, Input } from \"antd\";\nimport { useLookupAddress } from \"eth-hooks/dapps/ens\"\nimport React, { useCallback, useState } from \"react\";\nimport QrReader from \"react-qr-reader\";\nimport Blockie from \"./Blockie\";\n\n// probably we need to change value={toAddress} to address={toAddress}\n\n/*\n  ~ What it does? ~\n\n  Displays an address input with QR scan option\n\n  ~ How can I use? ~\n\n  <AddressInput\n    autoFocus\n    ensProvider={mainnetProvider}\n    placeholder=\"Enter address\"\n    value={toAddress}\n    onChange={setToAddress}\n  />\n\n  ~ Features ~\n\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n  - Provide placeholder=\"Enter address\" value for the input\n  - Value of the address input is stored in value={toAddress}\n  - Control input change by onChange={setToAddress}\n                          or onChange={address => { setToAddress(address);}}\n*/\n\nexport default function AddressInput(props) {\n  const [value, setValue] = useState(props.value);\n  const [scan, setScan] = useState(false);\n\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n  const ens = useLookupAddress(props.ensProvider, currentValue);\n\n  const scannerButton = (\n    <div\n      style={{ marginTop: 4, cursor: \"pointer\" }}\n      onClick={() => {\n        setScan(!scan);\n      }}\n    >\n      <Badge count={<CameraOutlined style={{ fontSize: 9 }} />}>\n        <QrcodeOutlined style={{ fontSize: 18 }} />\n      </Badge>{\" \"}\n      Scan\n    </div>\n  );\n\n  const { ensProvider, onChange } = props;\n  const updateAddress = useCallback(\n    async newValue => {\n      if (typeof newValue !== \"undefined\") {\n        let address = newValue;\n        if (address.indexOf(\".eth\") > 0 || address.indexOf(\".xyz\") > 0) {\n          try {\n            const possibleAddress = await ensProvider.resolveName(address);\n            if (possibleAddress) {\n              address = possibleAddress;\n            }\n            // eslint-disable-next-line no-empty\n          } catch (e) {}\n        }\n        setValue(address);\n        if (typeof onChange === \"function\") {\n          onChange(address);\n        }\n      }\n    },\n    [ensProvider, onChange],\n  );\n\n  const scanner = scan ? (\n    <div\n      style={{\n        zIndex: 256,\n        position: \"absolute\",\n        left: 0,\n        top: 0,\n        width: \"100%\",\n      }}\n      onClick={() => {\n        setScan(false);\n      }}\n    >\n      <QrReader\n        delay={250}\n        resolution={1200}\n        onError={e => {\n          console.log(\"SCAN ERROR\", e);\n          setScan(false);\n        }}\n        onScan={newValue => {\n          if (newValue) {\n            console.log(\"SCAN VALUE\", newValue);\n            let possibleNewValue = newValue;\n            if (possibleNewValue.indexOf(\"/\") >= 0) {\n              possibleNewValue = possibleNewValue.substr(possibleNewValue.lastIndexOf(\"0x\"));\n              console.log(\"CLEANED VALUE\", possibleNewValue);\n            }\n            setScan(false);\n            updateAddress(possibleNewValue);\n          }\n        }}\n        style={{ width: \"100%\" }}\n      />\n    </div>\n  ) : (\n    \"\"\n  );\n\n  return (\n    <div>\n      {scanner}\n      <Input\n        id=\"0xAddress\" // name it something other than address for auto fill doxxing\n        name=\"0xAddress\" // name it something other than address for auto fill doxxing\n        autoComplete=\"off\"\n        autoFocus={props.autoFocus}\n        placeholder={props.placeholder ? props.placeholder : \"address\"}\n        prefix={<Blockie address={currentValue} size={8} scale={3} />}\n        value={ens || currentValue}\n        addonAfter={scannerButton}\n        onChange={e => {\n          updateAddress(e.target.value);\n        }}\n      />\n    </div>\n  );\n}\n","import { Input } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\n\n// small change in useEffect, display currentValue if it's provided by user\n\n/*\n  ~ What it does? ~\n\n  Displays input field for ETH/USD amount, with an option to convert between ETH and USD\n\n  ~ How can I use? ~\n\n  <EtherInput\n    autofocus\n    price={price}\n    value=100\n    placeholder=\"Enter amount\"\n    onChange={value => {\n      setAmount(value);\n    }}\n  />\n\n  ~ Features ~\n\n  - Provide price={price} of ether and easily convert between USD and ETH\n  - Provide value={value} to specify initial amount of ether\n  - Provide placeholder=\"Enter amount\" value for the input\n  - Control input change by onChange={value => { setAmount(value);}}\n*/\n\nexport default function EtherInput(props) {\n  const [mode, setMode] = useState(props.price ? \"USD\" : \"ETH\");\n  const [display, setDisplay] = useState();\n  const [value, setValue] = useState();\n\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n\n  const option = title => {\n    if (!props.price) return \"\";\n    return (\n      <div\n        style={{ cursor: \"pointer\" }}\n        onClick={() => {\n          if (mode === \"USD\") {\n            setMode(\"ETH\");\n            setDisplay(currentValue);\n          } else {\n            setMode(\"USD\");\n            if (currentValue) {\n              const usdValue = \"\" + (parseFloat(currentValue) * props.price).toFixed(2);\n              setDisplay(usdValue);\n            } else {\n              setDisplay(currentValue);\n            }\n          }\n        }}\n      >\n        {title}\n      </div>\n    );\n  };\n\n  let prefix;\n  let addonAfter;\n  if (mode === \"USD\") {\n    prefix = \"$\";\n    addonAfter = option(\"USD 🔀\");\n  } else {\n    prefix = \"Ξ\";\n    addonAfter = option(\"ETH 🔀\");\n  }\n\n  useEffect(() => {\n    if (!currentValue) {\n      setDisplay(\"\");\n    }\n  }, [currentValue]);\n\n  return (\n    <Input\n      placeholder={props.placeholder ? props.placeholder : \"amount in \" + mode}\n      autoFocus={props.autoFocus}\n      prefix={prefix}\n      value={display}\n      addonAfter={addonAfter}\n      onChange={async e => {\n        const newValue = e.target.value;\n        if (mode === \"USD\") {\n          const possibleNewValue = parseFloat(newValue);\n          if (possibleNewValue) {\n            const ethValue = possibleNewValue / props.price;\n            setValue(ethValue);\n            if (typeof props.onChange === \"function\") {\n              props.onChange(ethValue);\n            }\n            setDisplay(newValue);\n          } else {\n            setDisplay(newValue);\n          }\n        } else {\n          setValue(newValue);\n          if (typeof props.onChange === \"function\") {\n            props.onChange(newValue);\n          }\n          setDisplay(newValue);\n        }\n      }}\n    />\n  );\n}\n","import { KeyOutlined, QrcodeOutlined, SendOutlined, WalletOutlined } from \"@ant-design/icons\";\nimport { Button, Modal, Spin, Tooltip, Typography } from \"antd\";\nimport { ethers } from \"ethers\";\nimport QR from \"qrcode.react\";\nimport React, { useState, useEffect } from \"react\";\nimport { Transactor } from \"../helpers\";\nimport Address from \"./Address\";\nimport AddressInput from \"./AddressInput\";\nimport Balance from \"./Balance\";\nimport EtherInput from \"./EtherInput\";\n\nconst { Text, Paragraph } = Typography;\n\n/*\n  ~ What it does? ~\n\n  Displays a wallet where you can specify address and send USD/ETH, with options to\n  scan address, to convert between USD and ETH, to see and generate private keys,\n  to send, receive and extract the burner wallet\n\n  ~ How can I use? ~\n\n  <Wallet\n    provider={userProvider}\n    address={address}\n    ensProvider={mainnetProvider}\n    price={price}\n    color='red'\n  />\n\n  ~ Features ~\n\n  - Provide provider={userProvider} to display a wallet\n  - Provide address={address} if you want to specify address, otherwise\n                                                    your default address will be used\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n  - Provide price={price} of ether and easily convert between USD and ETH\n  - Provide color to specify the color of wallet icon\n*/\n\nexport default function Wallet(props) {\n  const [signerAddress, setSignerAddress] = useState();\n  useEffect(() => {\n    async function getAddress() {\n      if (props.signer) {\n        const newAddress = await props.signer.getAddress();\n        setSignerAddress(newAddress);\n      }\n    }\n    getAddress();\n  }, [props.signer]);\n\n  const selectedAddress = props.address || signerAddress;\n\n  const [open, setOpen] = useState();\n  const [qr, setQr] = useState();\n  const [amount, setAmount] = useState();\n  const [toAddress, setToAddress] = useState();\n  const [pk, setPK] = useState();\n\n  const providerSend = props.signer ? (\n    <Tooltip title=\"Wallet\">\n      <WalletOutlined\n        onClick={() => {\n          setOpen(!open);\n        }}\n        rotate={-90}\n        style={{\n          padding: 7,\n          color: props.color ? props.color : \"\",\n          cursor: \"pointer\",\n          fontSize: 28,\n          verticalAlign: \"middle\",\n        }}\n      />\n    </Tooltip>\n  ) : (\n    \"\"\n  );\n\n  let display;\n  let receiveButton;\n  let privateKeyButton;\n  if (qr) {\n    display = (\n      <div>\n        <div>\n          <Text copyable>{selectedAddress}</Text>\n        </div>\n        <QR\n          value={selectedAddress}\n          size=\"450\"\n          level=\"H\"\n          includeMargin\n          renderAs=\"svg\"\n          imageSettings={{ excavate: false }}\n        />\n      </div>\n    );\n    receiveButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setQr(\"\");\n        }}\n      >\n        <QrcodeOutlined /> Hide\n      </Button>\n    );\n    privateKeyButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setPK(selectedAddress);\n          setQr(\"\");\n        }}\n      >\n        <KeyOutlined /> Private Key\n      </Button>\n    );\n  } else if (pk) {\n    const pk = localStorage.getItem(\"metaPrivateKey\");\n    const wallet = new ethers.Wallet(pk);\n\n    if (wallet.address !== selectedAddress) {\n      display = (\n        <div>\n          <b>*injected account*, private key unknown</b>\n        </div>\n      );\n    } else {\n      const extraPkDisplayAdded = {};\n      const extraPkDisplay = [];\n      extraPkDisplayAdded[wallet.address] = true;\n      extraPkDisplay.push(\n        <div style={{ fontSize: 16, padding: 2, backgroundStyle: \"#89e789\" }}>\n          <a href={\"/pk#\" + pk}>\n            <Address minimized address={wallet.address} ensProvider={props.ensProvider} /> {wallet.address.substr(0, 6)}\n          </a>\n        </div>,\n      );\n      for (const key in localStorage) {\n        if (key.indexOf(\"metaPrivateKey_backup\") >= 0) {\n          console.log(key);\n          const pastpk = localStorage.getItem(key);\n          const pastwallet = new ethers.Wallet(pastpk);\n          if (!extraPkDisplayAdded[pastwallet.address] /* && selectedAddress!=pastwallet.address */) {\n            extraPkDisplayAdded[pastwallet.address] = true;\n            extraPkDisplay.push(\n              <div style={{ fontSize: 16 }}>\n                <a href={\"/pk#\" + pastpk}>\n                  <Address minimized address={pastwallet.address} ensProvider={props.ensProvider} />{\" \"}\n                  {pastwallet.address.substr(0, 6)}\n                </a>\n              </div>,\n            );\n          }\n        }\n      }\n\n      display = (\n        <div>\n          <b>Private Key:</b>\n\n          <div>\n            <Text copyable>{pk}</Text>\n          </div>\n\n          <hr />\n\n          <i>\n            Point your camera phone at qr code to open in\n            <a target=\"_blank\" href={\"https://xdai.io/\" + pk} rel=\"noopener noreferrer\">\n              burner wallet\n            </a>\n            :\n          </i>\n          <QR\n            value={\"https://xdai.io/\" + pk}\n            size=\"450\"\n            level=\"H\"\n            includeMargin\n            renderAs=\"svg\"\n            imageSettings={{ excavate: false }}\n          />\n\n          <Paragraph style={{ fontSize: \"16\" }} copyable>\n            {\"https://xdai.io/\" + pk}\n          </Paragraph>\n\n          {extraPkDisplay ? (\n            <div>\n              <h3>Known Private Keys:</h3>\n              {extraPkDisplay}\n              <Button\n                onClick={() => {\n                  const currentPrivateKey = window.localStorage.getItem(\"metaPrivateKey\");\n                  if (currentPrivateKey) {\n                    window.localStorage.setItem(\"metaPrivateKey_backup\" + Date.now(), currentPrivateKey);\n                  }\n                  const randomWallet = ethers.Wallet.createRandom();\n                  const privateKey = randomWallet._signingKey().privateKey;\n                  window.localStorage.setItem(\"metaPrivateKey\", privateKey);\n                  window.location.reload();\n                }}\n              >\n                Generate\n              </Button>\n            </div>\n          ) : (\n            \"\"\n          )}\n        </div>\n      );\n    }\n\n    receiveButton = (\n      <Button\n        key=\"receive\"\n        onClick={() => {\n          setQr(selectedAddress);\n          setPK(\"\");\n        }}\n      >\n        <QrcodeOutlined /> Receive\n      </Button>\n    );\n    privateKeyButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setPK(\"\");\n          setQr(\"\");\n        }}\n      >\n        <KeyOutlined /> Hide\n      </Button>\n    );\n  } else {\n    const inputStyle = {\n      padding: 10,\n    };\n\n    display = (\n      <div>\n        <div style={inputStyle}>\n          <AddressInput\n            autoFocus\n            ensProvider={props.ensProvider}\n            placeholder=\"to address\"\n            address={toAddress}\n            onChange={setToAddress}\n          />\n        </div>\n        <div style={inputStyle}>\n          <EtherInput\n            price={props.price}\n            value={amount}\n            onChange={value => {\n              setAmount(value);\n            }}\n          />\n        </div>\n      </div>\n    );\n    receiveButton = (\n      <Button\n        key=\"receive\"\n        onClick={() => {\n          setQr(selectedAddress);\n          setPK(\"\");\n        }}\n      >\n        <QrcodeOutlined /> Receive\n      </Button>\n    );\n    privateKeyButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setPK(selectedAddress);\n          setQr(\"\");\n        }}\n      >\n        <KeyOutlined /> Private Key\n      </Button>\n    );\n  }\n\n  return (\n    <span>\n      {providerSend}\n      <Modal\n        visible={open}\n        title={\n          <div>\n            {selectedAddress ? <Address address={selectedAddress} ensProvider={props.ensProvider} /> : <Spin />}\n            <div style={{ float: \"right\", paddingRight: 25 }}>\n              <Balance address={selectedAddress} provider={props.provider} dollarMultiplier={props.price} />\n            </div>\n          </div>\n        }\n        onOk={() => {\n          setQr();\n          setPK();\n          setOpen(!open);\n        }}\n        onCancel={() => {\n          setQr();\n          setPK();\n          setOpen(!open);\n        }}\n        footer={[\n          privateKeyButton,\n          receiveButton,\n          <Button\n            key=\"submit\"\n            type=\"primary\"\n            disabled={!amount || !toAddress || qr}\n            loading={false}\n            onClick={() => {\n              const tx = Transactor(props.signer);\n\n              let value;\n              try {\n                value = ethers.utils.parseEther(\"\" + amount);\n              } catch (e) {\n                // failed to parseEther, try something else\n                value = ethers.utils.parseEther(\"\" + parseFloat(amount).toFixed(8));\n              }\n\n              tx({\n                to: toAddress,\n                value,\n              });\n              setOpen(!open);\n              setQr();\n            }}\n          >\n            <SendOutlined /> Send\n          </Button>,\n        ]}\n      >\n        {display}\n      </Modal>\n    </span>\n  );\n}\n","import { Button } from \"antd\";\nimport React  from \"react\";\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\nimport Address from \"./Address\";\nimport Balance from \"./Balance\";\nimport Wallet from \"./Wallet\";\n\n// const Address = React.lazy(() => import('./'));\n/*\n  ~ What it does? ~\n\n  Displays an Address, Balance, and Wallet as one Account component,\n  also allows users to log in to existing accounts and log out\n\n  ~ How can I use? ~\n\n  <Account\n    address={address}\n    localProvider={localProvider}\n    userProvider={userProvider}\n    mainnetProvider={mainnetProvider}\n    price={price}\n    web3Modal={web3Modal}\n    loadWeb3Modal={loadWeb3Modal}\n    logoutOfWeb3Modal={logoutOfWeb3Modal}\n    blockExplorer={blockExplorer}\n  />\n\n  ~ Features ~\n\n  - Provide address={address} and get balance corresponding to the given address\n  - Provide localProvider={localProvider} to access balance on local network\n  - Provide userProvider={userProvider} to display a wallet\n  - Provide mainnetProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\")\n  - Provide price={price} of ether and get your balance converted to dollars\n  - Provide web3Modal={web3Modal}, loadWeb3Modal={loadWeb3Modal}, logoutOfWeb3Modal={logoutOfWeb3Modal}\n              to be able to log in/log out to/from existing accounts\n  - Provide blockExplorer={blockExplorer}, click on address and get the link\n              (ex. by default \"https://etherscan.io/\" or for xdai \"https://blockscout.com/poa/xdai/\")\n*/\n\nexport default function Account({\n  address,\n  userSigner,\n  localProvider,\n  mainnetProvider,\n  price,\n  minimized,\n  web3Modal,\n  loadWeb3Modal,\n  logoutOfWeb3Modal,\n  blockExplorer,\n}) {\n  const modalButtons = [];\n  if (web3Modal) {\n    if (web3Modal.cachedProvider) {\n      modalButtons.push(\n        <Button\n          key=\"logoutbutton\"\n          style={{ verticalAlign: \"top\", marginLeft: 8, marginTop: 4 }}\n          shape=\"round\"\n          size=\"large\"\n          onClick={logoutOfWeb3Modal}\n        >\n          logout\n        </Button>,\n      );\n    } else {\n      modalButtons.push(\n        <Button\n          key=\"loginbutton\"\n          style={{ verticalAlign: \"top\", marginLeft: 8, marginTop: 4 }}\n          shape=\"round\"\n          size=\"large\"\n          /* type={minimized ? \"default\" : \"primary\"}     too many people just defaulting to MM and having a bad time */\n          onClick={loadWeb3Modal}\n        >\n          connect\n        </Button>,\n      );\n    }\n  }\n\n  const { currentTheme } = useThemeSwitcher();\n\n  const display = minimized ? (\n    \"\"\n  ) : (\n    <span>\n      {address ? (\n        <Address address={address} ensProvider={mainnetProvider} blockExplorer={blockExplorer} />\n      ) : (\n        \"Connecting...\"\n      )}\n      <Balance address={address} provider={localProvider} price={price} />\n      <Wallet\n        address={address}\n        provider={localProvider}\n        signer={userSigner}\n        ensProvider={mainnetProvider}\n        price={price}\n        color={currentTheme === \"light\" ? \"#1890ff\" : \"#2caad9\"}\n      />\n    </span>\n  );\n\n  return (\n    <div>\n        {display}\n        {modalButtons}\n    </div>\n  );\n}\n","import { Input } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\n\nconst { utils, constants } = require(\"ethers\");\n\n/*\n  ~ What it does? ~\n\n  Displays input field with options to convert between STRING and BYTES32\n\n  ~ How can I use? ~\n\n  <BytesStringInput\n    autofocus\n    value={\"scaffold-eth\"}\n    placeholder=\"Enter value...\"\n    onChange={value => {\n      setValue(value);\n    }}\n  />\n\n  ~ Features ~\n\n  - Provide value={value} to specify initial string\n  - Provide placeholder=\"Enter value...\" value for the input\n  - Control input change by onChange={value => { setValue(value);}}\n\n*/\n\nexport default function BytesStringInput(props) {\n  const [mode, setMode] = useState(\"STRING\");\n  const [display, setDisplay] = useState();\n  const [value, setValue] = useState(constants.HashZero);\n\n  // current value is the value in bytes32\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n\n  const option = title => {\n    return (\n      <div\n        style={{ cursor: \"pointer\" }}\n        onClick={() => {\n          if (mode === \"STRING\") {\n            setMode(\"BYTES32\");\n            if (!utils.isHexString(currentValue)) {\n              /* in case user enters invalid bytes32 number,\n                   it considers it as string and converts to bytes32 */\n              const changedValue = utils.formatBytes32String(currentValue);\n              setDisplay(changedValue);\n            } else {\n              setDisplay(currentValue);\n            }\n          } else {\n            setMode(\"STRING\");\n            if (currentValue && utils.isHexString(currentValue)) {\n              setDisplay(utils.parseBytes32String(currentValue));\n            } else {\n              setDisplay(currentValue);\n            }\n          }\n        }}\n      >\n        {title}\n      </div>\n    );\n  };\n\n  let addonAfter;\n  if (mode === \"STRING\") {\n    addonAfter = option(\"STRING 🔀\");\n  } else {\n    addonAfter = option(\"BYTES32 🔀\");\n  }\n\n  useEffect(() => {\n    if (!currentValue) {\n      setDisplay(\"\");\n    }\n  }, [currentValue]);\n\n  return (\n    <Input\n      placeholder={props.placeholder ? props.placeholder : \"Enter value in \" + mode}\n      autoFocus={props.autoFocus}\n      value={display}\n      addonAfter={addonAfter}\n      onChange={async e => {\n        const newValue = e.target.value;\n        if (mode === \"STRING\") {\n          // const ethValue = parseFloat(newValue) / props.price;\n          // setValue(ethValue);\n          if (typeof props.onChange === \"function\") {\n            props.onChange(utils.formatBytes32String(newValue));\n          }\n          setValue(utils.formatBytes32String(newValue));\n          setDisplay(newValue);\n        } else {\n          if (typeof props.onChange === \"function\") {\n            props.onChange(newValue);\n          }\n          setValue(newValue);\n          setDisplay(newValue);\n        }\n      }}\n    />\n  );\n}\n","import React from \"react\";\nimport { Address } from \"..\";\nconst { utils } = require(\"ethers\");\n\nconst tryToDisplay = thing => {\n  if (thing && thing.toNumber) {\n    try {\n      return thing.toNumber();\n    } catch (e) {\n      return \"Ξ\" + utils.formatUnits(thing, \"ether\");\n    }\n  }\n  if (thing && thing.indexOf && thing.indexOf(\"0x\") === 0 && thing.length === 42) {\n    return <Address address={thing} fontSize={22} />;\n  }\n  return JSON.stringify(thing);\n};\n\nexport default tryToDisplay;\n","/* eslint-disable jsx-a11y/accessible-emoji */\n/* eslint-disable jsx-a11y/anchor-is-valid */\nimport { Col, Divider, Row } from \"antd\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport tryToDisplay from \"./utils\";\n\nconst DisplayVariable = ({ contractFunction, functionInfo, refreshRequired, triggerRefresh }) => {\n  const [variable, setVariable] = useState(\"\");\n\n  const refresh = useCallback(async () => {\n    try {\n      const funcResponse = await contractFunction();\n      setVariable(funcResponse);\n      triggerRefresh(false);\n    } catch (e) {\n      console.log(e);\n    }\n  }, [setVariable, contractFunction, triggerRefresh]);\n\n  useEffect(() => {\n    refresh();\n  }, [refresh, refreshRequired, contractFunction]);\n\n  return (\n    <div>\n      <Row>\n        <Col\n          span={8}\n          style={{\n            textAlign: \"right\",\n            opacity: 0.333,\n            paddingRight: 6,\n            fontSize: 24,\n          }}\n        >\n          {functionInfo.name}\n        </Col>\n        <Col span={14}>\n          <h2>{tryToDisplay(variable)}</h2>\n        </Col>\n        <Col span={2}>\n          <h2>\n            <a href=\"#\" onClick={refresh}>\n              🔄\n            </a>\n          </h2>\n        </Col>\n      </Row>\n      <Divider />\n    </div>\n  );\n};\n\nexport default DisplayVariable;\n","/* eslint-disable jsx-a11y/click-events-have-key-events */\n/* eslint-disable jsx-a11y/no-static-element-interactions */\n/* eslint-disable jsx-a11y/accessible-emoji */\nimport { Button, Col, Divider, Input, Row, Tooltip } from \"antd\";\nimport React, { useState } from \"react\";\nimport Blockies from \"react-blockies\";\nimport { Transactor } from \"../../helpers\";\nimport tryToDisplay from \"./utils\";\n\nconst { utils, BigNumber } = require(\"ethers\");\n\nexport default function FunctionForm({ contractFunction, functionInfo, provider, gasPrice, triggerRefresh }) {\n  const [form, setForm] = useState({});\n  const [txValue, setTxValue] = useState();\n  const [returnValue, setReturnValue] = useState();\n\n  const tx = Transactor(provider, gasPrice);\n\n  let inputIndex = 0;\n  const inputs = functionInfo.inputs.map(input => {\n    const key = functionInfo.name + \"_\" + input.name + \"_\" + input.type + \"_\" + inputIndex++;\n\n    let buttons = \"\";\n    if (input.type === \"bytes32\") {\n      buttons = (\n        <Tooltip placement=\"right\" title=\"to bytes32\">\n          <div\n            type=\"dashed\"\n            style={{ cursor: \"pointer\" }}\n            onClick={async () => {\n              if (utils.isHexString(form[key])) {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.parseBytes32String(form[key]);\n                setForm(formUpdate);\n              } else {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.formatBytes32String(form[key]);\n                setForm(formUpdate);\n              }\n            }}\n          >\n            #️⃣\n          </div>\n        </Tooltip>\n      );\n    } else if (input.type === \"bytes\") {\n      buttons = (\n        <Tooltip placement=\"right\" title=\"to hex\">\n          <div\n            type=\"dashed\"\n            style={{ cursor: \"pointer\" }}\n            onClick={async () => {\n              if (utils.isHexString(form[key])) {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.toUtf8String(form[key]);\n                setForm(formUpdate);\n              } else {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.hexlify(utils.toUtf8Bytes(form[key]));\n                setForm(formUpdate);\n              }\n            }}\n          >\n            #️⃣\n          </div>\n        </Tooltip>\n      );\n    } else if (input.type === \"uint256\") {\n      buttons = (\n        <Tooltip placement=\"right\" title=\"* 10 ** 18\">\n          <div\n            type=\"dashed\"\n            style={{ cursor: \"pointer\" }}\n            onClick={async () => {\n              const formUpdate = { ...form };\n              formUpdate[key] = utils.parseEther(form[key]);\n              setForm(formUpdate);\n            }}\n          >\n            ✴️\n          </div>\n        </Tooltip>\n      );\n    } else if (input.type === \"address\") {\n      const possibleAddress = form[key] && form[key].toLowerCase && form[key].toLowerCase().trim();\n      if (possibleAddress && possibleAddress.length === 42) {\n        buttons = (\n          <Tooltip placement=\"right\" title=\"blockie\">\n            <Blockies seed={possibleAddress} scale={3} />\n          </Tooltip>\n        );\n      }\n    }\n\n    return (\n      <div style={{ margin: 2 }} key={key}>\n        <Input\n          size=\"large\"\n          placeholder={input.name ? input.type + \" \" + input.name : input.type}\n          autoComplete=\"off\"\n          value={form[key]}\n          name={key}\n          onChange={event => {\n            const formUpdate = { ...form };\n            formUpdate[event.target.name] = event.target.value;\n            setForm(formUpdate);\n          }}\n          suffix={buttons}\n        />\n      </div>\n    );\n  });\n\n  const txValueInput = (\n    <div style={{ margin: 2 }} key=\"txValueInput\">\n      <Input\n        placeholder=\"transaction value\"\n        onChange={e => setTxValue(e.target.value)}\n        value={txValue}\n        addonAfter={\n          <div>\n            <Row>\n              <Col span={16}>\n                <Tooltip placement=\"right\" title=\" * 10^18 \">\n                  <div\n                    type=\"dashed\"\n                    style={{ cursor: \"pointer\" }}\n                    onClick={async () => {\n                      const floatValue = parseFloat(txValue);\n                      if (floatValue) setTxValue(\"\" + floatValue * 10 ** 18);\n                    }}\n                  >\n                    ✳️\n                  </div>\n                </Tooltip>\n              </Col>\n              <Col span={16}>\n                <Tooltip placement=\"right\" title=\"number to hex\">\n                  <div\n                    type=\"dashed\"\n                    style={{ cursor: \"pointer\" }}\n                    onClick={async () => {\n                      setTxValue(BigNumber.from(txValue).toHexString());\n                    }}\n                  >\n                    #️⃣\n                  </div>\n                </Tooltip>\n              </Col>\n            </Row>\n          </div>\n        }\n      />\n    </div>\n  );\n\n  if (functionInfo.payable) {\n    inputs.push(txValueInput);\n  }\n\n  const buttonIcon =\n    functionInfo.type === \"call\" ? (\n      <Button style={{ marginLeft: -32 }}>Read📡</Button>\n    ) : (\n      <Button style={{ marginLeft: -32 }}>Send💸</Button>\n    );\n  inputs.push(\n    <div style={{ cursor: \"pointer\", margin: 2 }} key=\"goButton\">\n      <Input\n        onChange={e => setReturnValue(e.target.value)}\n        defaultValue=\"\"\n        bordered={false}\n        disabled\n        value={returnValue}\n        suffix={\n          <div\n            style={{ width: 50, height: 30, margin: 0 }}\n            type=\"default\"\n            onClick={async () => {\n              let innerIndex = 0;\n              const args = functionInfo.inputs.map(input => {\n                const key = functionInfo.name + \"_\" + input.name + \"_\" + input.type + \"_\" + innerIndex++;\n                let value = form[key];\n                if (input.baseType === \"array\") {\n                  value = JSON.parse(value);\n                } else if (input.type === \"bool\") {\n                  if (value === \"true\" || value === \"1\" || value === \"0x1\" || value === \"0x01\" || value === \"0x0001\") {\n                    value = 1;\n                  } else {\n                    value = 0;\n                  }\n                }\n                return value;\n              });\n\n              let result;\n              if (functionInfo.stateMutability === \"view\" || functionInfo.stateMutability === \"pure\") {\n                const returned = await contractFunction(...args);\n                result = tryToDisplay(returned);\n              } else {\n                const overrides = {};\n                if (txValue) {\n                  overrides.value = txValue; // ethers.utils.parseEther()\n                }\n                if (gasPrice) {\n                  overrides.gasPrice = gasPrice;\n                }\n                // Uncomment this if you want to skip the gas estimation for each transaction\n                // overrides.gasLimit = hexlify(1200000);\n\n                // console.log(\"Running with extras\",extras)\n                const returned = await tx(contractFunction(...args, overrides));\n                result = tryToDisplay(returned);\n              }\n\n              console.log(\"SETTING RESULT:\", result);\n              setReturnValue(result);\n              triggerRefresh(true);\n            }}\n          >\n            {buttonIcon}\n          </div>\n        }\n      />\n    </div>,\n  );\n\n  return (\n    <div>\n      <Row>\n        { functionInfo.name === 'claim'?(\n          <Col\n          span={8}\n          style={{\n            textAlign: \"right\",\n            opacity: 0.333,\n            paddingRight: 6,\n            fontSize: 24,\n            color: 'red'\n          }}\n        >\n          {functionInfo.name}\n        </Col>\n        ):(\n          <Col\n          span={8}\n          style={{\n            textAlign: \"right\",\n            opacity: 0.333,\n            paddingRight: 6,\n            fontSize: 24,\n          }}\n        >\n          {functionInfo.name}\n        </Col>\n        )}\n\n        <Col span={16}>{inputs}</Col>\n      </Row>\n      <Divider />\n    </div>\n  );\n}","import { Card } from \"antd\";\nimport React, { useMemo, useState } from \"react\";\nimport { useContractExistsAtAddress, useContractLoader } from \"../../hooks\";\nimport Account from \"../Account\";\nimport DisplayVariable from \"./DisplayVariable\";\nimport FunctionForm from \"./FunctionForm\";\n\nconst funcsUseful = [\"claim\", \"ownerOf\", \"balanceOf\"];\nconst noContractDisplay = (\n  <div>\n    Loading...{\" \"}\n    <div style={{ padding: 32 }}>\n      You need to run{\" \"}\n      <span\n        className=\"highlight\"\n        style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n      >\n        yarn run chain\n      </span>{\" \"}\n      and{\" \"}\n      <span\n        className=\"highlight\"\n        style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n      >\n        yarn run deploy\n      </span>{\" \"}\n      to see your contract here.\n    </div>\n    <div style={{ padding: 32 }}>\n      <span style={{ marginRight: 4 }} role=\"img\" aria-label=\"warning\">\n        ☢️\n      </span>\n      Warning: You might need to run\n      <span\n        className=\"highlight\"\n        style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n      >\n        yarn run deploy\n      </span>{\" \"}\n      <i>again</i> after the frontend comes up!\n    </div>\n  </div>\n);\n\nconst isQueryable = fn => (fn.stateMutability === \"view\" || fn.stateMutability === \"pure\") && fn.inputs.length === 0;\n\nexport default function Contract({\n  customContract,\n  account,\n  gasPrice,\n  signer,\n  provider,\n  name,\n  show,\n  price,\n  blockExplorer,\n  chainId,\n}) {\n  const contracts = useContractLoader(provider, { chainId });\n  let contract;\n  if (!customContract) {\n    contract = contracts ? contracts[name] : \"\";\n  } else {\n    contract = customContract;\n  }\n\n  const address = contract ? contract.address : \"\";\n  const contractIsDeployed = useContractExistsAtAddress(provider, address);\n\n  const displayedContractFunctions = useMemo(\n    () =>\n      contract\n        ? Object.values(contract.interface.functions).filter(\n            fn => fn.type === \"function\" && !(show && show.indexOf(fn.name) < 0),\n          )\n        : [],\n    [contract, show],\n  ).sort((a, b) => funcsUseful.indexOf(a.name) - funcsUseful.indexOf(b.name));\n  // IMPORTANT PLACE: SORT\n  const [refreshRequired, triggerRefresh] = useState(false);\n  // console.log(displayedContractFunctions);\n  const contractDisplay = displayedContractFunctions.map(fn => {\n    // IMPORTANT PLACE\n    if (funcsUseful.includes(fn.name)) {\n      if (isQueryable(fn)) {\n        // If there are no inputs, just display return value\n        return (\n          <DisplayVariable\n            key={fn.name}\n            contractFunction={contract[fn.name]}\n            functionInfo={fn}\n            refreshRequired={refreshRequired}\n            triggerRefresh={triggerRefresh}\n          />\n        );\n      }\n      // If there are inputs, display a form to allow users to provide these\n      return (\n        <FunctionForm\n          key={\"FF\" + fn.name}\n          contractFunction={\n            fn.stateMutability === \"view\" || fn.stateMutability === \"pure\"\n              ? contract[fn.name]\n              : contract.connect(signer)[fn.name]\n          }\n          functionInfo={fn}\n          provider={provider}\n          gasPrice={gasPrice}\n          triggerRefresh={triggerRefresh}\n        />\n      );\n    }\n  });\n\n  return (\n    <div style={{ margin: \"auto\", width: \"70vw\" }}>\n      <Card\n        title={\n          <div>\n            {name}\n            <div style={{ float: \"right\" }}>\n              <Account\n                address={address}\n                localProvider={provider}\n                injectedProvider={provider}\n                mainnetProvider={provider}\n                price={price}\n                blockExplorer={blockExplorer}\n              />\n              {account}\n            </div>\n          </div>\n        }\n        size=\"large\"\n        style={{ marginTop: 25, width: \"100%\" }}\n        loading={contractDisplay && contractDisplay.length <= 0}\n      >\n        {contractIsDeployed ? contractDisplay : noContractDisplay}\n      </Card>\n    </div>\n  );\n}\n","import { SendOutlined } from \"@ant-design/icons\";\nimport { Button, Input, Tooltip } from \"antd\";\nimport { useLookupAddress } from \"eth-hooks/dapps/ens\"\nimport React, { useCallback, useState, useEffect } from \"react\";\nimport Blockies from \"react-blockies\";\nimport { Transactor } from \"../helpers\";\nimport Wallet from \"./Wallet\";\n\nconst { utils } = require(\"ethers\");\n\n// improved a bit by converting address to ens if it exists\n// added option to directly input ens name\n// added placeholder option\n\n/*\n  ~ What it does? ~\n\n  Displays a local faucet to send ETH to given address, also wallet is provided\n\n  ~ How can I use? ~\n\n  <Faucet\n    price={price}\n    localProvider={localProvider}\n    ensProvider={mainnetProvider}\n    placeholder={\"Send local faucet\"}\n  />\n\n  ~ Features ~\n\n  - Provide price={price} of ether and convert between USD and ETH in a wallet\n  - Provide localProvider={localProvider} to be able to send ETH to given address\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n              works both in input field & wallet\n  - Provide placeholder=\"Send local faucet\" value for the input\n*/\n\nexport default function Faucet(props) {\n  const [address, setAddress] = useState();\n  const [faucetAddress, setFaucetAddress] = useState();\n\n  useEffect(() => {\n    const getFaucetAddress = async () => {\n      if (props.localProvider) {\n        const _faucetAddress = await props.localProvider.listAccounts();\n        setFaucetAddress(_faucetAddress[0]);\n        console.log(_faucetAddress);\n      }\n    };\n    getFaucetAddress();\n  }, [props.localProvider]);\n\n  let blockie;\n  if (address && typeof address.toLowerCase === \"function\") {\n    blockie = <Blockies seed={address.toLowerCase()} size={8} scale={4} />;\n  } else {\n    blockie = <div />;\n  }\n\n  const ens = useLookupAddress(props.ensProvider, address);\n\n  const updateAddress = useCallback(\n    async newValue => {\n      if (typeof newValue !== \"undefined\") {\n        let address = newValue;\n        if (address.indexOf(\".eth\") > 0 || address.indexOf(\".xyz\") > 0) {\n          try {\n            const possibleAddress = await props.ensProvider.resolveName(address);\n            if (possibleAddress) {\n              address = possibleAddress;\n            }\n            // eslint-disable-next-line no-empty\n          } catch (e) {}\n        }\n        setAddress(address);\n      }\n    },\n    [props.ensProvider, props.onChange],\n  );\n\n  const tx = Transactor(props.localProvider);\n\n  return (\n    <span>\n      <Input\n        size=\"large\"\n        placeholder={props.placeholder ? props.placeholder : \"local faucet\"}\n        prefix={blockie}\n        // value={address}\n        value={ens || address}\n        onChange={e => {\n          // setAddress(e.target.value);\n          updateAddress(e.target.value);\n        }}\n        suffix={\n          <Tooltip title=\"Faucet: Send local ether to an address.\">\n            <Button\n              onClick={() => {\n                tx({\n                  to: address,\n                  value: utils.parseEther(\"0.01\"),\n                });\n                setAddress(\"\");\n              }}\n              shape=\"circle\"\n              icon={<SendOutlined />}\n            />\n            <Wallet\n              color=\"#888888\"\n              provider={props.localProvider}\n              ensProvider={props.ensProvider}\n              price={props.price}\n              address={faucetAddress}\n            />\n          </Tooltip>\n        }\n      />\n    </span>\n  );\n}\n","import { PageHeader } from \"antd\";\nimport React from \"react\";\n\n// displays a page header\n\nexport default function Header() {\n  return (\n    <a href=\"https://github.com/leeduckgo/bewater-nft-wallet\" target=\"_blank\" rel=\"noopener noreferrer\">\n      <PageHeader\n        title=\"BeWater\"\n        subTitle=\"🖼 NFT Wallet0x01\"\n        style={{ cursor: \"pointer\" }}\n      />\n    </a>\n  );\n}\n","import { RetweetOutlined, SettingOutlined } from \"@ant-design/icons\";\nimport { ChainId, Fetcher, Percent, Token, TokenAmount, Trade, WETH } from \"@uniswap/sdk\";\nimport { abi as IUniswapV2Router02ABI } from \"@uniswap/v2-periphery/build/IUniswapV2Router02.json\";\nimport {\n  Button,\n  Card,\n  Descriptions,\n  Divider,\n  Drawer,\n  InputNumber,\n  Modal,\n  notification,\n  Row,\n  Select,\n  Space,\n  Tooltip,\n  Typography,\n} from \"antd\";\nimport { useBlockNumber, usePoller } from \"eth-hooks\";\nimport { ethers } from \"ethers\";\nimport React, { useEffect, useState } from \"react\";\nimport { useDebounce } from \"../hooks\";\n\nconst { Option } = Select;\nconst { Text } = Typography;\n\nexport const ROUTER_ADDRESS = \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\";\n\nexport const ZERO_ADDRESS = \"0x0000000000000000000000000000000000000000\";\n\nconst erc20Abi = [\n  \"function balanceOf(address owner) view returns (uint256)\",\n  \"function approve(address _spender, uint256 _value) public returns (bool success)\",\n  \"function allowance(address _owner, address _spender) public view returns (uint256 remaining)\",\n];\n\nconst makeCall = async (callName, contract, args, metadata = {}) => {\n  if (contract[callName]) {\n    let result;\n    if (args) {\n      result = await contract[callName](...args, metadata);\n    } else {\n      result = await contract[callName]();\n    }\n    return result;\n  }\n  console.log(\"no call of that name!\");\n};\n\nconst defaultToken = \"ETH\";\nconst defaultTokenOut = \"DAI\";\nconst defaultSlippage = \"0.5\";\nconst defaultTimeLimit = 60 * 10;\n\nconst tokenListToObject = array =>\n  array.reduce((obj, item) => {\n    obj[item.symbol] = new Token(item.chainId, item.address, item.decimals, item.symbol, item.name);\n    return obj;\n  }, {});\n\nfunction Swap({ selectedProvider, tokenListURI }) {\n  const [tokenIn, setTokenIn] = useState(defaultToken);\n  const [tokenOut, setTokenOut] = useState(defaultTokenOut);\n  const [exact, setExact] = useState();\n  const [amountIn, setAmountIn] = useState();\n  const [amountInMax, setAmountInMax] = useState();\n  const [amountOut, setAmountOut] = useState();\n  const [amountOutMin, setAmountOutMin] = useState();\n  const [trades, setTrades] = useState();\n  const [routerAllowance, setRouterAllowance] = useState();\n  const [balanceIn, setBalanceIn] = useState();\n  const [balanceOut, setBalanceOut] = useState();\n  const [slippageTolerance, setSlippageTolerance] = useState(\n    new Percent(Math.round(defaultSlippage * 100).toString(), \"10000\"),\n  );\n  const [timeLimit, setTimeLimit] = useState(defaultTimeLimit);\n  const [swapping, setSwapping] = useState(false);\n  const [approving, setApproving] = useState(false);\n  const [settingsVisible, setSettingsVisible] = useState(false);\n  const [swapModalVisible, setSwapModalVisible] = useState(false);\n\n  const [tokenList, setTokenList] = useState([]);\n\n  const [tokens, setTokens] = useState();\n\n  const [invertPrice, setInvertPrice] = useState(false);\n\n  const blockNumber = useBlockNumber(selectedProvider, 3000);\n\n  const signer = selectedProvider.getSigner();\n  const routerContract = new ethers.Contract(ROUTER_ADDRESS, IUniswapV2Router02ABI, signer);\n\n  const _tokenListUri = tokenListURI || \"https://gateway.ipfs.io/ipns/tokens.uniswap.org\";\n\n  const debouncedAmountIn = useDebounce(amountIn, 500);\n  const debouncedAmountOut = useDebounce(amountOut, 500);\n\n  const activeChainId = process.env.REACT_APP_NETWORK === \"kovan\" ? ChainId.KOVAN : ChainId.MAINNET;\n\n  useEffect(() => {\n    const getTokenList = async () => {\n      console.log(_tokenListUri);\n      try {\n        const tokenList = await fetch(_tokenListUri);\n        const tokenListJson = await tokenList.json();\n        const filteredTokens = tokenListJson.tokens.filter(function (t) {\n          return t.chainId === activeChainId;\n        });\n        const ethToken = WETH[activeChainId];\n        ethToken.name = \"Ethereum\";\n        ethToken.symbol = \"ETH\";\n        ethToken.logoURI =\n          \"https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2/logo.png\";\n        const _tokenList = [ethToken, ...filteredTokens];\n        setTokenList(_tokenList);\n        const _tokens = tokenListToObject(_tokenList);\n        setTokens(_tokens);\n      } catch (e) {\n        console.log(e);\n      }\n    };\n    getTokenList();\n  }, [tokenListURI]);\n\n  const getTrades = async () => {\n    if (tokenIn && tokenOut && (amountIn || amountOut)) {\n      const pairs = arr => arr.map((v, i) => arr.slice(i + 1).map(w => [v, w])).flat();\n\n      const baseTokens = tokenList\n        .filter(function (t) {\n          return [\"DAI\", \"USDC\", \"USDT\", \"COMP\", \"ETH\", \"MKR\", \"LINK\", tokenIn, tokenOut].includes(t.symbol);\n        })\n        .map(el => {\n          return new Token(el.chainId, el.address, el.decimals, el.symbol, el.name);\n        });\n\n      const listOfPairwiseTokens = pairs(baseTokens);\n\n      const getPairs = async list => {\n        const listOfPromises = list.map(item => Fetcher.fetchPairData(item[0], item[1], selectedProvider));\n        return Promise.all(listOfPromises.map(p => p.catch(() => undefined)));\n      };\n\n      const listOfPairs = await getPairs(listOfPairwiseTokens);\n\n      let bestTrade;\n\n      if (exact === \"in\") {\n        setAmountInMax();\n        bestTrade = Trade.bestTradeExactIn(\n          listOfPairs.filter(item => item),\n          new TokenAmount(tokens[tokenIn], ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals)),\n          tokens[tokenOut],\n          { maxNumResults: 3, maxHops: 1 },\n        );\n        if (bestTrade[0]) {\n          setAmountOut(bestTrade[0].outputAmount.toSignificant(6));\n        } else {\n          setAmountOut();\n        }\n      } else if (exact === \"out\") {\n        setAmountOutMin();\n        bestTrade = Trade.bestTradeExactOut(\n          listOfPairs.filter(item => item),\n          tokens[tokenIn],\n          new TokenAmount(tokens[tokenOut], ethers.utils.parseUnits(amountOut.toString(), tokens[tokenOut].decimals)),\n          { maxNumResults: 3, maxHops: 1 },\n        );\n        if (bestTrade[0]) {\n          setAmountIn(bestTrade[0].inputAmount.toSignificant(6));\n        } else {\n          setAmountIn();\n        }\n      }\n\n      setTrades(bestTrade);\n\n      console.log(bestTrade);\n    }\n  };\n\n  useEffect(() => {\n    getTrades();\n  }, [tokenIn, tokenOut, debouncedAmountIn, debouncedAmountOut, slippageTolerance, selectedProvider]);\n\n  useEffect(() => {\n    if (trades && trades[0]) {\n      if (exact === \"in\") {\n        setAmountOutMin(trades[0].minimumAmountOut(slippageTolerance));\n      } else if (exact === \"out\") {\n        setAmountInMax(trades[0].maximumAmountIn(slippageTolerance));\n      }\n    }\n  }, [slippageTolerance, amountIn, amountOut, trades]);\n\n  const getBalance = async (_token, _account, _contract) => {\n    let newBalance;\n    if (_token === \"ETH\") {\n      newBalance = await selectedProvider.getBalance(_account);\n    } else {\n      newBalance = await makeCall(\"balanceOf\", _contract, [_account]);\n    }\n    return newBalance;\n  };\n\n  const getAccountInfo = async () => {\n    if (tokens) {\n      const accountList = await selectedProvider.listAccounts();\n\n      if (tokenIn) {\n        const tempContractIn = new ethers.Contract(tokens[tokenIn].address, erc20Abi, selectedProvider);\n        const newBalanceIn = await getBalance(tokenIn, accountList[0], tempContractIn);\n        setBalanceIn(newBalanceIn);\n\n        let allowance;\n\n        if (tokenIn === \"ETH\") {\n          setRouterAllowance();\n        } else {\n          allowance = await makeCall(\"allowance\", tempContractIn, [accountList[0], ROUTER_ADDRESS]);\n          setRouterAllowance(allowance);\n        }\n      }\n\n      if (tokenOut) {\n        const tempContractOut = new ethers.Contract(tokens[tokenOut].address, erc20Abi, selectedProvider);\n        const newBalanceOut = await getBalance(tokenOut, accountList[0], tempContractOut);\n        setBalanceOut(newBalanceOut);\n      }\n    }\n  };\n\n  usePoller(getAccountInfo, 6000);\n\n  const route = trades\n    ? trades.length > 0\n      ? trades[0].route.path.map(function (item) {\n          return item.symbol;\n        })\n      : []\n    : [];\n\n  const updateRouterAllowance = async newAllowance => {\n    setApproving(true);\n    try {\n      const tempContract = new ethers.Contract(tokens[tokenIn].address, erc20Abi, signer);\n      const result = await makeCall(\"approve\", tempContract, [ROUTER_ADDRESS, newAllowance]);\n      console.log(result);\n      setApproving(false);\n      return true;\n    } catch (e) {\n      notification.open({\n        message: \"Approval unsuccessful\",\n        description: `Error: ${e.message}`,\n      });\n    }\n  };\n\n  const approveRouter = async () => {\n    const approvalAmount =\n      exact === \"in\"\n        ? ethers.utils.hexlify(ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals))\n        : amountInMax.raw.toString();\n    console.log(approvalAmount);\n    const approval = updateRouterAllowance(approvalAmount);\n    if (approval) {\n      notification.open({\n        message: \"Token transfer approved\",\n        description: `You can now swap up to ${amountIn} ${tokenIn}`,\n      });\n    }\n  };\n\n  const removeRouterAllowance = async () => {\n    const approvalAmount = ethers.utils.hexlify(0);\n    console.log(approvalAmount);\n    const removal = updateRouterAllowance(approvalAmount);\n    if (removal) {\n      notification.open({\n        message: \"Token approval removed\",\n        description: `The router is no longer approved for ${tokenIn}`,\n      });\n    }\n  };\n\n  const executeSwap = async () => {\n    setSwapping(true);\n    try {\n      let args;\n      const metadata = {};\n\n      let call;\n      const deadline = Math.floor(Date.now() / 1000) + timeLimit;\n      const path = trades[0].route.path.map(function (item) {\n        return item.address;\n      });\n      console.log(path);\n      const accountList = await selectedProvider.listAccounts();\n      const address = accountList[0];\n\n      if (exact === \"in\") {\n        const _amountIn = ethers.utils.hexlify(ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals));\n        const _amountOutMin = ethers.utils.hexlify(ethers.BigNumber.from(amountOutMin.raw.toString()));\n        if (tokenIn === \"ETH\") {\n          call = \"swapExactETHForTokens\";\n          args = [_amountOutMin, path, address, deadline];\n          metadata.value = _amountIn;\n        } else {\n          call = tokenOut === \"ETH\" ? \"swapExactTokensForETH\" : \"swapExactTokensForTokens\";\n          args = [_amountIn, _amountOutMin, path, address, deadline];\n        }\n      } else if (exact === \"out\") {\n        const _amountOut = ethers.utils.hexlify(\n          ethers.utils.parseUnits(amountOut.toString(), tokens[tokenOut].decimals),\n        );\n        const _amountInMax = ethers.utils.hexlify(ethers.BigNumber.from(amountInMax.raw.toString()));\n        if (tokenIn === \"ETH\") {\n          call = \"swapETHForExactTokens\";\n          args = [_amountOut, path, address, deadline];\n          metadata.value = _amountInMax;\n        } else {\n          call = tokenOut === \"ETH\" ? \"swapTokensForExactETH\" : \"swapTokensForExactTokens\";\n          args = [_amountOut, _amountInMax, path, address, deadline];\n        }\n      }\n      console.log(call, args, metadata);\n      const result = await makeCall(call, routerContract, args, metadata);\n      console.log(result);\n      notification.open({\n        message: \"Swap complete 🦄\",\n        description: (\n          <>\n            <Text>{`Swapped ${tokenIn} for ${tokenOut}, transaction: `}</Text>\n            <Text copyable>{result.hash}</Text>\n          </>\n        ),\n      });\n      setSwapping(false);\n    } catch (e) {\n      console.log(e);\n      setSwapping(false);\n      notification.open({\n        message: \"Swap unsuccessful\",\n        description: `Error: ${e.message}`,\n      });\n    }\n  };\n\n  const showSwapModal = () => {\n    setSwapModalVisible(true);\n  };\n\n  const handleSwapModalOk = () => {\n    setSwapModalVisible(false);\n    executeSwap();\n  };\n\n  const handleSwapModalCancel = () => {\n    setSwapModalVisible(false);\n  };\n\n  const insufficientBalance = balanceIn\n    ? parseFloat(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals)) < amountIn\n    : null;\n  const inputIsToken = tokenIn !== \"ETH\";\n  const insufficientAllowance = !inputIsToken\n    ? false\n    : routerAllowance\n    ? parseFloat(ethers.utils.formatUnits(routerAllowance, tokens[tokenIn].decimals)) < amountIn\n    : null;\n  const formattedBalanceIn = balanceIn\n    ? parseFloat(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals)).toPrecision(6)\n    : null;\n  const formattedBalanceOut = balanceOut\n    ? parseFloat(ethers.utils.formatUnits(balanceOut, tokens[tokenOut].decimals)).toPrecision(6)\n    : null;\n\n  const metaIn =\n    tokens && tokenList && tokenIn\n      ? tokenList.filter(function (t) {\n          return t.address === tokens[tokenIn].address;\n        })[0]\n      : null;\n  const metaOut =\n    tokens && tokenList && tokenOut\n      ? tokenList.filter(function (t) {\n          return t.address === tokens[tokenOut].address;\n        })[0]\n      : null;\n\n  const cleanIpfsURI = uri => {\n    try {\n      return uri.replace(\"ipfs://\", \"https://ipfs.io/ipfs/\");\n    } catch (e) {\n      console.log(e, uri);\n      return uri;\n    }\n  };\n\n  const logoIn = metaIn ? cleanIpfsURI(metaIn.logoURI) : null;\n  const logoOut = metaOut ? cleanIpfsURI(metaOut.logoURI) : null;\n\n  const rawPrice = trades && trades[0] ? trades[0].executionPrice : null;\n  const price = rawPrice ? rawPrice.toSignificant(7) : null;\n  const priceDescription = rawPrice\n    ? invertPrice\n      ? `${rawPrice.invert().toSignificant(7)} ${tokenIn} per ${tokenOut}`\n      : `${price} ${tokenOut} per ${tokenIn}`\n    : null;\n\n  const priceWidget = (\n    <Space>\n      <Text type=\"secondary\">{priceDescription}</Text>\n      <Button\n        type=\"text\"\n        onClick={() => {\n          setInvertPrice(!invertPrice);\n        }}\n      >\n        <RetweetOutlined />\n      </Button>\n    </Space>\n  );\n\n  const swapModal = (\n    <Modal title=\"Confirm swap\" visible={swapModalVisible} onOk={handleSwapModalOk} onCancel={handleSwapModalCancel}>\n      <Row>\n        <Space>\n          <img src={logoIn} alt={tokenIn} width=\"30\" />\n          {amountIn}\n          {tokenIn}\n        </Space>\n      </Row>\n      <Row justify=\"center\" align=\"middle\" style={{ width: 30 }}>\n        <span>↓</span>\n      </Row>\n      <Row>\n        <Space>\n          <img src={logoOut} alt={tokenOut} width=\"30\" />\n          {amountOut}\n          {tokenOut}\n        </Space>\n      </Row>\n      <Divider />\n      <Row>{priceWidget}</Row>\n      <Row>\n        {trades && ((amountOutMin && exact === \"in\") || (amountInMax && exact === \"out\"))\n          ? exact === \"in\"\n            ? `Output is estimated. You will receive at least ${amountOutMin.toSignificant(\n                6,\n              )} ${tokenOut} or the transaction will revert.`\n            : `Input is estimated. You will sell at most ${amountInMax.toSignificant(\n                6,\n              )} ${tokenIn} or the transaction will revert.`\n          : null}\n      </Row>\n    </Modal>\n  );\n\n  return (\n    <Card\n      title={\n        <Space>\n          <img src=\"https://ipfs.io/ipfs/QmXttGpZrECX5qCyXbBQiqgQNytVGeZW5Anewvh2jc4psg\" width=\"40\" alt=\"uniswapLogo\" />\n          <Typography>Uniswapper</Typography>\n        </Space>\n      }\n      extra={\n        <Button\n          type=\"text\"\n          onClick={() => {\n            setSettingsVisible(true);\n          }}\n        >\n          <SettingOutlined />\n        </Button>\n      }\n    >\n      <Space direction=\"vertical\">\n        <Row justify=\"center\" align=\"middle\">\n          <Card\n            size=\"small\"\n            type=\"inner\"\n            title={`From${exact === \"out\" && tokenIn && tokenOut ? \" (estimate)\" : \"\"}`}\n            extra={\n              <>\n                <img src={logoIn} alt={tokenIn} width=\"30\" />\n                <Button\n                  type=\"link\"\n                  onClick={() => {\n                    setAmountOut();\n                    setAmountIn(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals));\n                    setAmountOutMin();\n                    setAmountInMax();\n                    setExact(\"in\");\n                  }}\n                >\n                  {formattedBalanceIn}\n                </Button>\n              </>\n            }\n            style={{ width: 400, textAlign: \"left\" }}\n          >\n            <InputNumber\n              style={{ width: \"160px\" }}\n              min={0}\n              size=\"large\"\n              value={amountIn}\n              onChange={e => {\n                setAmountOut();\n                setTrades();\n                setAmountIn(e);\n                setExact(\"in\");\n              }}\n            />\n            <Select\n              showSearch\n              value={tokenIn}\n              style={{ width: \"120px\" }}\n              size=\"large\"\n              bordered={false}\n              defaultValue={defaultToken}\n              onChange={value => {\n                console.log(value);\n                if (value === tokenOut) {\n                  console.log(\"switch!\", tokenIn);\n                  setTokenOut(tokenIn);\n                  setAmountOut(amountIn);\n                  setBalanceOut(balanceIn);\n                }\n                setTokenIn(value);\n                setTrades();\n                setAmountIn();\n                setExact(\"out\");\n                setBalanceIn();\n              }}\n              filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n              optionFilterProp=\"children\"\n            >\n              {tokenList.map(token => (\n                <Option key={token.symbol} value={token.symbol}>\n                  {token.symbol}\n                </Option>\n              ))}\n            </Select>\n          </Card>\n        </Row>\n        <Row justify=\"center\" align=\"middle\">\n          <Tooltip title={route.join(\"->\")}>\n            <span>↓</span>\n          </Tooltip>\n        </Row>\n        <Row justify=\"center\" align=\"middle\">\n          <Card\n            size=\"small\"\n            type=\"inner\"\n            title={`To${exact === \"in\" && tokenIn && tokenOut ? \" (estimate)\" : \"\"}`}\n            extra={\n              <>\n                <img src={logoOut} width=\"30\" alt={tokenOut} />\n                <Button type=\"text\">{formattedBalanceOut}</Button>\n              </>\n            }\n            style={{ width: 400, textAlign: \"left\" }}\n          >\n            <InputNumber\n              style={{ width: \"160px\" }}\n              size=\"large\"\n              min={0}\n              value={amountOut}\n              onChange={e => {\n                setAmountOut(e);\n                setAmountIn();\n                setTrades();\n                setExact(\"out\");\n              }}\n            />\n            <Select\n              showSearch\n              value={tokenOut}\n              style={{ width: \"120px\" }}\n              size=\"large\"\n              bordered={false}\n              onChange={value => {\n                console.log(value, tokenIn, tokenOut);\n                if (value === tokenIn) {\n                  console.log(\"switch!\", tokenOut);\n                  setTokenIn(tokenOut);\n                  setAmountIn(amountOut);\n                  setBalanceIn(balanceOut);\n                }\n                setTokenOut(value);\n                setExact(\"in\");\n                setAmountOut();\n                setTrades();\n                setBalanceOut();\n              }}\n              filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n              optionFilterProp=\"children\"\n            >\n              {tokenList.map(token => (\n                <Option key={token.symbol} value={token.symbol}>\n                  {token.symbol}\n                </Option>\n              ))}\n            </Select>\n          </Card>\n        </Row>\n        <Row justify=\"center\" align=\"middle\">\n          {priceDescription ? priceWidget : null}\n        </Row>\n        <Row justify=\"center\" align=\"middle\">\n          <Space>\n            {inputIsToken ? (\n              <Button size=\"large\" loading={approving} disabled={!insufficientAllowance} onClick={approveRouter}>\n                {!insufficientAllowance && amountIn && amountOut ? \"Approved\" : \"Approve\"}\n              </Button>\n            ) : null}\n            <Button\n              size=\"large\"\n              loading={swapping}\n              disabled={insufficientAllowance || insufficientBalance || !amountIn || !amountOut}\n              onClick={showSwapModal}\n            >\n              {insufficientBalance ? \"Insufficient balance\" : \"Swap!\"}\n            </Button>\n            {swapModal}\n          </Space>\n        </Row>\n      </Space>\n      <Drawer\n        visible={settingsVisible}\n        onClose={() => {\n          setSettingsVisible(false);\n        }}\n        width={500}\n      >\n        <Descriptions title=\"Details\" column={1} style={{ textAlign: \"left\" }}>\n          <Descriptions.Item label=\"blockNumber\">{blockNumber}</Descriptions.Item>\n          <Descriptions.Item label=\"routerAllowance\">\n            <Space>\n              {routerAllowance ? ethers.utils.formatUnits(routerAllowance, tokens[tokenIn].decimals) : null}\n              {routerAllowance > 0 ? <Button onClick={removeRouterAllowance}>Remove Allowance</Button> : null}\n            </Space>\n          </Descriptions.Item>\n          <Descriptions.Item label=\"route\">{route.join(\"->\")}</Descriptions.Item>\n          <Descriptions.Item label=\"exact\">{exact}</Descriptions.Item>\n          <Descriptions.Item label=\"bestPrice\">\n            {trades ? (trades.length > 0 ? trades[0].executionPrice.toSignificant(6) : null) : null}\n          </Descriptions.Item>\n          <Descriptions.Item label=\"nextMidPrice\">\n            {trades ? (trades.length > 0 ? trades[0].nextMidPrice.toSignificant(6) : null) : null}\n          </Descriptions.Item>\n          <Descriptions.Item label=\"priceImpact\">\n            {trades ? (trades.length > 0 ? trades[0].priceImpact.toSignificant(6) : null) : null}\n          </Descriptions.Item>\n          <Descriptions.Item label=\"slippageTolerance\">\n            <InputNumber\n              defaultValue={defaultSlippage}\n              min={0}\n              max={100}\n              precision={2}\n              formatter={value => `${value}%`}\n              parser={value => value.replace(\"%\", \"\")}\n              onChange={value => {\n                console.log(value);\n\n                const slippagePercent = new Percent(Math.round(value * 100).toString(), \"10000\");\n                setSlippageTolerance(slippagePercent);\n              }}\n            />\n          </Descriptions.Item>\n          <Descriptions.Item label=\"amountInMax\">{amountInMax ? amountInMax.toExact() : null}</Descriptions.Item>\n          <Descriptions.Item label=\"amountOutMin\">{amountOutMin ? amountOutMin.toExact() : null}</Descriptions.Item>\n          <Descriptions.Item label=\"timeLimitInSeconds\">\n            <InputNumber\n              min={0}\n              max={3600}\n              defaultValue={defaultTimeLimit}\n              onChange={value => {\n                console.log(value);\n                setTimeLimit(value);\n              }}\n            />\n          </Descriptions.Item>\n        </Descriptions>\n      </Drawer>\n    </Card>\n  );\n}\n\nexport default Swap;\n","import { Switch } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\n\nexport default function ThemeSwitcher() {\n  const theme = window.localStorage.getItem(\"theme\");\n  const [isDarkMode, setIsDarkMode] = useState(!(!theme || theme === \"light\"));\n  const { switcher, currentTheme, status, themes } = useThemeSwitcher();\n\n  useEffect(() => {\n    window.localStorage.setItem(\"theme\", currentTheme);\n  }, [currentTheme]);\n\n  const toggleTheme = isChecked => {\n    setIsDarkMode(isChecked);\n    switcher({ theme: isChecked ? themes.dark : themes.light });\n  };\n\n  // Avoid theme change flicker\n  // if (status === \"loading\") {\n  //   return null;\n  // }\n\n  return (\n    <div className=\"main fade-in\" style={{ position: \"fixed\", right: 8, bottom: 8 }}>\n      <span style={{ padding: 8 }}>{currentTheme === \"light\" ? \"☀️\" : \"🌜\"}</span>\n      <Switch checked={isDarkMode} onChange={toggleTheme} />\n    </div>\n  );\n}\n","import { DownloadOutlined, EditOutlined, SendOutlined } from \"@ant-design/icons\";\nimport { Timeline, Typography } from \"antd\";\nimport React from \"react\";\nimport Blockies from \"react-blockies\";\n\nconst { Text } = Typography;\n\n// displays a timeline for scaffold-eth usage\n\nexport default function TimelineDisplay(props) {\n  return (\n    <Timeline mode=\"right\">\n      <Timeline.Item dot=\"💾\">\n        <Text delete>\n          Clone and Install from the{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/austintgriffith/scaffold-eth\">\n            github repo\n          </a>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"⚛️\">\n        <Text delete>\n          Start your frontend app with: <Text strong>yarn start</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"⛓\">\n        <Text delete={props.chainIsUp}>\n          Start your local blockchain with: <Text strong>yarn run chain</Text> (and refresh)\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"📝\">\n        <Text delete={props.hasOwner}>\n          Compile and deploy your smart contract: <Text strong>yarn run deploy</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"🤡\">\n        <Text delete={props.isNotSmoort}>\n          Fix error in <Text code>SmartContractWallet.sol</Text> then: <Text strong>yarn run deploy</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot={<SendOutlined style={{ fontSize: \"16px\" }} />} color={props.hasEther ? \"green\" : \"blue\"}>\n        <Text delete={props.hasEther}>\n          Send test ether to your{\" \"}\n          <Blockies seed={(props.address ? props.address : \"\").toLowerCase()} size={8} scale={2} /> address using\n          (bottom left) faucet\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item\n        dot={<DownloadOutlined style={{ fontSize: \"16px\" }} />}\n        color={props.contractHasEther ? \"green\" : \"blue\"}\n      >\n        <Text delete={props.contractHasEther}>\n          Deposit some funds into your{\" \"}\n          <Blockies seed={(props.contractAddress ? props.contractAddress : \"\").toLowerCase()} size={8} scale={2} />{\" \"}\n          smart contract wallet\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item\n        dot={<EditOutlined style={{ fontSize: \"16px\" }} />}\n        color={props.amOwnerOfContract ? \"green\" : \"blue\"}\n      >\n        <Text delete={props.amOwnerOfContract}>\n          Set <b>owner</b> of your{\" \"}\n          <Blockies seed={(props.contractAddress ? props.contractAddress : \"\").toLowerCase()} size={8} scale={2} />{\" \"}\n          smart contract wallet to your{\" \"}\n          <Blockies seed={(props.address ? props.address : \"\").toLowerCase()} size={8} scale={2} /> address\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"☢️\">\n        <Text>\n          Yikes, anyone can take ownership of <Text code>SmartContractWallet.sol</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"🔬\">\n        <Text>\n          Test your contract with <Text code>buidler/test/myTest.js</Text> then:\n          <Text strong>yarn run test</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"🚀\">\n        <Text>\n          Build something awesome with 🏗 <a href=\"https://github.com/austintgriffith/scaffold-eth\">scaffold-eth</a> and{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://twitter.com/austingriffith\">\n            @ me\n          </a>\n          !\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"📖\">\n        <Text>\n          Read more about{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://ethereum.org/developers\">\n            Ethereum\n          </a>\n          ,{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://solidity.readthedocs.io/en/develop/contracts.html\">\n            Solidity\n          </a>\n          , and{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://buidler.dev/tutorial\">\n            Buidler\n          </a>\n        </Text>\n      </Timeline.Item>\n    </Timeline>\n  );\n}\n","/* eslint-disable jsx-a11y/accessible-emoji */\n\nimport { utils, ethers } from \"ethers\";\nimport { Button, Input, Form, Select, InputNumber, Table, Radio } from \"antd\";\nimport React, { useState, useEffect } from \"react\";\nimport { useContractLoader, useOnBlock } from \"../hooks\";\nimport { NETWORKS } from \"../constants\";\nimport { Transactor } from \"../helpers\";\n\n/*\nThis is a component for bridging between L1 & L2\nCurrently it supports Testnet deposits for Arbitrum & Optimism\n\n __          _______ _____\n \\ \\        / /_   _|  __ \\\n  \\ \\  /\\  / /  | | | |__) |\n   \\ \\/  \\/ /   | | |  ___/\n    \\  /\\  /   _| |_| |\n     \\/  \\/   |_____|_|\n\n\n*/\n\nexport default function L2ArbitrumBridge({ address, userSigner }) {\n  const [L1EthBalance, setL1EthBalance] = useState(\"...\");\n  const [L2EthBalance, setL2EthBalance] = useState(\"...\");\n  const [L1Provider, setL1Provider] = useState(\"\");\n  const [L2Provider, setL2Provider] = useState(\"\");\n  const [rollup, setRollup] = useState(\"arbitrum\");\n  const [environment, setEnvironment] = useState(\"test\");\n\n  const rollupConfig = {\n    arbitrum: {\n      test: { L1: NETWORKS.rinkeby, L2: NETWORKS.rinkebyArbitrum },\n      main: { L1: NETWORKS.mainnet, L2: NETWORKS.arbitrum },\n      local: { L1: NETWORKS.localArbitrumL1, L2: NETWORKS.localArbitrum },\n    },\n    optimism: {\n      test: { L1: NETWORKS.kovan, L2: NETWORKS.kovanOptimism },\n      local: { L1: NETWORKS.localOptimismL1, L2: NETWORKS.localOptimism },\n    },\n  };\n\n  const activeConfig = rollupConfig[rollup][environment];\n\n  const selectedChainId =\n    userSigner && userSigner.provider && userSigner.provider._network && userSigner.provider._network.chainId;\n\n  const tx = Transactor(userSigner);\n\n  useEffect(() => {\n    async function setProviders() {\n      const L1 = activeConfig.L1;\n      const L2 = activeConfig.L2;\n      setL1Provider(new ethers.providers.StaticJsonRpcProvider(L1.rpcUrl));\n      setL2Provider(new ethers.providers.StaticJsonRpcProvider(L2.rpcUrl));\n      setL1EthBalance(\"...\");\n      setL2EthBalance(\"...\");\n    }\n    setProviders();\n  }, [rollup]);\n\n  const contracts = useContractLoader(userSigner, { externalContracts: L1BridgeMetadata, hardhatContracts: {} });\n\n  useOnBlock(L1Provider, async () => {\n    console.log(`⛓ A new mainnet block is here: ${L1Provider._lastBlockNumber}`);\n    const yourL1Balance = await L1Provider.getBalance(address);\n    setL1EthBalance(yourL1Balance ? ethers.utils.formatEther(yourL1Balance) : \"...\");\n    const yourL2Balance = await L2Provider.getBalance(address);\n    setL2EthBalance(yourL2Balance ? ethers.utils.formatEther(yourL2Balance) : \"...\");\n  });\n\n  const { Option } = Select;\n  const formItemLayout = {\n    labelCol: {\n      xs: { span: 24 },\n      sm: { span: 8 },\n    },\n    wrapperCol: {\n      xs: { span: 24 },\n      sm: { span: 12 },\n    },\n  };\n  const tailFormItemLayout = {\n    wrapperCol: {\n      xs: {\n        span: 24,\n        offset: 0,\n      },\n      sm: {\n        span: 12,\n        offset: 8,\n      },\n    },\n  };\n\n  const columns = [\n    {\n      title: \"\",\n      dataIndex: \"token\",\n      key: \"token\",\n      align: \"center\",\n    },\n    {\n      title: `${activeConfig.L1.name} L1 Balance`,\n      dataIndex: \"l1\",\n      key: \"l1\",\n      align: \"center\",\n    },\n    {\n      title: `${activeConfig.L1.name} ${rollup} Balance`,\n      dataIndex: \"l2\",\n      key: \"l2\",\n      align: \"center\",\n    },\n  ];\n\n  const data = [\n    {\n      key: \"1\",\n      token: \"ETH\",\n      l1: \"Ξ\" + L1EthBalance,\n      l2: \"Ξ\" + L2EthBalance,\n    },\n  ];\n\n  const [form] = Form.useForm();\n\n  const onAssetChange = value => {\n    console.log(value);\n  };\n\n  async function onFinish(values) {\n    console.log(contracts);\n    console.log(values.amount.toString());\n    console.log(rollup);\n    let newTx;\n    try {\n      if (rollup === \"arbitrum\") {\n        newTx = await tx(\n          contracts.Inbox.depositEth(1_300_000, {\n            value: utils.parseEther(values.amount.toString()),\n            gasLimit: 300000,\n          }),\n        );\n      } else if (rollup === \"optimism\") {\n        newTx = await tx(\n          contracts.OVM_L1StandardBridge.depositETH(1_300_000, \"0x\", {\n            value: utils.parseEther(values.amount.toString()),\n          }),\n        );\n      }\n      await newTx.wait();\n      console.log(\"woop!\");\n    } catch (e) {\n      console.log(e);\n      console.log(\"something went wrong!\");\n    }\n  }\n\n  const onReset = () => {\n    form.resetFields();\n  };\n\n  const wrongNetwork = selectedChainId !== activeConfig.L1.chainId;\n\n  return (\n    <div style={{ padding: 16, width: 800, margin: \"auto\", marginBottom: 128 }}>\n      <div style={{ border: \"1px solid #cccccc\", padding: 16, width: 800, margin: \"auto\", marginBottom: 128 }}>\n        <h2>Welcome to the L2 Deposit Bridge!</h2>\n        <Radio.Group\n          value={rollup}\n          onChange={e => {\n            setRollup(e.target.value);\n          }}\n          style={{ marginBottom: 10 }}\n        >\n          <Radio.Button value=\"arbitrum\">Arbitrum</Radio.Button>\n          <Radio.Button value=\"optimism\">Optimism</Radio.Button>\n        </Radio.Group>\n\n        <Table columns={columns} dataSource={data} pagination={false} style={{ marginBottom: 20 }} />\n\n        <Form\n          {...formItemLayout}\n          form={form}\n          name=\"control-hooks\"\n          onFinish={onFinish}\n          initialValues={{ assetType: \"eth\" }}\n        >\n          <Form.Item\n            name=\"assetType\"\n            label=\"Select Asset Type\"\n            rules={[\n              {\n                required: true,\n              },\n            ]}\n          >\n            <Select placeholder=\"Select an asset type\" onChange={onAssetChange} allowClear>\n              <Option value=\"eth\">ETH</Option>\n              <Option disabled value=\"erc20\">\n                ERC-20\n              </Option>\n            </Select>\n          </Form.Item>\n          <Form.Item name=\"address\" label=\"Address\">\n            <Input disabled placeholder={address} />\n          </Form.Item>\n          <Form.Item\n            name=\"amount\"\n            label=\"Amount to bridge\"\n            rules={[\n              {\n                required: true,\n              },\n            ]}\n          >\n            <InputNumber />\n          </Form.Item>\n          <Form.Item {...tailFormItemLayout}>\n            <Button type=\"primary\" htmlType=\"submit\" disabled={wrongNetwork}>\n              {wrongNetwork ? `Switch wallet to ${activeConfig.L1.name}` : \"Deposit\"}\n            </Button>\n          </Form.Item>\n        </Form>\n      </div>\n    </div>\n  );\n}\n\n// Arbitrum Inbox https://rinkeby.etherscan.io/address/0xa157dc79ca26d69c3b1282d03ec42bdee2790a8f#code\nconst ArbitrumInboxABI = [\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, internalType: \"uint256\", name: \"messageNum\", type: \"uint256\" },\n      { indexed: false, internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"InboxMessageDelivered\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [{ indexed: true, internalType: \"uint256\", name: \"messageNum\", type: \"uint256\" }],\n    name: \"InboxMessageDeliveredFromOrigin\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [{ indexed: false, internalType: \"address\", name: \"newSource\", type: \"address\" }],\n    name: \"WhitelistSourceUpdated\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"bridge\",\n    outputs: [{ internalType: \"contract IBridge\", name: \"\", type: \"address\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\n      { internalType: \"uint256\", name: \"l2CallValue\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"maxSubmissionCost\", type: \"uint256\" },\n      { internalType: \"address\", name: \"excessFeeRefundAddress\", type: \"address\" },\n      { internalType: \"address\", name: \"callValueRefundAddress\", type: \"address\" },\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"createRetryableTicket\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"uint256\", name: \"maxSubmissionCost\", type: \"uint256\" }],\n    name: \"depositEth\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"contract IBridge\", name: \"_bridge\", type: \"address\" },\n      { internalType: \"address\", name: \"_whitelist\", type: \"address\" },\n    ],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"isMaster\",\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"sendContractTransaction\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"sendL1FundedContractTransaction\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"nonce\", type: \"uint256\" },\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"sendL1FundedUnsignedTransaction\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"bytes\", name: \"messageData\", type: \"bytes\" }],\n    name: \"sendL2Message\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"bytes\", name: \"messageData\", type: \"bytes\" }],\n    name: \"sendL2MessageFromOrigin\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"nonce\", type: \"uint256\" },\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"sendUnsignedTransaction\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"address\", name: \"newSource\", type: \"address\" }],\n    name: \"updateWhitelistSource\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"whitelist\",\n    outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\n// https://github.com/ethereum-optimism/optimism/blob/2bd49730fa8d2c10953873f0ccc792198a49d5c9/packages/contracts/contracts/optimistic-ethereum/iOVM/bridge/tokens/iOVM_L1StandardBridge.sol\nconst OVM_L1StandardBridgeABI = [\n  \"function depositETH(uint32 _l2Gas,bytes calldata _data) external payable\",\n  \"function depositETHTo(address _to,uint32 _l2Gas,bytes calldata _data) external payable\",\n  \"function finalizeETHWithdrawal (address _from,address _to,uint _amount,bytes calldata _data) external\",\n];\n\nconst L1BridgeMetadata = {\n  // Arbitrium Contract's\n  44010: {\n    contracts: {\n      Inbox: {\n        address: \"0xA4d796Ad4e79aFB703340a596AEd88f8a5924183\",\n        abi: ArbitrumInboxABI,\n      },\n    },\n  },\n  4: {\n    contracts: {\n      Inbox: {\n        address: \"0x578bade599406a8fe3d24fd7f7211c0911f5b29e\",\n        abi: ArbitrumInboxABI,\n      },\n    },\n  },\n  // Optimism Contract's\n  31337: {\n    contracts: {\n      OVM_L1StandardBridge: {\n        address: \"0x998abeb3E57409262aE5b751f60747921B33613E\",\n        abi: OVM_L1StandardBridgeABI,\n      },\n    },\n  },\n  42: {\n    contracts: {\n      OVM_L1StandardBridge: {\n        address: \"0x22F24361D548e5FaAfb36d1437839f080363982B\",\n        abi: OVM_L1StandardBridgeABI,\n      },\n    },\n  },\n};\n","import WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport { Alert, Button, Card, List, Menu } from \"antd\";\nimport \"antd/dist/antd.css\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { BrowserRouter, Link, Route, Switch } from \"react-router-dom\";\nimport Web3Modal from \"web3modal\";\nimport \"./App.css\";\n\nimport axios from \"axios\";\nimport { DownloadOutlined } from \"@ant-design/icons\";\nimport { Account, Address, AddressInput, Contract, Header, ThemeSwitch } from \"./components\";\nimport { INFURA_ID, NETWORK, NETWORKS } from \"./constants\";\n\nimport { Transactor } from \"./helpers\";\nimport {\n  useBalance,\n  useContractLoader,\n  useContractReader,\n  useEventListener,\n  useExchangePrice,\n  useGasPrice,\n  useOnBlock,\n  useUserProviderAndSigner\n} from \"./hooks\";\n\n\n// nprogress\nimport nProgress from \"nprogress\";\nimport \"nprogress/nprogress.css\"\n\n// const { Account}  = React.lazy(() => import(\"./components\"));\nconst { ethers } = require(\"ethers\");\n\n/*\n    Welcome to 🏗 scaffold-eth !\n    Code:\n    https://github.com/austintgriffith/scaffold-eth\n    Support:\n    https://t.me/joinchat/KByvmRe5wkR-8F_zz6AjpA\n    or DM @austingriffith on twitter or telegram\n    You should get your own Infura.io ID and put it in `constants.js`\n    (this is your connection to the main Ethereum network for ENS etc.)\n    🌏 EXTERNAL CONTRACTS:\n    You can also bring in contract artifacts in `constants.js`\n    (and then use the `useExternalContractLoader()` hook!)\n*/\n\n/// 📡 What chain are your contracts deployed to?\nconst targetNetwork = NETWORKS.ropsten; // <------- select your target frontend network (localhost, rinkeby, xdai, mainnet)\n\n// 😬 Sorry for all the console logging\nconst DEBUG = true;\nconst NETWORKCHECK = true;\n\n// EXAMPLE STARTING JSON:\n\n// 🛰 providers\nif (DEBUG) console.log(\"📡 Connecting to Mainnet Ethereum\");\n// const mainnetProvider = getDefaultProvider(\"mainnet\", { infura: INFURA_ID, etherscan: ETHERSCAN_KEY, quorum: 1 });\n// const mainnetProvider = new InfuraProvider(\"mainnet\",INFURA_ID);\n//\n// attempt to connect to our own scaffold eth rpc and if that fails fall back to infura...\n// Using StaticJsonRpcProvider as the chainId won't change see https://github.com/ethers-io/ethers.js/issues/901\n\nconst scaffoldEthProvider = navigator.onLine\n  ? new ethers.providers.StaticJsonRpcProvider(\"https://rpc.scaffoldeth.io:48544\")\n  : null;\nconst mainnetInfura = navigator.onLine\n  ? new ethers.providers.StaticJsonRpcProvider(\"https://mainnet.infura.io/v3/\" + INFURA_ID)\n  : null;\n\n// ( ⚠️ Getting \"failed to meet quorum\" errors? Check your INFURA_I\n\n// IMPORTANT: ENV Example: the variable should be formatted as REACT_APP_*\n// https://create-react-app.dev/docs/adding-custom-environment-variables/\n// const test = process.env.REACT_APP_TEST;\n// console.log(\"test:\", test);\n\n// 🏠 Your local provider is usually pointed at your local blockchain\nconst localProviderUrl = targetNetwork.rpcUrl;\n// as you deploy to other networks you can set REACT_APP_PROVIDER=https://dai.poa.network in packages/react-app/.env\nconst localProviderUrlFromEnv = process.env.REACT_APP_PROVIDER ? process.env.REACT_APP_PROVIDER : localProviderUrl;\nif (DEBUG) console.log(\"🏠 Connecting to provider:\", localProviderUrlFromEnv);\nconst localProvider = new ethers.providers.StaticJsonRpcProvider(localProviderUrlFromEnv);\n\n// IMPORTANT PLACE\nconst backend = process.env.REACT_APP_TAI_SHANG_NFT_PARSER;\n// \"https://taishang.leeduckgo.com/taishang/api/v1/parse?handler_id=1&type=n\";\nconst baseURL = process.env.REACT_APP_BASE_URL;\n\n\n// 🔭 block explorer URL\nconst blockExplorer = targetNetwork.blockExplorer;\n\n/*\n  Web3 modal helps us \"connect\" external wallets:\n*/\nconst web3Modal = new Web3Modal({\n  // network: \"mainnet\", // optional\n  cacheProvider: true, // optional\n  providerOptions: {\n    walletconnect: {\n      package: WalletConnectProvider, // required\n      options: {\n        infuraId: INFURA_ID,\n      },\n    },\n  },\n});\n\nconst logoutOfWeb3Modal = async () => {\n  await web3Modal.clearCachedProvider();\n  setTimeout(() => {\n    window.location.reload();\n  }, 1);\n};\n\nfunction App() {\n\n  const mainnetProvider = scaffoldEthProvider && scaffoldEthProvider._network ? scaffoldEthProvider : mainnetInfura;\n  console.log(\"mainnetProvider:\", mainnetProvider);\n  const [injectedProvider, setInjectedProvider] = useState();\n  const [address, setAddress] = useState();\n  /* 💵 This hook will get the price of ETH from 🦄 Uniswap: */\n  const price = useExchangePrice(targetNetwork, mainnetProvider);\n\n  /* 🔥 This hook will get the price of Gas from ⛽️ EtherGasStation */\n  const gasPrice = useGasPrice(targetNetwork, \"fast\");\n  // Use your injected provider from 🦊 Metamask or if you don't have it then instantly generate a 🔥 burner wallet.\n  const userProviderAndSigner = useUserProviderAndSigner(injectedProvider, localProvider);\n  const userSigner = userProviderAndSigner.signer;\n\n  useEffect(() => {\n    async function getAddress() {\n      if (userSigner) {\n        const newAddress = await userSigner.getAddress();\n        setAddress(newAddress);\n      }\n    }\n    getAddress();\n  }, [userSigner]);\n\n  // You can warn the user if you would like them to be on a specific network\n  const localChainId = localProvider && localProvider._network && localProvider._network.chainId;\n  const selectedChainId =\n    userSigner && userSigner.provider && userSigner.provider._network && userSigner.provider._network.chainId;\n\n  // For more hooks, check out 🔗eth-hooks at: https://www.npmjs.com/package/eth-hooks\n\n  // The transactor wraps transactions and provides notificiations\n  const tx = Transactor(userSigner, gasPrice);\n\n  // Faucet Tx can be used to send funds from the faucet\n  const faucetTx = Transactor(localProvider, gasPrice);\n\n  // 🏗 scaffold-eth is full of handy hooks like this one to get your balance:\n  const yourLocalBalance = useBalance(localProvider, address);\n\n  // Just plug in different 🛰 providers to get your balance on different chains:\n  const yourMainnetBalance = useBalance(mainnetProvider, address);\n\n  // Load in your local 📝 contract and read a value from it:\n  const readContracts = useContractLoader(localProvider);\n\n  // If you want to make 🔐 write transactions to your contracts, use the userSigner:\n  const writeContracts = useContractLoader(userSigner, { chainId: localChainId });\n\n  // EXTERNAL CONTRACT EXAMPLE:\n  //\n  // If you want to bring in the mainnet DAI contract it would look like:\n  const mainnetContracts = useContractLoader(mainnetProvider);\n\n  // If you want to call a function on a new block\n  useOnBlock(mainnetProvider, () => {\n    console.log(`⛓ A new mainnet block is here: ${mainnetProvider._lastBlockNumber}`);\n  });\n\n  // Then read your DAI balance like:\n  // const myMainnetDAIBalance = useContractReader(mainnetContracts, \"DAI\", \"balanceOf\", [\n  //   \"0x34aA3F359A9D614239015126635CE7732c18fDF3\",\n  // ]);\n\n  // keep track of a variable from the contract in the local React state:\n  const balance = useContractReader(readContracts, \"N\", \"balanceOf\", [address]);\n  console.log(\"🤗 read_contracts:\", readContracts);\n\n  // 📟 Listen for broadcast events\n  const transferEvents = useEventListener(readContracts, \"N\", \"Transfer\", localProvider, 1);\n  console.log(\"📟 Transfer events:\", transferEvents);\n\n  //\n  // 🧠 This effect will update Ns by polling when your balance changes\n  //\n  const yourBalance = balance && balance.toNumber && balance.toNumber();\n  const [Ns, setNs] = useState();\n\n  useEffect(() => {\n    const updateNs = async () => {\n      const collectibleUpdate = [];\n      for (let tokenIndex = 0; tokenIndex < balance; tokenIndex++) {\n        try {\n          console.log(\"Getting token index\", tokenIndex);\n          const tokenId = await readContracts.N.tokenOfOwnerByIndex(address, tokenIndex);\n          console.log(\"tokenId\", tokenId);\n          const tokenURI = await readContracts.N.tokenURI(tokenId);\n          console.log(\"tokenURI\", tokenURI);\n          // TODO: Optimize\n          let svg;\n          // const svg = get_svg(tokenURI);\n          // const svg = decodeTokenURI(tokenURI);\n          // const ipfsHash = tokenURI.replace(\"https://ipfs.io/ipfs/\", \"\");\n          // console.log(\"ipfsHash\", ipfsHash);\n          axios({\n            method: \"post\",\n            url: backend,\n            data: {\n              token_uri: tokenURI,\n              base_url: baseURL\n            },\n            headers: {\n              \"Content-Type\": \"application/json\"\n            }\n          })\n            .then(response => {\n              svg = window.atob(response.data.result.image);\n\n              console.log(\"svg fetched: \", svg);\n              try {\n                // const jsonManifest = JSON.parse(jsonManifestBuffer.toString());\n                // console.log(\"jsonManifest\", jsonManifest);\n                collectibleUpdate.push({ id: tokenId, uri: tokenURI, svg: svg, owner: address });\n              } catch (e) {\n                console.log(\"error in svg fetched:\", e);\n              }\n            })\n            .catch(error => {\n              console.log(\"error in svg fetched:\", error);\n            });\n\n          // const jsonManifestBuffer = await getFromIPFS(ipfsHash);\n\n\n        } catch (e) {\n          console.log(e);\n        }\n      }\n      setNs(collectibleUpdate);\n    };\n    updateNs();\n  }, [address, yourBalance]);\n\n  /*\n  const addressFromENS = useResolveName(mainnetProvider, \"austingriffith.eth\");\n  console.log(\"🏷 Resolved austingriffith.eth as:\",addressFromENS)\n  */\n\n  //\n  // 🧫 DEBUG 👨🏻‍🔬\n  //\n  useEffect(() => {\n    if (\n      DEBUG &&\n      mainnetProvider &&\n      address &&\n      selectedChainId &&\n      yourLocalBalance &&\n      yourMainnetBalance &&\n      readContracts &&\n      writeContracts &&\n      mainnetContracts\n    ) {\n      console.log(\"_____________________________________ 🏗 scaffold-eth _____________________________________\");\n      console.log(\"🌎 mainnetProvider\", mainnetProvider);\n      console.log(\"🏠 localChainId\", localChainId);\n      console.log(\"👩‍💼 selected address:\", address);\n      console.log(\"🕵🏻‍♂️ selectedChainId:\", selectedChainId);\n      console.log(\"💵 yourLocalBalance\", yourLocalBalance ? ethers.utils.formatEther(yourLocalBalance) : \"...\");\n      console.log(\"💵 yourMainnetBalance\", yourMainnetBalance ? ethers.utils.formatEther(yourMainnetBalance) : \"...\");\n      console.log(\"📝 readContracts\", readContracts);\n      console.log(\"🌍 DAI contract on mainnet:\", mainnetContracts);\n      console.log(\"🔐 writeContracts\", writeContracts);\n    }\n  }, [\n    mainnetProvider,\n    address,\n    selectedChainId,\n    yourLocalBalance,\n    yourMainnetBalance,\n    readContracts,\n    writeContracts,\n    mainnetContracts,\n  ]);\n\n  let networkDisplay = \"\";\n  if (NETWORKCHECK && localChainId && selectedChainId && localChainId !== selectedChainId) {\n    const networkSelected = NETWORK(selectedChainId);\n    const networkLocal = NETWORK(localChainId);\n    if (selectedChainId === 1337 && localChainId === 31337) {\n      networkDisplay = (\n        <div style={{ zIndex: 2, position: \"absolute\", right: 0, top: 60, padding: 16 }}>\n          <Alert\n            message=\"⚠️ Wrong Network ID\"\n            description={\n              <div>\n                You have <b>chain id 1337</b> for localhost and you need to change it to <b>31337</b> to work with\n                HardHat.\n                <div>(MetaMask -&gt; Settings -&gt; Networks -&gt; Chain ID -&gt; 31337)</div>\n              </div>\n            }\n            type=\"error\"\n            closable={false}\n          />\n        </div>\n      );\n    } else {\n      networkDisplay = (\n        <div style={{ zIndex: 2, position: \"absolute\", right: 0, top: 60, padding: 16 }}>\n          <Alert\n            message=\"⚠️ Wrong Network\"\n            description={\n              <div>\n                You have <b>{networkSelected && networkSelected.name}</b> selected and you need to be on{\" \"}\n                <Button\n                  onClick={async () => {\n                    const ethereum = window.ethereum;\n                    const data = [\n                      {\n                        chainId: \"0x\" + targetNetwork.chainId.toString(16),\n                        chainName: targetNetwork.name,\n                        nativeCurrency: targetNetwork.nativeCurrency,\n                        rpcUrls: [targetNetwork.rpcUrl],\n                        blockExplorerUrls: [targetNetwork.blockExplorer],\n                      },\n                    ];\n                    console.log(\"data\", data);\n                    const tx = await ethereum.request({ method: \"wallet_addEthereumChain\", params: data }).catch();\n                    if (tx) {\n                      console.log(tx);\n                    }\n                  }}\n                >\n                  <b>{networkLocal && networkLocal.name}</b>\n                </Button>.\n              </div>\n            }\n            type=\"error\"\n            closable={false}\n          />\n        </div>\n      );\n    }\n  } else {\n    networkDisplay = (\n      <div style={{ zIndex: -1, position: \"absolute\", right: 154, top: 28, padding: 16, color: targetNetwork.color }}>\n        {targetNetwork.name}\n      </div>\n    );\n  }\n\n  const loadWeb3Modal = useCallback(async () => {\n    const provider = await web3Modal.connect();\n    setInjectedProvider(new ethers.providers.Web3Provider(provider));\n\n    provider.on(\"chainChanged\", chainId => {\n      console.log(`chain changed to ${chainId}! updating providers`);\n      setInjectedProvider(new ethers.providers.Web3Provider(provider));\n    });\n\n    provider.on(\"accountsChanged\", () => {\n      console.log(`account changed!`);\n      setInjectedProvider(new ethers.providers.Web3Provider(provider));\n    });\n\n    // Subscribe to session disconnection\n    provider.on(\"disconnect\", (code, reason) => {\n      console.log(code, reason);\n      logoutOfWeb3Modal();\n    });\n  }, [setInjectedProvider]);\n\n  useEffect(() => {\n    if (web3Modal.cachedProvider) {\n      loadWeb3Modal();\n    }\n  }, [loadWeb3Modal]);\n\n  const [route, setRoute] = useState();\n  useEffect(() => {\n    setRoute(window.location.pathname);\n  }, [setRoute]);\n\n  let faucetHint = \"\";\n\n  const [faucetClicked, setFaucetClicked] = useState(false);\n  if (\n    !faucetClicked &&\n    localProvider &&\n    localProvider._network &&\n    localProvider._network.chainId == 31337 &&\n    yourLocalBalance &&\n    ethers.utils.formatEther(yourLocalBalance) <= 0\n  ) {\n    faucetHint = (\n      <div style={{ padding: 16 }}>\n        <Button\n          type=\"primary\"\n          onClick={() => {\n            faucetTx({\n              to: address,\n              value: ethers.utils.parseEther(\"0.01\"),\n            });\n            setFaucetClicked(true);\n          }}\n        >\n          💰 Grab funds from the faucet ⛽️\n        </Button>\n      </div>\n    );\n  }\n\n  const [transferToAddresses, setTransferToAddresses] = useState({});\n  nProgress.done()\n  return (\n    <div className=\"App\">\n      {/* ✏️ Edit the header and change the title to your project name */}\n      <Header />\n\n      {networkDisplay}\n      <BrowserRouter>\n        <Menu style={{ textAlign: \"center\" }} selectedKeys={[route]} mode=\"horizontal\">\n          <Menu.Item key=\"/\">\n            <Link\n              // onClick={() => {\n              //   setRoute(\"/\");\n              // }}\n              to=\"/Tai-Shang-NFT-Wallet\"\n            >\n              Ns\n            </Link>\n          </Menu.Item>\n          <Menu.Item key=\"/contract-interactor\">\n            <Link\n              // onClick={() => {\n              //   setRoute(\"/contract-interactor\");\n              // }}\n              to=\"/Tai-Shang-NFT-Wallet/contract-interactor\"\n            >\n              Contract Interactor\n            </Link>\n          </Menu.Item>\n          <Menu.Item key=\"/transfers\">\n            <Link\n              // onClick={() => {\n              //   setRoute(\"/transfers\");\n              // }}\n              to=\"/Tai-Shang-NFT-Wallet/transfers\"\n            >\n              Transfers\n            </Link>\n          </Menu.Item>\n\n          {/* <Menu.Item key=\"/ipfsup\">\n            <Link\n              onClick={() => {\n                setRoute(\"/ipfsup\");\n              }}\n              to=\"/ipfsup\"\n            >\n              IPFS Upload\n            </Link>\n          </Menu.Item>\n          <Menu.Item key=\"/ipfsdown\">\n            <Link\n              onClick={() => {\n                setRoute(\"/ipfsdown\");\n              }}\n              to=\"/ipfsdown\"\n            >\n              IPFS Download\n            </Link>\n          </Menu.Item>\n          <Menu.Item key=\"/debugcontracts\">\n            <Link\n              onClick={() => {\n                setRoute(\"/debugcontracts\");\n              }}\n              to=\"/debugcontracts\"\n            >\n              Debug Contracts\n            </Link>\n          </Menu.Item> */}\n        </Menu>\n\n        <Switch>\n          <Route exact path=\"/Tai-Shang-NFT-Wallet\">\n            {/*\n                🎛 this scaffolding is full of commonly used components\n                this <Contract/> component will automatically parse your ABI\n                and give you a form to interact with it locally\n            */}\n            <div style={{ width: 640, margin: \"auto\", marginTop: 32, paddingBottom: 32 }}>\n              <List\n                bordered\n                dataSource={Ns}\n                renderItem={item => {\n                  const id = item.id.toNumber();\n                  return (\n                    <List.Item key={id + \"_\" + item.uri + \"_\" + item.owner}>\n                      <Card\n                        title={\n                          <div>\n                            <span style={{ fontSize: 16, marginRight: 8 }}>#{id}</span> {item.name}\n                          </div>\n                        }\n                      >\n                        <div style={{ width: '300px', height: '300px' }} id={\"nft_\" + item.id}>\n                          <div dangerouslySetInnerHTML={{ __html: item.svg }} />\n                          {/* {item.svg} */}\n                          {/* <img src={item.image} style={{ maxWidth: 150 }} /> */}\n                        </div>\n                        <div>{item.description}</div>\n\n                        <a\n                          download={item.id + \".svg\"}\n                          href={`data:text/plain;charset=utf-8,${encodeURIComponent(item.svg)}`}\n                        // href={item.uri}\n                        // IMPORTANT: DOWNLOAD BUTTON HERE\n                        >\n                          <Button\n                            type=\"primary\"\n                            shape=\"round\"\n                            icon={<DownloadOutlined />}\n                            style={{ marginTop: \"16px\" }}\n                          >\n                            download .svg\n                          </Button>\n                        </a>\n                        {/* <a download={item.id + \".json\"} href={item.uri}>\n                          <Button\n                            type=\"primary\"\n                            shape=\"round\"\n                            icon={<DownloadOutlined />}\n                            style={{ marginTop: \"16px\" }}\n                          >\n                            download json\n                          </Button>\n                        </a> */}\n\n                      </Card>\n\n                      <div>\n                        owner:{\" \"}\n                        <Address\n                          address={item.owner}\n                          ensProvider={mainnetProvider}\n                          blockExplorer={blockExplorer}\n                          fontSize={16}\n                        />\n                        <AddressInput\n                          ensProvider={mainnetProvider}\n                          placeholder=\"transfer to address\"\n                          value={transferToAddresses[id]}\n                          onChange={newValue => {\n                            const update = {};\n                            update[id] = newValue;\n                            setTransferToAddresses({ ...transferToAddresses, ...update });\n                          }}\n                        />\n                        <Button\n                          onClick={() => {\n                            console.log(\"writeContracts\", writeContracts);\n                            tx(writeContracts.N.transferFrom(address, transferToAddresses[id], id));\n                          }}\n                        >\n                          Transfer\n                        </Button>\n                      </div>\n                    </List.Item>\n                  );\n                }}\n              />\n            </div>\n          </Route>\n\n          {/* IMPORTANT PLACE */}\n          <Route exact path=\"/Tai-Shang-NFT-Wallet/contract-interactor\">\n            {/*\n                🎛 this scaffolding is full of commonly used components\n                this <Contract/> component will automatically parse your ABI\n                and give you a form to interact with it locally\n            */}\n\n            <Contract\n              name=\"N\"\n              signer={userSigner}\n              provider={localProvider}\n              address={address}\n              blockExplorer={blockExplorer}\n            />\n          </Route>\n\n          <Route path=\"/Tai-Shang-NFT-Wallet/transfers\">\n            <div style={{ width: 600, margin: \"auto\", marginTop: 32, paddingBottom: 32 }}>\n              <List\n                bordered\n                dataSource={transferEvents}\n                renderItem={item => {\n                  return (\n                    <List.Item key={item[0] + \"_\" + item[1] + \"_\" + item.blockNumber + \"_\" + item[2].toNumber()}>\n                      <span style={{ fontSize: 16, marginRight: 8 }}>#{item[2].toNumber()}</span>\n                      <Address address={item[0]} ensProvider={mainnetProvider} fontSize={16} /> =&gt;\n                      <Address address={item[1]} ensProvider={mainnetProvider} fontSize={16} />\n                    </List.Item>\n                  );\n                }}\n              />\n            </div>\n          </Route>\n\n          {/* <Route path=\"/ipfsup\">\n            <div style={{ paddingTop: 32, width: 740, margin: \"auto\", textAlign: \"left\" }}>\n              <ReactJson\n                style={{ padding: 8 }}\n                src={yourJSON}\n                theme=\"pop\"\n                enableClipboard={false}\n                onEdit={(edit, a) => {\n                  setYourJSON(edit.updated_src);\n                }}\n                onAdd={(add, a) => {\n                  setYourJSON(add.updated_src);\n                }}\n                onDelete={(del, a) => {\n                  setYourJSON(del.updated_src);\n                }}\n              />\n            </div>\n            <Button\n              style={{ margin: 8 }}\n              loading={sending}\n              size=\"large\"\n              shape=\"round\"\n              type=\"primary\"\n              onClick={async () => {\n                console.log(\"UPLOADING...\", yourJSON);\n                setSending(true);\n                setIpfsHash();\n                const result = await ipfs.add(JSON.stringify(yourJSON)); // addToIPFS(JSON.stringify(yourJSON))\n                if (result && result.path) {\n                  setIpfsHash(result.path);\n                }\n                setSending(false);\n                console.log(\"RESULT:\", result);\n              }}\n            >\n              Upload to IPFS\n            </Button>\n            <div style={{ padding: 16, paddingBottom: 150 }}>{ipfsHash}</div>\n          </Route>\n          <Route path=\"/ipfsdown\">\n            <div style={{ paddingTop: 32, width: 740, margin: \"auto\" }}>\n              <Input\n                value={ipfsDownHash}\n                placeHolder=\"IPFS hash (like QmadqNw8zkdrrwdtPFK1pLi8PPxmkQ4pDJXY8ozHtz6tZq)\"\n                onChange={e => {\n                  setIpfsDownHash(e.target.value);\n                }}\n              />\n            </div>\n            <Button\n              style={{ margin: 8 }}\n              loading={sending}\n              size=\"large\"\n              shape=\"round\"\n              type=\"primary\"\n              onClick={async () => {\n                console.log(\"DOWNLOADING...\", ipfsDownHash);\n                setDownloading(true);\n                setIpfsContent();\n                const result = await getFromIPFS(ipfsDownHash); // addToIPFS(JSON.stringify(yourJSON))\n                if (result && result.toString) {\n                  setIpfsContent(result.toString());\n                }\n                setDownloading(false);\n              }}\n            >\n              Download from IPFS\n            </Button>\n            <pre style={{ padding: 16, width: 500, margin: \"auto\", paddingBottom: 150 }}>{ipfsContent}</pre>\n          </Route>\n          <Route path=\"/debugcontracts\">\n            <Contract\n              name=\"BeWater N\"\n              signer={userSigner}\n              provider={localProvider}\n              address={address}\n              blockExplorer={blockExplorer}\n            />\n          </Route> */}\n        </Switch>\n      </BrowserRouter>\n\n      <ThemeSwitch />\n\n      {/* 👨‍💼 Your account is in the top right with a wallet at connect options */}\n      <div style={{ position: \"fixed\", textAlign: \"right\", right: 0, top: 0, padding: 10 }}>\n        <Account\n          address={address}\n          localProvider={localProvider}\n          userSigner={userSigner}\n          mainnetProvider={mainnetProvider}\n          price={price}\n          web3Modal={web3Modal}\n          loadWeb3Modal={loadWeb3Modal}\n          logoutOfWeb3Modal={logoutOfWeb3Modal}\n          blockExplorer={blockExplorer}\n        />\n        {faucetHint}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { Fetcher, Route, Token, WETH } from \"@uniswap/sdk\";\nimport { usePoller } from \"eth-hooks\";\nimport { useState } from \"react\";\n\nexport default function useExchangePrice(targetNetwork, mainnetProvider, pollTime) {\n  const [price, setPrice] = useState(0);\n\n  const pollPrice = () => {\n    async function getPrice() {\n      if(!mainnetProvider)\n        return 0;\n      if (targetNetwork.price) {\n        setPrice(targetNetwork.price);\n      } else {\n        const DAI = new Token(\n          mainnetProvider.network ? mainnetProvider.network.chainId : 1,\n          \"0x6B175474E89094C44Da98b954EedeAC495271d0F\",\n          18,\n        );\n        const pair = await Fetcher.fetchPairData(DAI, WETH[DAI.chainId], mainnetProvider);\n        const route = new Route([pair], WETH[DAI.chainId]);\n        setPrice(parseFloat(route.midPrice.toSignificant(6)));\n      }\n    }\n    getPrice();\n  };\n  usePoller(pollPrice, pollTime || 9777);\n\n  return price;\n}\n","import axios from \"axios\";\nimport { usePoller } from \"eth-hooks\";\nimport { useState } from \"react\";\n\nexport default function useGasPrice(targetNetwork, speed) {\n  const [gasPrice, setGasPrice] = useState();\n  const loadGasPrice = async () => {\n    if (targetNetwork.hasOwnProperty(\"gasPrice\")) {\n      setGasPrice(targetNetwork.gasPrice);\n    } else {\n      if(navigator.onLine){\n        axios\n          .get(\"https://ethgasstation.info/json/ethgasAPI.json\")\n          .then(response => {\n            const newGasPrice = response.data[speed || \"fast\"] * 100000000;\n            if (newGasPrice !== gasPrice) {\n              setGasPrice(newGasPrice);\n            }\n          })\n          .catch(error => console.log(error));\n      }\n    }\n  };\n\n  usePoller(loadGasPrice, 39999);\n  return gasPrice;\n}\n","import { useEffect, useState } from \"react\";\nimport useOnBlock from \"./OnBlock\";\nimport usePoller from \"./Poller\";\n\nconst DEBUG = false;\n\n/*\n  ~ What it does? ~\n\n  Enables you to read values from contracts and keep track of them in the local React states\n\n  ~ How can I use? ~\n\n  const purpose = useContractReader(readContracts,\"YourContract\", \"purpose\")\n\n  ~ Features ~\n\n  - Provide readContracts by loading contracts (see more on ContractLoader.js)\n  - Specify the name of the contract, in this case it is \"YourContract\"\n  - Specify the name of the variable in the contract, in this case we keep track of \"purpose\" variable\n  - Pass an args array if the function requires\n  - Pass pollTime - if no pollTime is specified, the function will update on every new block\n*/\n\nexport default function useContractReader(contracts, contractName, functionName, args, pollTime, formatter, onChange) {\n  let adjustPollTime = 0;\n  if (pollTime) {\n    adjustPollTime = pollTime;\n  } else if (!pollTime && typeof args === \"number\") {\n    // it's okay to pass poll time as last argument without args for the call\n    adjustPollTime = args;\n  }\n\n  const [value, setValue] = useState();\n  const [tried, setTried] = useState(false);\n\n  useEffect(() => {\n    if (typeof onChange === \"function\") {\n      setTimeout(onChange.bind(this, value), 1);\n    }\n  }, [value, onChange]);\n\n  const updateValue = async () => {\n    try {\n      let newValue;\n      if (DEBUG) console.log(\"CALLING \", contractName, functionName, \"with args\", args);\n      if (args && args.length > 0) {\n        newValue = await contracts[contractName][functionName](...args);\n        setTried(true);\n        if (DEBUG)\n          console.log(\"contractName\", contractName, \"functionName\", functionName, \"args\", args, \"RESULT:\", newValue);\n      } else {\n        newValue = await contracts[contractName][functionName]();\n      }\n      if (formatter && typeof formatter === \"function\") {\n        newValue = formatter(newValue);\n      }\n      // console.log(\"GOT VALUE\",newValue)\n      if (newValue !== value) {\n        setValue(newValue);\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  // Only pass a provider to watch on a block if we have a contract and no PollTime\n  useOnBlock(contracts && contracts[contractName] && adjustPollTime === 0 && contracts[contractName].provider, () => {\n    if (contracts && contracts[contractName] && adjustPollTime === 0) {\n      updateValue();\n    }\n  });\n\n  // Use a poller if a pollTime is provided\n  usePoller(\n    async () => {\n      if (contracts && contracts[contractName] && adjustPollTime > 0) {\n        if (DEBUG) console.log(\"polling!\", contractName, functionName);\n        updateValue();\n      }\n    },\n    adjustPollTime,\n    contracts && contracts[contractName],\n  );\n\n  if (tried === false && contracts && contracts[contractName]) {\n    updateValue();\n  }\n\n  return value;\n}\n","import { useEffect, useState } from \"react\";\n\n/*\n  ~ What it does? ~\n\n  Enables you to keep track of events\n\n  ~ How can I use? ~\n\n  const setPurposeEvents = useEventListener(readContracts, \"YourContract\", \"SetPurpose\", localProvider, 1);\n\n  ~ Features ~\n\n  - Provide readContracts by loading contracts (see more on ContractLoader.js)\n  - Specify the name of the contract, in this case it is \"YourContract\"\n  - Specify the name of the event in the contract, in this case we keep track of \"SetPurpose\" event\n  - Specify the provider\n*/\n\nexport default function useEventListener(contracts, contractName, eventName, provider, startBlock, args) {\n  const [updates, setUpdates] = useState([]);\n\n  useEffect(() => {\n    if (typeof provider !== \"undefined\" && typeof startBlock !== \"undefined\") {\n      // if you want to read _all_ events from your contracts, set this to the block number it is deployed\n      provider.resetEventsBlock(startBlock);\n    }\n    if (contracts && contractName && contracts[contractName]) {\n      try {\n        contracts[contractName].on(eventName, (...args) => {\n          const blockNumber = args[args.length - 1].blockNumber;\n          setUpdates(messages => [{ blockNumber, ...args.pop().args }, ...messages]);\n        });\n        return () => {\n          contracts[contractName].removeListener(eventName);\n        };\n      } catch (e) {\n        console.log(e);\n      }\n    }\n  }, [provider, startBlock, contracts, contractName, eventName]);\n\n  return updates;\n}\n","import { ApolloClient, ApolloProvider, InMemoryCache } from \"@apollo/client\";\nimport React, { Component } from 'react';\nimport { ThemeSwitcherProvider } from \"react-css-theme-switcher\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport nProgress from \"nprogress\";\nimport \"nprogress/nprogress.css\"\n\nconst themes = {\n  dark: `${process.env.PUBLIC_URL}/dark-theme.css`,\n  light: `${process.env.PUBLIC_URL}/light-theme.css`,\n};\n\nconst prevTheme = window.localStorage.getItem(\"theme\");\n\nconst subgraphUri = \"http://localhost:8000/subgraphs/name/scaffold-eth/your-contract\";\n\nconst client = new ApolloClient({\n  uri: subgraphUri,\n  cache: new InMemoryCache(),\n});\n\n\nclass Loading extends Component {\n  constructor() {\n    super();\n    nProgress.start()\n  }\n  render(){\n      return (\n      <div></div>\n      )\n  }\n}\nReactDOM.render(\n        <Loading />,\n        document.getElementById('root')\n      )\n\nfunction listen(){\n  if(document.readyState ===\"complete\"){\n    ReactDOM.render(\n      <ApolloProvider client={client}>\n            <ThemeSwitcherProvider themeMap={themes} defaultTheme={prevTheme || \"light\"}>\n              <App subgraphUri={subgraphUri} />\n            </ThemeSwitcherProvider>\n          </ApolloProvider>,\n      document.getElementById('root')\n    )\n  }else{\n    ReactDOM.render(\n      <Loading />,\n      document.getElementById('root')\n    )\n  }\n}\n\ndocument.onreadystatechange = listen\n\n\n","const ERC20ABI = [\n  {\n    constant: true,\n    inputs: [],\n    name: \"name\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_spender\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_from\",\n        type: \"address\",\n      },\n      {\n        name: \"_to\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transferFrom\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"decimals\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint8\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: \"_owner\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        name: \"balance\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"symbol\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_to\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transfer\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: \"_owner\",\n        type: \"address\",\n      },\n      {\n        name: \"_spender\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowance\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    payable: true,\n    stateMutability: \"payable\",\n    type: \"fallback\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Approval\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n];\nconst DAIABI = [\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"chainId_\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"src\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"guy\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Approval\",\n    type: \"event\",\n  },\n  {\n    anonymous: true,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"bytes4\",\n        name: \"sig\",\n        type: \"bytes4\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"arg1\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"arg2\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: false,\n        internalType: \"bytes\",\n        name: \"data\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"LogNote\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"src\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"dst\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"DOMAIN_SEPARATOR\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"PERMIT_TYPEHASH\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowance\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"burn\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"decimals\",\n    outputs: [\n      {\n        internalType: \"uint8\",\n        name: \"\",\n        type: \"uint8\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"guy\",\n        type: \"address\",\n      },\n    ],\n    name: \"deny\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"mint\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"src\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"dst\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"move\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"name\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"nonces\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"holder\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"nonce\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"expiry\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bool\",\n        name: \"allowed\",\n        type: \"bool\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"v\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"r\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"s\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"permit\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"pull\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"push\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"guy\",\n        type: \"address\",\n      },\n    ],\n    name: \"rely\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"symbol\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"dst\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transfer\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"src\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"dst\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transferFrom\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"version\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"wards\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\n// Mainnet DAI, Optimism and Arbitrium Rollup Contracts with local addresses\nmodule.exports = {\n  1: {\n    contracts: {\n      DAI: {\n        address: \"0x6B175474E89094C44Da98b954EedeAC495271d0F\",\n        abi: DAIABI,\n      },\n      UNI: {\n        address: \"0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984\",\n        abi: ERC20ABI,\n      },\n    },\n  },\n};\n"],"sourceRoot":""}